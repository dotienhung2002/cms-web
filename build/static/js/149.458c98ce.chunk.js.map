{"version":3,"sources":["views/extensions/import-export/Import.js","@core/components/extensions-header/index.js"],"names":["ErrorToast","className","size","color","icon","role","Import","useState","tableData","setTableData","filteredData","setFilteredData","value","setValue","name","setName","uppy","Uppy","restrictions","maxNumberOfFiles","autoProceed","on","result","reader","FileReader","onload","fileData","wb","XLSX","read","type","SheetNames","forEach","sheetName","arr","getTableData","utils","sheet_to_row_object_array","Sheets","successful","data","extension","readAsBinaryString","toast","error","hideProgressBar","headArr","length","map","col","index","Object","keys","dataArr","title","subTitle","link","sm","tag","for","id","bsSize","onChange","e","target","filter","startsWithCondition","key","toString","toLowerCase","startsWith","includesCondition","includes","handleFilter","responsive","head","renderTd","ExtensionsHeader","props","href","rel"],"mappings":"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","file":"static/js/149.458c98ce.chunk.js","sourcesContent":["import { Fragment, useState } from 'react'\nimport XLSX from 'xlsx'\nimport Uppy from '@uppy/core'\nimport { X } from 'react-feather'\nimport { DragDrop } from '@uppy/react'\nimport Avatar from '@Components/avatar'\nimport { toast } from 'react-toastify'\nimport ExtensionsHeader from '@Components/extensions-header'\nimport { Row, Col, Card, CardBody, Table, CardHeader, CardTitle, Input, Label } from 'reactstrap'\n\nimport 'uppy/dist/uppy.css'\nimport '@uppy/status-bar/dist/style.css'\nimport '@Styles/react/libs/file-uploader/file-uploader.scss'\n\nconst ErrorToast = () => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='danger' icon={<X size={12} />} />\n        <h6 className='toast-title'>Error!</h6>\n      </div>\n      <small className='text-muted'>a second ago</small>\n    </div>\n    <div className='toastify-body'>\n      <span role='img' aria-label='toast-text'>\n        ðŸ‘‹ You can only upload <span className='font-weight-bolder'>.xlsx</span>,{' '}\n        <span className='font-weight-bolder'>.xls</span> & <span className='font-weight-bolder'>.csv</span> Files!.\n      </span>\n    </div>\n  </Fragment>\n)\n\nconst Import = () => {\n  const [tableData, setTableData] = useState([])\n  const [filteredData, setFilteredData] = useState([])\n  const [value, setValue] = useState('')\n  const [name, setName] = useState('')\n\n  const uppy = new Uppy({\n    restrictions: { maxNumberOfFiles: 1 },\n    autoProceed: true\n  })\n\n  const getTableData = (arr, name) => {\n    setTableData(arr)\n    setName(name)\n  }\n\n  uppy.on('complete', result => {\n    const reader = new FileReader()\n    reader.onload = function () {\n      const fileData = reader.result\n      const wb = XLSX.read(fileData, { type: 'binary' })\n\n      wb.SheetNames.forEach(function (sheetName) {\n        const rowObj = XLSX.utils.sheet_to_row_object_array(wb.Sheets[sheetName])\n        getTableData(rowObj, result.successful[0].data.name)\n      })\n    }\n    if (result.successful[0].extension === 'xlsx') {\n      reader.readAsBinaryString(result.successful[0].data)\n    } else {\n      toast.error(<ErrorToast />, { hideProgressBar: true })\n    }\n  })\n\n  const handleFilter = e => {\n    const data = tableData\n    let filteredData = []\n    const value = e.target.value\n    setValue(value)\n\n    if (value.length) {\n      filteredData = data.filter(col => {\n        const keys = Object.keys(col)\n\n        const startsWithCondition = keys.filter(key => {\n          return col[key].toString().toLowerCase().startsWith(value.toLowerCase())\n        })\n\n        const includesCondition = keys.filter(key => col[key].toString().toLowerCase().includes(value.toLowerCase()))\n\n        if (startsWithCondition.length) return col[startsWithCondition]\n        else if (!startsWithCondition && includesCondition.length) return col[includesCondition]\n        else return null\n      })\n      setFilteredData(filteredData)\n      setValue(value)\n    } else {\n      return null\n    }\n  }\n  /*eslint-disable */\n  const headArr = tableData.length\n    ? tableData.map((col, index) => {\n        if (index === 0) return [...Object.keys(col)]\n        else return null\n      })\n    : []\n  /*eslint-enable */\n  const dataArr = value.length ? filteredData : tableData.length && !value.length ? tableData : null\n\n  const renderTableBody = () => {\n    if (dataArr !== null && dataArr.length) {\n      return dataArr.map((col, index) => {\n        const keys = Object.keys(col)\n        const renderTd = keys.map((key, index) => <td key={index}>{col[key]}</td>)\n        return <tr key={index}>{renderTd}</tr>\n      })\n    } else {\n      return null\n    }\n  }\n\n  const renderTableHead = () => {\n    if (headArr.length) {\n      return headArr[0].map((head, index) => {\n        return <th key={index}>{head}</th>\n      })\n    } else {\n      return null\n    }\n  }\n\n  return (\n    <Fragment>\n      <ExtensionsHeader\n        title='XLSX'\n        subTitle='Xlsx is a parser and writer for various spreadsheet formats'\n        link='https://github.com/AdeleD/react-paginate'\n      />\n      <Row className='import-component'>\n        <Col sm='12'>\n          <Card>\n            <CardBody>\n              <Row>\n                <Col sm='12'>\n                  <DragDrop uppy={uppy} />\n                </Col>\n              </Row>\n            </CardBody>\n          </Card>\n        </Col>\n        {tableData.length ? (\n          <Col sm='12'>\n            <Card>\n              <CardHeader className='justify-content-between flex-wrap'>\n                <CardTitle tag='h4'>{name}</CardTitle>\n                <div className='d-flex align-items-center justify-content-end'>\n                  <Label for='search-input' className='mr-1'>\n                    Search\n                  </Label>\n                  <Input id='search-input' type='text' bsSize='sm' value={value} onChange={e => handleFilter(e)} />\n                </div>\n              </CardHeader>\n              <Table className='table-hover-animation' responsive>\n                <thead>\n                  <tr>{renderTableHead()}</tr>\n                </thead>\n                <tbody>{renderTableBody()}</tbody>\n              </Table>\n            </Card>\n          </Col>\n        ) : null}\n      </Row>\n    </Fragment>\n  )\n}\n\nexport default Import\n","// ** React Imports\nimport Proptypes from 'prop-types'\nimport { Row, Col } from 'reactstrap'\n\nconst ExtensionsHeader = props => {\n  return (\n    <Row className='mb-2'>\n      <Col sm='12' className='ml-50'>\n        <p className='font-medium-5 mt-1 extension-title' data-tour='extension-title'>\n          {props.title}\n        </p>\n        {props.link ? (\n          <a href={props.link} target='_blank' rel='noopener noreferrer'>\n            {props.subTitle}\n          </a>\n        ) : (\n          <p className='text-primary'>{props.subTitle}</p>\n        )}\n      </Col>\n    </Row>\n  )\n}\nexport default ExtensionsHeader\n\n// ** PropTypes\nExtensionsHeader.propTypes = {\n  title: Proptypes.string,\n  subTitle: Proptypes.string,\n  link: Proptypes.string\n}\n"],"sourceRoot":""}