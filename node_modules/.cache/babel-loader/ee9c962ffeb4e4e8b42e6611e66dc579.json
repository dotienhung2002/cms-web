{"ast":null,"code":"import _slicedToArray from \"/Users/abc/Downloads/Workspace/projectFPT/cms-fusamate/cms-fusamate/cms-fusamte/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\n//** React Imports\nimport { useState } from 'react'; // ** Configs\n\nimport themeConfig from '@Configs/themeConfig';\nexport var useNavbarColor = function useNavbarColor() {\n  _s();\n\n  // ** State\n  var _useState = useState(function () {\n    try {\n      return themeConfig.layout.navbar.backgroundColor;\n    } catch (error) {\n      // ** If error return initialValue\n      console.log(error);\n      return themeConfig.layout.navbar.backgroundColor;\n    }\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      navbarColor = _useState2[0],\n      setNavbarColor = _useState2[1]; // ** Return a wrapped version of useState's setter function\n\n\n  var setValue = function setValue(value) {\n    try {\n      // ** Allow value to be a function so we have same API as useState\n      var valueToStore = value instanceof Function ? value(navbarColor) : value; // ** Set state\n\n      setNavbarColor(valueToStore);\n    } catch (error) {\n      // ** A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [navbarColor, setValue];\n};\n\n_s(useNavbarColor, \"T3WAAVzrwhGJ+Y0Le15DE4MB100=\");","map":{"version":3,"sources":["/Users/abc/Downloads/Workspace/projectFPT/cms-fusamate/cms-fusamate/cms-fusamte/src/utility/hooks/useNavbarColor.js"],"names":["useState","themeConfig","useNavbarColor","layout","navbar","backgroundColor","error","console","log","navbarColor","setNavbarColor","setValue","value","valueToStore","Function"],"mappings":";;;;AAAA;AACA,SAASA,QAAT,QAAyB,OAAzB,C,CAEA;;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AAEA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAAA;;AAClC;AADkC,kBAEIF,QAAQ,CAAC,YAAM;AACnD,QAAI;AACF,aAAOC,WAAW,CAACE,MAAZ,CAAmBC,MAAnB,CAA0BC,eAAjC;AACD,KAFD,CAEE,OAAOC,KAAP,EAAc;AACd;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,aAAOL,WAAW,CAACE,MAAZ,CAAmBC,MAAnB,CAA0BC,eAAjC;AACD;AACF,GAR6C,CAFZ;AAAA;AAAA,MAE3BI,WAF2B;AAAA,MAEdC,cAFc,kBAYlC;;;AACA,MAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAAC,KAAK,EAAI;AACxB,QAAI;AACF;AACA,UAAMC,YAAY,GAAGD,KAAK,YAAYE,QAAjB,GAA4BF,KAAK,CAACH,WAAD,CAAjC,GAAiDG,KAAtE,CAFE,CAIF;;AACAF,MAAAA,cAAc,CAACG,YAAD,CAAd;AACD,KAND,CAME,OAAOP,KAAP,EAAc;AACd;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,GAXD;;AAaA,SAAO,CAACG,WAAD,EAAcE,QAAd,CAAP;AACD,CA3BM;;GAAMT,c","sourcesContent":["//** React Imports\nimport { useState } from 'react'\n\n// ** Configs\nimport themeConfig from '@Configs/themeConfig'\n\nexport const useNavbarColor = () => {\n  // ** State\n  const [navbarColor, setNavbarColor] = useState(() => {\n    try {\n      return themeConfig.layout.navbar.backgroundColor\n    } catch (error) {\n      // ** If error return initialValue\n      console.log(error)\n      return themeConfig.layout.navbar.backgroundColor\n    }\n  })\n\n  // ** Return a wrapped version of useState's setter function\n  const setValue = value => {\n    try {\n      // ** Allow value to be a function so we have same API as useState\n      const valueToStore = value instanceof Function ? value(navbarColor) : value\n\n      // ** Set state\n      setNavbarColor(valueToStore)\n    } catch (error) {\n      // ** A more advanced implementation would handle the error case\n      console.log(error)\n    }\n  }\n\n  return [navbarColor, setValue]\n}\n"]},"metadata":{},"sourceType":"module"}