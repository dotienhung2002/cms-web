{"ast":null,"code":"import _regeneratorRuntime from \"/Users/abc/Downloads/Workspace/projectFPT/cms-fusamate/cms-fusamate/cms-fusamte/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/abc/Downloads/Workspace/projectFPT/cms-fusamate/cms-fusamate/cms-fusamte/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _defineProperty from \"/Users/abc/Downloads/Workspace/projectFPT/cms-fusamate/cms-fusamate/cms-fusamte/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _toConsumableArray from \"/Users/abc/Downloads/Workspace/projectFPT/cms-fusamate/cms-fusamate/cms-fusamte/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\n/* eslint-disable @typescript-eslint/ban-ts-comment */\nimport { transformToNestObject } from 'react-hook-form';\n/**\n * From 0.32.0, Yup add TypeScript support and `path` typing is optional that's why we have `@ts-expect-error`\n * FYI: `path`: a string, indicating where there error was thrown. `path` is empty at the root level.\n * react-hook-form's values are object so path is defined\n * https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\n */\nvar parseErrorSchema = function parseErrorSchema(error, validateAllFieldCriteria) {\n  return Array.isArray(error.inner) && error.inner.length ? error.inner.reduce(function (previous, _ref) {\n    var path = _ref.path,\n      message = _ref.message,\n      type = _ref.type;\n    // @ts-expect-error\n    var previousTypes = previous[path] && previous[path].types || {};\n    var key = path || type;\n    return Object.assign(Object.assign({}, previous), key ? _defineProperty({}, key, Object.assign(Object.assign({}, previous[key] || {\n      message: message,\n      type: type\n    }), validateAllFieldCriteria ? {\n      types: Object.assign(Object.assign({}, previousTypes), _defineProperty({}, type, previousTypes[type] ? // @ts-expect-error\n      [].concat(_toConsumableArray([].concat(previousTypes[type])), [message]) : message))\n    } : {})) : {});\n  }, {}) : _defineProperty({}, error.path, {\n    message: error.message,\n    type: error.type\n  });\n};\nexport var yupResolver = function yupResolver(schema) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    abortEarly: false\n  };\n  return /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(values, context) {\n      var validateAllFieldCriteria,\n        parsedErrors,\n        _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              validateAllFieldCriteria = _args.length > 2 && _args[2] !== undefined ? _args[2] : false;\n              _context.prev = 1;\n              if (options.context && process.env.NODE_ENV === 'development') {\n                // eslint-disable-next-line no-console\n                console.warn(\"You should not used the yup options context. Please, use the 'useForm' context object instead\");\n              }\n              _context.next = 5;\n              return schema.validate(values, Object.assign(Object.assign({}, options), {\n                context: context\n              }));\n            case 5:\n              _context.t0 = _context.sent;\n              _context.t1 = {};\n              return _context.abrupt(\"return\", {\n                values: _context.t0,\n                errors: _context.t1\n              });\n            case 10:\n              _context.prev = 10;\n              _context.t2 = _context[\"catch\"](1);\n              parsedErrors = parseErrorSchema(_context.t2, validateAllFieldCriteria);\n              return _context.abrupt(\"return\", {\n                values: {},\n                errors: transformToNestObject(parsedErrors)\n              });\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 10]]);\n    }));\n    return function (_x, _x2) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"mappings":";;;;AAAA;AACA,SAAmBA,qBAAqB,QAAqB,iBAAiB;AAG9E;;;;;;AAMA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAgB,CACpBC,KAA0B,EAC1BC,wBAAiC,EAC/B;EACF,OAAOC,KAAK,CAACC,OAAO,CAACH,KAAK,CAACI,KAAK,CAAC,IAAIJ,KAAK,CAACI,KAAK,CAACC,MAAM,GACnDL,KAAK,CAACI,KAAK,CAACE,MAAM,CAChB,UAACC,QAA6B,QAA6B;IAAA,IAAzBC,IAAI,QAAJA,IAAI;MAAEC,OAAO,QAAPA,OAAO;MAAEC,IAAI,QAAJA,IAAI;IACnD;IACA,IAAMC,aAAa,GAAIJ,QAAQ,CAACC,IAAI,CAAC,IAAID,QAAQ,CAACC,IAAI,CAAC,CAACI,KAAK,IAAK,EAAE;IACpE,IAAMC,GAAG,GAAGL,IAAI,IAAIE,IAAI;IAExB,uCACKH,QAAQ,GACPM,GAAG,uBAEAA,GAAG,EAACC,gCACCP,QAAQ,CAACM,GAAG,CAAC,IAAI;MACnBJ,OAAO,EAAPA,OAAO;MACPC,IAAI,EAAJA;KACD,CAAC,EACET,wBAAwB,GACxB;MACEW,KAAK,kCACAD,aAAa,uBAEfD,IAAI,EAAGC,aAAa,CAACD,IAAI,CAAC,GACvB;MAAA,6BACI,EAAE,CAACK,MAAM,CAACJ,aAAa,CAACD,IAAI,CAAC,CAAC,IAAED,OAAO,KAC3CA,OAAO;KAEd,GACD,EAAE,CACP,IAEH,EAAE,CAAC;EAEX,CAAC,EACD,EAAE,CACH,uBAGET,KAAK,CAACQ,IAAI,EAAG;IAAEC,OAAO,EAAET,KAAK,CAACS,OAAO;IAAEC,IAAI,EAAEV,KAAK,CAACU;EAAI,CAAE,CAC3D;AACP,CAAC;AAMD,OAAO,IAAMM,WAAW,GAAG,SAAdA,WAAW,CACtBC,MAA2B;EAAA,IAC3BC,8EAAgD;IAC9CC,UAAU,EAAE;GACb;EAAA;IAAA,uEAC0B,iBAC3BC,MAAM,EACNC,OAAO;MAAA;QAAA;QAAA;MAAA;QAAA;UAAA;YAAA;cACPpB,wBAAwB,2DAAG,KAAK;cAAA;cAG9B,IAAIiB,OAAO,CAACG,OAAO,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,EAAE;gBAC7D;gBACAC,OAAO,CAACC,IAAI,CACV,+FAA+F,CAChG;;cACF;cAAA,OAEeT,MAAM,CAACU,QAAQ,CAACP,MAAM,kCAC/BF,OAAO;gBACVG,OAAO,EAAPA;cAAO,GACP;YAAA;cAAA;cAAA,cACM,EAAE;cAAA;gBAJVD,MAAM;gBAINQ,MAAM;cAAA;YAAA;cAAA;cAAA;cAGFC,YAAY,GAAG9B,gBAAgB,cAAIE,wBAAwB,CAAC;cAAA,iCAC3D;gBACLmB,MAAM,EAAE,EAAE;gBACVQ,MAAM,EAAE9B,qBAAqB,CAAC+B,YAAY;eAC3C;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAEJ;IAAA;MAAA;IAAA;EAAA;AAAA","names":["transformToNestObject","parseErrorSchema","error","validateAllFieldCriteria","Array","isArray","inner","length","reduce","previous","path","message","type","previousTypes","types","key","Object","concat","yupResolver","schema","options","abortEarly","values","context","process","env","NODE_ENV","console","warn","validate","errors","parsedErrors"],"sourceRoot":"","sources":["../src/yup.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}