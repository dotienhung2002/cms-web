{"ast":null,"code":"var _jsxFileName = \"/Users/abc/Downloads/Workspace/projectFPT/cms-fusamate/cms-fusamate/cms-fusamte/src/router/Router.tsx\",\n    _s2 = $RefreshSig$();\n\n// ** React Imports\nimport { Suspense, useContext, lazy, useEffect } from \"react\"; // ** Utils\n\nimport { isUserLoggedIn } from \"@Utils\";\nimport { useLayout } from \"@Hooks/useLayout\";\nimport { handleLogin } from \"@Store/actions/auth\";\nimport { AbilityContext } from \"@src/utility/context/Can\";\nimport { useRouterTransition } from \"@Hooks/useRouterTransition\"; // ** Custom Components\n// import Spinner from '@Components/spinner/Loading-spinner' // Uncomment if your require content fallback\n\nimport LayoutWrapper from \"@Layouts/components/layout-wrapper\"; // ** Router Components\n\nimport { BrowserRouter as AppRouter, Route, Switch, Redirect } from \"react-router-dom\"; // ** Routes & Default Routes\n\nimport { DefaultRoute, Routes } from \"./routes\"; // ** Layouts\n\nimport BlankLayout from \"@Layouts/BlankLayout\";\nimport VerticalLayout from \"@src/layouts/VerticalLayout\";\nimport { useDispatch } from \"react-redux\"; // import HorizontalLayout from '@src/layouts/HorizontalLayout'\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Router = () => {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  // ** Hooks\n  const [layout, setLayout] = useLayout();\n  const dispatch = useDispatch();\n  const [transition, setTransition] = useRouterTransition(); // ** ACL Ability Context\n\n  const ability = useContext(AbilityContext); // ** Default Layout\n\n  const DefaultLayout = \"VerticalLayout\"; // ** All of the available layouts\n\n  const Layouts = {\n    VerticalLayout,\n    BlankLayout\n  }; // ** Current Active Item\n\n  const currentActiveItem = null; // ** Return Filtered Array of Routes & Paths\n\n  const LayoutRoutesAndPaths = layout => {\n    const LayoutRoutes = [];\n    const LayoutPaths = [];\n\n    if (Routes) {\n      Routes.filter(route => {\n        // ** Checks if Route layout or Default layout matches current layout\n        if (route.layout === layout || route.layout === undefined && DefaultLayout === layout) {\n          LayoutRoutes.push(route);\n          LayoutPaths.push(route.path);\n        }\n      });\n    }\n\n    return {\n      LayoutRoutes,\n      LayoutPaths\n    };\n  };\n\n  const NotAuthorized = /*#__PURE__*/lazy(() => import(\"@Views/pages/misc/NotAuthorized\")); // ** Init Error Component\n\n  const Error = /*#__PURE__*/lazy(() => import(\"@Views/pages/misc/Error\"));\n  /**\n   ** Final Route Component Checks for Login & User Role and then redirects to the route\n   */\n\n  const FinalRoute = props => {\n    _s();\n\n    const dispatch = useDispatch();\n    const route = props.route;\n    let action, resource; // console.log(ability, resource)\n    // ** Assign vars based on route meta\n\n    if (route.meta) {\n      action = route.meta.action ? route.meta.action : null;\n      resource = route.meta.resource ? route.meta.resource : null;\n    }\n\n    if (!isUserLoggedIn() && route.meta === undefined || !isUserLoggedIn() && route.meta && !route.meta.authRoute && !route.meta.publicRoute) {\n      /**\n       ** If user is not Logged in & route meta is undefined\n       ** OR\n       ** If user is not Logged in & route.meta.authRoute, !route.meta.publicRoute are undefined\n       ** Then redirect user to login\n       */\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: \"/cms/login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 14\n      }, this);\n    } else if (route.meta && route.meta.authRoute && isUserLoggedIn()) {\n      // ** If route has meta and authRole and user is Logged in then redirect user to home page (DefaultRoute)\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: \"/\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 14\n      }, this);\n    } // else if (isUserLoggedIn() && !ability.can(action || 'read', resource)) {\n    //   // ** If user is Logged in and doesn't have ability to visit the page redirect the user to Not Authorized\n    //   return <Redirect to='/misc/not-authorized' />\n    // }\n    else {\n        // ** If none of the above render component\n        return /*#__PURE__*/_jsxDEV(route.component, { ...props\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 14\n        }, this);\n      }\n  }; // ** Return Route to Render\n\n\n  _s(FinalRoute, \"rgTLoBID190wEKCp9+G8W6F7A5M=\", false, function () {\n    return [useDispatch];\n  });\n\n  const ResolveRoutes = () => {\n    return Object.keys(Layouts).map((layout, index) => {\n      // ** Convert Layout parameter to Layout Component\n      // ? Note: make sure to keep layout and component name equal\n      const LayoutTag = Layouts[layout]; // ** Get Routes and Paths of the Layout\n\n      const {\n        LayoutRoutes,\n        LayoutPaths\n      } = LayoutRoutesAndPaths(layout); // ** We have freedom to display different layout for different route\n      // ** We have made LayoutTag dynamic based on layout, we can also replace it with the only layout component,\n      // ** that we want to implement like VerticalLayout or HorizontalLayout\n      // ** We segregated all the routes based on the layouts and Resolved all those routes inside layouts\n      // ** RouterProps to pass them to Layouts\n\n      const routerProps = {};\n      return /*#__PURE__*/_jsxDEV(Route, {\n        path: LayoutPaths,\n        children: /*#__PURE__*/_jsxDEV(LayoutTag, {\n          routerProps: routerProps,\n          layout: layout,\n          setLayout: setLayout,\n          transition: transition,\n          setTransition: setTransition,\n          currentActiveItem: currentActiveItem,\n          children: /*#__PURE__*/_jsxDEV(Switch, {\n            children: LayoutRoutes.map(route => {\n              return /*#__PURE__*/_jsxDEV(Route, {\n                path: route.path,\n                exact: route.exact === true,\n                render: props => {\n                  // ** Assign props to routerProps\n                  Object.assign(routerProps, { ...props,\n                    meta: route.meta\n                  });\n                  return /*#__PURE__*/_jsxDEV(Suspense, {\n                    fallback: null,\n                    children: /*#__PURE__*/_jsxDEV(LayoutWrapper, {\n                      layout: DefaultLayout,\n                      transition: transition,\n                      setTransition: setTransition\n                      /* Conditional props */\n\n                      /*eslint-disable */\n                      ,\n                      ...(route.appLayout ? {\n                        appLayout: route.appLayout\n                      } : {}),\n                      ...(route.meta ? {\n                        routeMeta: route.meta\n                      } : {}),\n                      ...(route.className ? {\n                        wrapperClass: route.className\n                      } : {}),\n                      children: /*#__PURE__*/_jsxDEV(FinalRoute, {\n                        route: route,\n                        ...props\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 192,\n                        columnNumber: 29\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 169,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 167,\n                    columnNumber: 25\n                  }, this);\n                }\n              }, route.path, false, {\n                fileName: _jsxFileName,\n                lineNumber: 155,\n                columnNumber: 19\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this);\n    });\n  };\n\n  useEffect(() => {\n    localStorage.getItem(\"userData\") && dispatch(handleLogin(JSON.parse(localStorage.getItem(\"userData\") || \"{}\")));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AppRouter, {\n    basename: process.env.REACT_APP_BASENAME,\n    children: /*#__PURE__*/_jsxDEV(Switch, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/\",\n        render: () => {\n          return isUserLoggedIn() ? /*#__PURE__*/_jsxDEV(Redirect, {\n            to: DefaultRoute\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(Redirect, {\n            to: \"/cms/login\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 15\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/misc/not-authorized\",\n        render: props => /*#__PURE__*/_jsxDEV(Layouts.BlankLayout, {\n          children: /*#__PURE__*/_jsxDEV(NotAuthorized, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this), ResolveRoutes(), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"*\",\n        component: Error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 213,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(Router, \"vLjAuqacRU8FUbYplyytJHcJjrE=\", false, function () {\n  return [useLayout, useDispatch, useRouterTransition];\n});\n\n_c = Router;\nexport default Router;\n\nvar _c;\n\n$RefreshReg$(_c, \"Router\");","map":{"version":3,"sources":["/Users/abc/Downloads/Workspace/projectFPT/cms-fusamate/cms-fusamate/cms-fusamte/src/router/Router.tsx"],"names":["Suspense","useContext","lazy","useEffect","isUserLoggedIn","useLayout","handleLogin","AbilityContext","useRouterTransition","LayoutWrapper","BrowserRouter","AppRouter","Route","Switch","Redirect","DefaultRoute","Routes","BlankLayout","VerticalLayout","useDispatch","Router","layout","setLayout","dispatch","transition","setTransition","ability","DefaultLayout","Layouts","currentActiveItem","LayoutRoutesAndPaths","LayoutRoutes","LayoutPaths","filter","route","undefined","push","path","NotAuthorized","Error","FinalRoute","props","action","resource","meta","authRoute","publicRoute","ResolveRoutes","Object","keys","map","index","LayoutTag","routerProps","exact","assign","appLayout","routeMeta","className","wrapperClass","localStorage","getItem","JSON","parse","process","env","REACT_APP_BASENAME"],"mappings":"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","sourcesContent":["// ** React Imports\nimport { Suspense, useContext, lazy, useEffect } from \"react\";\n\n// ** Utils\nimport { isUserLoggedIn } from \"@Utils\";\nimport { useLayout } from \"@Hooks/useLayout\";\nimport { handleLogin } from \"@Store/actions/auth\";\n\nimport { AbilityContext } from \"@src/utility/context/Can\";\nimport { useRouterTransition } from \"@Hooks/useRouterTransition\";\n\n// ** Custom Components\n// import Spinner from '@Components/spinner/Loading-spinner' // Uncomment if your require content fallback\nimport LayoutWrapper from \"@Layouts/components/layout-wrapper\";\n\n// ** Router Components\nimport {\n  BrowserRouter as AppRouter,\n  Route,\n  Switch,\n  Redirect,\n} from \"react-router-dom\";\n\n// ** Routes & Default Routes\nimport { DefaultRoute, Routes } from \"./routes\";\n\n// ** Layouts\nimport BlankLayout from \"@Layouts/BlankLayout\";\nimport VerticalLayout from \"@src/layouts/VerticalLayout\";\nimport { useDispatch } from \"react-redux\";\n// import HorizontalLayout from '@src/layouts/HorizontalLayout'\n\nconst Router = () => {\n  // ** Hooks\n  const [layout, setLayout] = useLayout();\n  const dispatch = useDispatch();\n\n  const [transition, setTransition] = useRouterTransition();\n\n  // ** ACL Ability Context\n  const ability = useContext(AbilityContext);\n\n  // ** Default Layout\n  const DefaultLayout = \"VerticalLayout\";\n\n  // ** All of the available layouts\n  const Layouts = { VerticalLayout, BlankLayout };\n\n  // ** Current Active Item\n  const currentActiveItem = null;\n\n  // ** Return Filtered Array of Routes & Paths\n  const LayoutRoutesAndPaths = (layout) => {\n    const LayoutRoutes = [];\n    const LayoutPaths = [];\n\n    if (Routes) {\n      Routes.filter((route) => {\n        // ** Checks if Route layout or Default layout matches current layout\n        if (\n          route.layout === layout ||\n          (route.layout === undefined && DefaultLayout === layout)\n        ) {\n          LayoutRoutes.push(route);\n          LayoutPaths.push(route.path);\n        }\n      });\n    }\n\n    return { LayoutRoutes, LayoutPaths };\n  };\n\n  const NotAuthorized = lazy(() => import(\"@Views/pages/misc/NotAuthorized\"));\n\n  // ** Init Error Component\n  const Error = lazy(() => import(\"@Views/pages/misc/Error\"));\n\n  /**\n   ** Final Route Component Checks for Login & User Role and then redirects to the route\n   */\n  const FinalRoute = (props) => {\n    const dispatch = useDispatch();\n\n    const route = props.route;\n    let action, resource;\n    // console.log(ability, resource)\n    // ** Assign vars based on route meta\n    if (route.meta) {\n      action = route.meta.action ? route.meta.action : null;\n      resource = route.meta.resource ? route.meta.resource : null;\n    }\n\n    if (\n      (!isUserLoggedIn() && route.meta === undefined) ||\n      (!isUserLoggedIn() &&\n        route.meta &&\n        !route.meta.authRoute &&\n        !route.meta.publicRoute)\n    ) {\n      /**\n       ** If user is not Logged in & route meta is undefined\n       ** OR\n       ** If user is not Logged in & route.meta.authRoute, !route.meta.publicRoute are undefined\n       ** Then redirect user to login\n       */\n\n      return <Redirect to=\"/cms/login\" />;\n    } else if (route.meta && route.meta.authRoute && isUserLoggedIn()) {\n      // ** If route has meta and authRole and user is Logged in then redirect user to home page (DefaultRoute)\n\n      return <Redirect to=\"/\" />;\n    }\n    // else if (isUserLoggedIn() && !ability.can(action || 'read', resource)) {\n    //   // ** If user is Logged in and doesn't have ability to visit the page redirect the user to Not Authorized\n    //   return <Redirect to='/misc/not-authorized' />\n    // }\n    else {\n      // ** If none of the above render component\n      return <route.component {...props} />;\n    }\n  };\n\n  // ** Return Route to Render\n  const ResolveRoutes = () => {\n    return Object.keys(Layouts).map((layout, index) => {\n      // ** Convert Layout parameter to Layout Component\n      // ? Note: make sure to keep layout and component name equal\n\n      const LayoutTag = Layouts[layout];\n\n      // ** Get Routes and Paths of the Layout\n      const { LayoutRoutes, LayoutPaths } = LayoutRoutesAndPaths(layout);\n\n      // ** We have freedom to display different layout for different route\n      // ** We have made LayoutTag dynamic based on layout, we can also replace it with the only layout component,\n      // ** that we want to implement like VerticalLayout or HorizontalLayout\n      // ** We segregated all the routes based on the layouts and Resolved all those routes inside layouts\n\n      // ** RouterProps to pass them to Layouts\n      const routerProps = {};\n\n      return (\n        <Route path={LayoutPaths} key={index}>\n          <LayoutTag\n            routerProps={routerProps}\n            layout={layout}\n            setLayout={setLayout}\n            transition={transition}\n            setTransition={setTransition}\n            currentActiveItem={currentActiveItem}\n          >\n            <Switch>\n              {LayoutRoutes.map((route) => {\n                return (\n                  <Route\n                    key={route.path}\n                    path={route.path}\n                    exact={route.exact === true}\n                    render={(props) => {\n                      // ** Assign props to routerProps\n                      Object.assign(routerProps, {\n                        ...props,\n                        meta: route.meta,\n                      });\n\n                      return (\n                        <Suspense fallback={null}>\n                          {/* Layout Wrapper to add classes based on route's layout, appLayout and className */}\n                          <LayoutWrapper\n                            layout={DefaultLayout}\n                            transition={transition}\n                            setTransition={setTransition}\n                            /* Conditional props */\n                            /*eslint-disable */\n                            {...(route.appLayout\n                              ? {\n                                  appLayout: route.appLayout,\n                                }\n                              : {})}\n                            {...(route.meta\n                              ? {\n                                  routeMeta: route.meta,\n                                }\n                              : {})}\n                            {...(route.className\n                              ? {\n                                  wrapperClass: route.className,\n                                }\n                              : {})}\n                            /*eslint-enable */\n                          >\n                            <FinalRoute route={route} {...props} />\n                          </LayoutWrapper>\n                        </Suspense>\n                      );\n                    }}\n                  />\n                );\n              })}\n            </Switch>\n          </LayoutTag>\n        </Route>\n      );\n    });\n  };\n  useEffect(() => {\n    localStorage.getItem(\"userData\")  &&\n      dispatch(\n        handleLogin(JSON.parse(localStorage.getItem(\"userData\") || \"{}\"))\n      );\n  }, []);\n  return (\n    <AppRouter basename={process.env.REACT_APP_BASENAME}>\n      <Switch>\n        {/* If user is logged in Redirect user to DefaultRoute else to login */}\n        <Route\n          exact\n          path=\"/\"\n          render={() => {\n            return isUserLoggedIn() ? (\n              <Redirect to={DefaultRoute} />\n            ) : (\n              <Redirect to=\"/cms/login\" />\n            );\n          }}\n        />\n        {/* Not Auth Route */}\n        <Route\n          exact\n          path=\"/misc/not-authorized\"\n          render={(props) => (\n            <Layouts.BlankLayout>\n              <NotAuthorized />\n            </Layouts.BlankLayout>\n          )}\n        />\n        {ResolveRoutes()}\n\n        {/* NotFound Error page */}\n        <Route path=\"*\" component={Error} />\n      </Switch>\n    </AppRouter>\n  );\n};\n\nexport default Router;\n"]},"metadata":{},"sourceType":"module"}