{"ast":null,"code":"import _toConsumableArray from \"/Users/abc/Downloads/Workspace/projectFPT/cms-fusamate/cms-fusamate/cms-fusamte/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"/Users/abc/Downloads/Workspace/projectFPT/cms-fusamate/cms-fusamate/cms-fusamte/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nvar _s = $RefreshSig$();\n//** React Imports\nimport { useState, useEffect } from 'react';\n\n// ** Configs\nimport themeConfig from '@Configs/themeConfig';\nexport var useSkin = function useSkin() {\n  _s();\n  // ** State\n  var _useState = useState(function () {\n      try {\n        // ** Get from local storage by key\n        var item = window.localStorage.getItem('skin');\n        // ** Parse stored json or if none return initialValue\n        return item ? JSON.parse(item) : themeConfig.layout.skin;\n      } catch (error) {\n        // ** If error also return initialValue\n        console.log(error);\n        return themeConfig.layout.skin;\n      }\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    skin = _useState2[0],\n    setSkin = _useState2[1];\n\n  // ** Return a wrapped version of useState's setter function\n  var setValue = function setValue(value) {\n    try {\n      // ** Allow value to be a function so we have same API as useState\n      var valueToStore = value instanceof Function ? value(skin) : value;\n      // ** Set state\n      setSkin(valueToStore);\n      // ** Save to local storage\n      window.localStorage.setItem('skin', JSON.stringify(valueToStore));\n    } catch (error) {\n      // ** A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n  useEffect(function () {\n    var _element$classList;\n    // ** Get Body Tag\n    var element = window.document.body;\n\n    // ** Define classnames for skins\n    var classNames = {\n      dark: 'dark-layout',\n      bordered: 'bordered-layout',\n      'semi-dark': 'semi-dark-layout'\n    };\n\n    // ** Remove all classes from Body on mount\n    (_element$classList = element.classList).remove.apply(_element$classList, _toConsumableArray(element.classList));\n\n    // ** If skin is not light add skin class\n    if (skin !== 'light') {\n      element.classList.add(classNames[skin]);\n    }\n  }, [skin]);\n  return [skin, setValue];\n};\n_s(useSkin, \"oH+qNgKY8VzOgD9FgTbU25QI1UQ=\");","map":{"version":3,"names":["useState","useEffect","themeConfig","useSkin","item","window","localStorage","getItem","JSON","parse","layout","skin","error","console","log","setSkin","setValue","value","valueToStore","Function","setItem","stringify","element","document","body","classNames","dark","bordered","classList","remove","add"],"sources":["/Users/abc/Downloads/Workspace/projectFPT/cms-fusamate/cms-fusamate/cms-fusamte/src/utility/hooks/useSkin.js"],"sourcesContent":["//** React Imports\nimport { useState, useEffect } from 'react'\n\n// ** Configs\nimport themeConfig from '@Configs/themeConfig'\n\nexport const useSkin = () => {\n  // ** State\n  const [skin, setSkin] = useState(() => {\n    try {\n      // ** Get from local storage by key\n      const item = window.localStorage.getItem('skin')\n      // ** Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : themeConfig.layout.skin\n    } catch (error) {\n      // ** If error also return initialValue\n      console.log(error)\n      return themeConfig.layout.skin\n    }\n  })\n\n  // ** Return a wrapped version of useState's setter function\n  const setValue = value => {\n    try {\n      // ** Allow value to be a function so we have same API as useState\n      const valueToStore = value instanceof Function ? value(skin) : value\n      // ** Set state\n      setSkin(valueToStore)\n      // ** Save to local storage\n      window.localStorage.setItem('skin', JSON.stringify(valueToStore))\n    } catch (error) {\n      // ** A more advanced implementation would handle the error case\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    // ** Get Body Tag\n    const element = window.document.body\n\n    // ** Define classnames for skins\n    const classNames = {\n      dark: 'dark-layout',\n      bordered: 'bordered-layout',\n      'semi-dark': 'semi-dark-layout'\n    }\n\n    // ** Remove all classes from Body on mount\n    element.classList.remove(...element.classList)\n\n    // ** If skin is not light add skin class\n    if (skin !== 'light') {\n      element.classList.add(classNames[skin])\n    }\n  }, [skin])\n\n  return [skin, setValue]\n}\n"],"mappings":";;;AAAA;AACA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAE3C;AACA,OAAOC,WAAW,MAAM,sBAAsB;AAE9C,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAO,GAAS;EAAA;EAC3B;EACA,gBAAwBH,QAAQ,CAAC,YAAM;MACrC,IAAI;QACF;QACA,IAAMI,IAAI,GAAGC,MAAM,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;QAChD;QACA,OAAOH,IAAI,GAAGI,IAAI,CAACC,KAAK,CAACL,IAAI,CAAC,GAAGF,WAAW,CAACQ,MAAM,CAACC,IAAI;MAC1D,CAAC,CAAC,OAAOC,KAAK,EAAE;QACd;QACAC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;QAClB,OAAOV,WAAW,CAACQ,MAAM,CAACC,IAAI;MAChC;IACF,CAAC,CAAC;IAAA;IAXKA,IAAI;IAAEI,OAAO;;EAapB;EACA,IAAMC,QAAQ,GAAG,SAAXA,QAAQ,CAAGC,KAAK,EAAI;IACxB,IAAI;MACF;MACA,IAAMC,YAAY,GAAGD,KAAK,YAAYE,QAAQ,GAAGF,KAAK,CAACN,IAAI,CAAC,GAAGM,KAAK;MACpE;MACAF,OAAO,CAACG,YAAY,CAAC;MACrB;MACAb,MAAM,CAACC,YAAY,CAACc,OAAO,CAAC,MAAM,EAAEZ,IAAI,CAACa,SAAS,CAACH,YAAY,CAAC,CAAC;IACnE,CAAC,CAAC,OAAON,KAAK,EAAE;MACd;MACAC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IACpB;EACF,CAAC;EAEDX,SAAS,CAAC,YAAM;IAAA;IACd;IACA,IAAMqB,OAAO,GAAGjB,MAAM,CAACkB,QAAQ,CAACC,IAAI;;IAEpC;IACA,IAAMC,UAAU,GAAG;MACjBC,IAAI,EAAE,aAAa;MACnBC,QAAQ,EAAE,iBAAiB;MAC3B,WAAW,EAAE;IACf,CAAC;;IAED;IACA,sBAAAL,OAAO,CAACM,SAAS,EAACC,MAAM,8CAAIP,OAAO,CAACM,SAAS,EAAC;;IAE9C;IACA,IAAIjB,IAAI,KAAK,OAAO,EAAE;MACpBW,OAAO,CAACM,SAAS,CAACE,GAAG,CAACL,UAAU,CAACd,IAAI,CAAC,CAAC;IACzC;EACF,CAAC,EAAE,CAACA,IAAI,CAAC,CAAC;EAEV,OAAO,CAACA,IAAI,EAAEK,QAAQ,CAAC;AACzB,CAAC;AAAA,GAnDYb,OAAO"},"metadata":{},"sourceType":"module"}