{"ast":null,"code":"import _objectSpread from\"/Users/abc/Downloads/Workspace/projectFPT/cms-fusamate/cms-fusamate/cms-fusamte/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import mock from'../mock';import jwt from'jsonwebtoken';var data={users:[{id:1,fullName:'John Doe',username:'johndoe',password:'admin',avatar:require('@Assets/images/portrait/small/avatar-s-11.jpg').default,email:'admin@demo.com',role:'admin',ability:[{action:'manage',subject:'all'}],extras:{eCommerceCartItemsCount:5}},{id:2,fullName:'Jane Doe',username:'janedoe',password:'client',avatar:require('@Assets/images/avatars/1-small.png').default,email:'client@demo.com',role:'client',ability:[{action:'read',subject:'ACL'},{action:'read',subject:'Auth'}],extras:{eCommerceCartItemsCount:5}}]};// ! These two secrets shall be in .env file and not in any other file\nvar jwtConfig={secret:'dd5f3089-40c3-403d-af14-d0c228b05cb4',refreshTokenSecret:'7c4c1c50-3230-45bf-9eae-c9b2e401c767',expireTime:'10m',refreshTokenExpireTime:'10m'};mock.onPost('/jwt/login').reply(function(request){var _JSON$parse=JSON.parse(request.data),email=_JSON$parse.email,password=_JSON$parse.password;var error={email:['Something went wrong']};var user=data.users.find(function(u){return u.email===email&&u.password===password;});if(user){try{var accessToken=jwt.sign({id:user.id},jwtConfig.secret,{expiresIn:jwtConfig.expireTime});var refreshToken=jwt.sign({id:user.id},jwtConfig.refreshTokenSecret,{expiresIn:jwtConfig.refreshTokenExpireTime});var userData=_objectSpread({},user);delete userData.password;var response={userData:userData,accessToken:accessToken,refreshToken:refreshToken};return[200,response];}catch(e){error=e;}}else{error={email:['Email or Password is Invalid']};}return[400,{error:error}];});// mock.onPost('/jwt/register').reply(request => {\n//   if (request.data.length > 0) {\n//     const { email, password, username } = JSON.parse(request.data)\n//     const isEmailAlreadyInUse = data.users.find(user => user.email === email)\n//     const isUsernameAlreadyInUse = data.users.find(user => user.username === username)\n//     const error = {\n//       email: isEmailAlreadyInUse ? 'This email is already in use.' : null,\n//       username: isUsernameAlreadyInUse ? 'This username is already in use.' : null\n//     }\n//     if (!error.username && !error.email) {\n//       const userData = {\n//         email,\n//         password,\n//         username,\n//         fullName: '',\n//         avatar: null,\n//         role: 'admin',\n//         ability: [\n//           {\n//             action: 'manage',\n//             subject: 'all'\n//           }\n//         ]\n//       }\n//       // Add user id\n//       const length = data.users.length\n//       let lastIndex = 0\n//       if (length) {\n//         lastIndex = data.users[length - 1].id\n//       }\n//       userData.id = lastIndex + 1\n//       data.users.push(userData)\n//       const accessToken = jwt.sign({ id: userData.id }, jwtConfig.secret, { expiresIn: jwtConfig.expireTime })\n//       const user = Object.assign({}, userData)\n//       delete user['password']\n//       const response = { user, accessToken }\n//       return [200, response]\n//     } else {\n//       return [200, { error }]\n//     }\n//   }\n// })\n// mock.onPost('/jwt/refresh-token').reply(request => {\n//   const { refreshToken } = JSON.parse(request.data)\n//   try {\n//     const { id } = jwt.verify(refreshToken, jwtConfig.refreshTokenSecret)\n//     const userData = { ...data.users.find(user => user.id === id) }\n//     const newAccessToken = jwt.sign({ id: userData.id }, jwtConfig.secret, { expiresIn: jwtConfig.expiresIn })\n//     const newRefreshToken = jwt.sign({ id: userData.id }, jwtConfig.refreshTokenSecret, {\n//       expiresIn: jwtConfig.refreshTokenExpireTime\n//     })\n//     delete userData.password\n//     const response = {\n//       userData,\n//       accessToken: newAccessToken,\n//       refreshToken: newRefreshToken\n//     }\n//     return [200, response]\n//   } catch (e) {\n//     const error = 'Invalid refresh token'\n//     return [401, { error }]\n//   }\n// })","map":{"version":3,"names":["mock","jwt","data","users","id","fullName","username","password","avatar","require","default","email","role","ability","action","subject","extras","eCommerceCartItemsCount","jwtConfig","secret","refreshTokenSecret","expireTime","refreshTokenExpireTime","onPost","reply","request","JSON","parse","error","user","find","u","accessToken","sign","expiresIn","refreshToken","userData","response","e"],"sources":["/Users/abc/Downloads/Workspace/projectFPT/cms-fusamate/cms-fusamate/cms-fusamte/src/@fake-db/jwt/index.js"],"sourcesContent":["import mock from '../mock'\nimport jwt from 'jsonwebtoken'\n\nconst data = {\n  users: [\n    {\n      id: 1,\n      fullName: 'John Doe',\n      username: 'johndoe',\n      password: 'admin',\n      avatar: require('@Assets/images/portrait/small/avatar-s-11.jpg').default,\n      email: 'admin@demo.com',\n      role: 'admin',\n      ability: [\n        {\n          action: 'manage',\n          subject: 'all'\n        }\n      ],\n      extras: {\n        eCommerceCartItemsCount: 5\n      }\n    },\n    {\n      id: 2,\n      fullName: 'Jane Doe',\n      username: 'janedoe',\n      password: 'client',\n      avatar: require('@Assets/images/avatars/1-small.png').default,\n      email: 'client@demo.com',\n      role: 'client',\n      ability: [\n        {\n          action: 'read',\n          subject: 'ACL'\n        },\n        {\n          action: 'read',\n          subject: 'Auth'\n        }\n      ],\n      extras: {\n        eCommerceCartItemsCount: 5\n      }\n    }\n  ]\n}\n\n// ! These two secrets shall be in .env file and not in any other file\nconst jwtConfig = {\n  secret: 'dd5f3089-40c3-403d-af14-d0c228b05cb4',\n  refreshTokenSecret: '7c4c1c50-3230-45bf-9eae-c9b2e401c767',\n  expireTime: '10m',\n  refreshTokenExpireTime: '10m'\n}\n\nmock.onPost('/jwt/login').reply(request => {\n  const { email, password } = JSON.parse(request.data)\n\n  let error = {\n    email: ['Something went wrong']\n  }\n\n  const user = data.users.find(u => u.email === email && u.password === password)\n\n  if (user) {\n    try {\n      const accessToken = jwt.sign({ id: user.id }, jwtConfig.secret, { expiresIn: jwtConfig.expireTime })\n      const refreshToken = jwt.sign({ id: user.id }, jwtConfig.refreshTokenSecret, {\n        expiresIn: jwtConfig.refreshTokenExpireTime\n      })\n\n      const userData = { ...user }\n\n      delete userData.password\n\n      const response = {\n        userData,\n        accessToken,\n        refreshToken\n      }\n\n      return [200, response]\n    } catch (e) {\n      error = e\n    }\n  } else {\n    error = {\n      email: ['Email or Password is Invalid']\n    }\n  }\n\n  return [400, { error }]\n})\n\n// mock.onPost('/jwt/register').reply(request => {\n//   if (request.data.length > 0) {\n//     const { email, password, username } = JSON.parse(request.data)\n//     const isEmailAlreadyInUse = data.users.find(user => user.email === email)\n//     const isUsernameAlreadyInUse = data.users.find(user => user.username === username)\n//     const error = {\n//       email: isEmailAlreadyInUse ? 'This email is already in use.' : null,\n//       username: isUsernameAlreadyInUse ? 'This username is already in use.' : null\n//     }\n\n//     if (!error.username && !error.email) {\n//       const userData = {\n//         email,\n//         password,\n//         username,\n//         fullName: '',\n//         avatar: null,\n//         role: 'admin',\n//         ability: [\n//           {\n//             action: 'manage',\n//             subject: 'all'\n//           }\n//         ]\n//       }\n\n//       // Add user id\n//       const length = data.users.length\n//       let lastIndex = 0\n//       if (length) {\n//         lastIndex = data.users[length - 1].id\n//       }\n//       userData.id = lastIndex + 1\n\n//       data.users.push(userData)\n\n//       const accessToken = jwt.sign({ id: userData.id }, jwtConfig.secret, { expiresIn: jwtConfig.expireTime })\n\n//       const user = Object.assign({}, userData)\n//       delete user['password']\n//       const response = { user, accessToken }\n\n//       return [200, response]\n//     } else {\n//       return [200, { error }]\n//     }\n//   }\n// })\n\n// mock.onPost('/jwt/refresh-token').reply(request => {\n//   const { refreshToken } = JSON.parse(request.data)\n\n//   try {\n//     const { id } = jwt.verify(refreshToken, jwtConfig.refreshTokenSecret)\n\n//     const userData = { ...data.users.find(user => user.id === id) }\n\n//     const newAccessToken = jwt.sign({ id: userData.id }, jwtConfig.secret, { expiresIn: jwtConfig.expiresIn })\n//     const newRefreshToken = jwt.sign({ id: userData.id }, jwtConfig.refreshTokenSecret, {\n//       expiresIn: jwtConfig.refreshTokenExpireTime\n//     })\n\n//     delete userData.password\n//     const response = {\n//       userData,\n//       accessToken: newAccessToken,\n//       refreshToken: newRefreshToken\n//     }\n\n//     return [200, response]\n//   } catch (e) {\n//     const error = 'Invalid refresh token'\n//     return [401, { error }]\n//   }\n// })\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}