{"ast":null,"code":"import _objectSpread from \"/Users/abc/Downloads/Workspace/projectFPT/cms-websitebangiay/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport mock from '../mock';\nimport jwt from 'jsonwebtoken';\nvar data = {\n  users: [{\n    id: 1,\n    fullName: 'John Doe',\n    username: 'johndoe',\n    password: 'admin',\n    avatar: require('@Assets/images/portrait/small/avatar-s-11.jpg').default,\n    email: 'admin@demo.com',\n    role: 'admin',\n    ability: [{\n      action: 'manage',\n      subject: 'all'\n    }],\n    extras: {\n      eCommerceCartItemsCount: 5\n    }\n  }, {\n    id: 2,\n    fullName: 'Jane Doe',\n    username: 'janedoe',\n    password: 'client',\n    avatar: require('@Assets/images/avatars/1-small.png').default,\n    email: 'client@demo.com',\n    role: 'client',\n    ability: [{\n      action: 'read',\n      subject: 'ACL'\n    }, {\n      action: 'read',\n      subject: 'Auth'\n    }],\n    extras: {\n      eCommerceCartItemsCount: 5\n    }\n  }]\n};\n\n// ! These two secrets shall be in .env file and not in any other file\nvar jwtConfig = {\n  secret: 'dd5f3089-40c3-403d-af14-d0c228b05cb4',\n  refreshTokenSecret: '7c4c1c50-3230-45bf-9eae-c9b2e401c767',\n  expireTime: '10m',\n  refreshTokenExpireTime: '10m'\n};\nmock.onPost('/jwt/login').reply(function (request) {\n  var _JSON$parse = JSON.parse(request.data),\n    email = _JSON$parse.email,\n    password = _JSON$parse.password;\n  var error = {\n    email: ['Something went wrong']\n  };\n  var user = data.users.find(function (u) {\n    return u.email === email && u.password === password;\n  });\n  if (user) {\n    try {\n      var accessToken = jwt.sign({\n        id: user.id\n      }, jwtConfig.secret, {\n        expiresIn: jwtConfig.expireTime\n      });\n      var refreshToken = jwt.sign({\n        id: user.id\n      }, jwtConfig.refreshTokenSecret, {\n        expiresIn: jwtConfig.refreshTokenExpireTime\n      });\n      var userData = _objectSpread({}, user);\n      delete userData.password;\n      var response = {\n        userData: userData,\n        accessToken: accessToken,\n        refreshToken: refreshToken\n      };\n      return [200, response];\n    } catch (e) {\n      error = e;\n    }\n  } else {\n    error = {\n      email: ['Email or Password is Invalid']\n    };\n  }\n  return [400, {\n    error: error\n  }];\n});\n\n// mock.onPost('/jwt/register').reply(request => {\n//   if (request.data.length > 0) {\n//     const { email, password, username } = JSON.parse(request.data)\n//     const isEmailAlreadyInUse = data.users.find(user => user.email === email)\n//     const isUsernameAlreadyInUse = data.users.find(user => user.username === username)\n//     const error = {\n//       email: isEmailAlreadyInUse ? 'This email is already in use.' : null,\n//       username: isUsernameAlreadyInUse ? 'This username is already in use.' : null\n//     }\n\n//     if (!error.username && !error.email) {\n//       const userData = {\n//         email,\n//         password,\n//         username,\n//         fullName: '',\n//         avatar: null,\n//         role: 'admin',\n//         ability: [\n//           {\n//             action: 'manage',\n//             subject: 'all'\n//           }\n//         ]\n//       }\n\n//       // Add user id\n//       const length = data.users.length\n//       let lastIndex = 0\n//       if (length) {\n//         lastIndex = data.users[length - 1].id\n//       }\n//       userData.id = lastIndex + 1\n\n//       data.users.push(userData)\n\n//       const accessToken = jwt.sign({ id: userData.id }, jwtConfig.secret, { expiresIn: jwtConfig.expireTime })\n\n//       const user = Object.assign({}, userData)\n//       delete user['password']\n//       const response = { user, accessToken }\n\n//       return [200, response]\n//     } else {\n//       return [200, { error }]\n//     }\n//   }\n// })\n\n// mock.onPost('/jwt/refresh-token').reply(request => {\n//   const { refreshToken } = JSON.parse(request.data)\n\n//   try {\n//     const { id } = jwt.verify(refreshToken, jwtConfig.refreshTokenSecret)\n\n//     const userData = { ...data.users.find(user => user.id === id) }\n\n//     const newAccessToken = jwt.sign({ id: userData.id }, jwtConfig.secret, { expiresIn: jwtConfig.expiresIn })\n//     const newRefreshToken = jwt.sign({ id: userData.id }, jwtConfig.refreshTokenSecret, {\n//       expiresIn: jwtConfig.refreshTokenExpireTime\n//     })\n\n//     delete userData.password\n//     const response = {\n//       userData,\n//       accessToken: newAccessToken,\n//       refreshToken: newRefreshToken\n//     }\n\n//     return [200, response]\n//   } catch (e) {\n//     const error = 'Invalid refresh token'\n//     return [401, { error }]\n//   }\n// })","map":{"version":3,"names":["mock","jwt","data","users","id","fullName","username","password","avatar","require","default","email","role","ability","action","subject","extras","eCommerceCartItemsCount","jwtConfig","secret","refreshTokenSecret","expireTime","refreshTokenExpireTime","onPost","reply","request","JSON","parse","error","user","find","u","accessToken","sign","expiresIn","refreshToken","userData","response","e"],"sources":["/Users/abc/Downloads/Workspace/projectFPT/cms-websitebangiay/src/@fake-db/jwt/index.js"],"sourcesContent":["import mock from '../mock'\nimport jwt from 'jsonwebtoken'\n\nconst data = {\n  users: [\n    {\n      id: 1,\n      fullName: 'John Doe',\n      username: 'johndoe',\n      password: 'admin',\n      avatar: require('@Assets/images/portrait/small/avatar-s-11.jpg').default,\n      email: 'admin@demo.com',\n      role: 'admin',\n      ability: [\n        {\n          action: 'manage',\n          subject: 'all'\n        }\n      ],\n      extras: {\n        eCommerceCartItemsCount: 5\n      }\n    },\n    {\n      id: 2,\n      fullName: 'Jane Doe',\n      username: 'janedoe',\n      password: 'client',\n      avatar: require('@Assets/images/avatars/1-small.png').default,\n      email: 'client@demo.com',\n      role: 'client',\n      ability: [\n        {\n          action: 'read',\n          subject: 'ACL'\n        },\n        {\n          action: 'read',\n          subject: 'Auth'\n        }\n      ],\n      extras: {\n        eCommerceCartItemsCount: 5\n      }\n    }\n  ]\n}\n\n// ! These two secrets shall be in .env file and not in any other file\nconst jwtConfig = {\n  secret: 'dd5f3089-40c3-403d-af14-d0c228b05cb4',\n  refreshTokenSecret: '7c4c1c50-3230-45bf-9eae-c9b2e401c767',\n  expireTime: '10m',\n  refreshTokenExpireTime: '10m'\n}\n\nmock.onPost('/jwt/login').reply(request => {\n  const { email, password } = JSON.parse(request.data)\n\n  let error = {\n    email: ['Something went wrong']\n  }\n\n  const user = data.users.find(u => u.email === email && u.password === password)\n\n  if (user) {\n    try {\n      const accessToken = jwt.sign({ id: user.id }, jwtConfig.secret, { expiresIn: jwtConfig.expireTime })\n      const refreshToken = jwt.sign({ id: user.id }, jwtConfig.refreshTokenSecret, {\n        expiresIn: jwtConfig.refreshTokenExpireTime\n      })\n\n      const userData = { ...user }\n\n      delete userData.password\n\n      const response = {\n        userData,\n        accessToken,\n        refreshToken\n      }\n\n      return [200, response]\n    } catch (e) {\n      error = e\n    }\n  } else {\n    error = {\n      email: ['Email or Password is Invalid']\n    }\n  }\n\n  return [400, { error }]\n})\n\n// mock.onPost('/jwt/register').reply(request => {\n//   if (request.data.length > 0) {\n//     const { email, password, username } = JSON.parse(request.data)\n//     const isEmailAlreadyInUse = data.users.find(user => user.email === email)\n//     const isUsernameAlreadyInUse = data.users.find(user => user.username === username)\n//     const error = {\n//       email: isEmailAlreadyInUse ? 'This email is already in use.' : null,\n//       username: isUsernameAlreadyInUse ? 'This username is already in use.' : null\n//     }\n\n//     if (!error.username && !error.email) {\n//       const userData = {\n//         email,\n//         password,\n//         username,\n//         fullName: '',\n//         avatar: null,\n//         role: 'admin',\n//         ability: [\n//           {\n//             action: 'manage',\n//             subject: 'all'\n//           }\n//         ]\n//       }\n\n//       // Add user id\n//       const length = data.users.length\n//       let lastIndex = 0\n//       if (length) {\n//         lastIndex = data.users[length - 1].id\n//       }\n//       userData.id = lastIndex + 1\n\n//       data.users.push(userData)\n\n//       const accessToken = jwt.sign({ id: userData.id }, jwtConfig.secret, { expiresIn: jwtConfig.expireTime })\n\n//       const user = Object.assign({}, userData)\n//       delete user['password']\n//       const response = { user, accessToken }\n\n//       return [200, response]\n//     } else {\n//       return [200, { error }]\n//     }\n//   }\n// })\n\n// mock.onPost('/jwt/refresh-token').reply(request => {\n//   const { refreshToken } = JSON.parse(request.data)\n\n//   try {\n//     const { id } = jwt.verify(refreshToken, jwtConfig.refreshTokenSecret)\n\n//     const userData = { ...data.users.find(user => user.id === id) }\n\n//     const newAccessToken = jwt.sign({ id: userData.id }, jwtConfig.secret, { expiresIn: jwtConfig.expiresIn })\n//     const newRefreshToken = jwt.sign({ id: userData.id }, jwtConfig.refreshTokenSecret, {\n//       expiresIn: jwtConfig.refreshTokenExpireTime\n//     })\n\n//     delete userData.password\n//     const response = {\n//       userData,\n//       accessToken: newAccessToken,\n//       refreshToken: newRefreshToken\n//     }\n\n//     return [200, response]\n//   } catch (e) {\n//     const error = 'Invalid refresh token'\n//     return [401, { error }]\n//   }\n// })\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}