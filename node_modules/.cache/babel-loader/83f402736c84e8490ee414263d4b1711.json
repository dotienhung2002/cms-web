{"ast":null,"code":"var _s = $RefreshSig$();\n//** React Imports\nimport { useEffect } from 'react';\nexport var useOnClickOutside = function useOnClickOutside(ref, handler) {\n  _s();\n  useEffect(function () {\n    var listener = function listener(event) {\n      // ** Do nothing if clicking ref's element or descendent elements\n      if (!ref.current || ref.current.contains(event.target)) {\n        return;\n      }\n\n      // ** Call passed function on click outside\n      handler(event);\n    };\n    document.addEventListener('mousedown', listener);\n    document.addEventListener('touchstart', listener);\n    return function () {\n      document.removeEventListener('mousedown', listener);\n      document.removeEventListener('touchstart', listener);\n    };\n  },\n  // ** Add ref and handler to effect dependencies\n  // ** It's worth noting that because passed in handler is a new ...\n  // ** ... function on every render that will cause this effect ...\n  // ** ... callback/cleanup to run every render. It's not a big deal ...\n  // ** ... but to optimize you can wrap handler in useCallback before ...\n  // ** ... passing it into this hook.\n  [ref, handler]);\n};\n_s(useOnClickOutside, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");","map":{"version":3,"names":["useEffect","useOnClickOutside","ref","handler","listener","event","current","contains","target","document","addEventListener","removeEventListener"],"sources":["/Users/abc/Downloads/Workspace/projectFPT/cms-fusamate/cms-fusamate/cms-fusamte/src/utility/hooks/useOnClickOutside.js"],"sourcesContent":["//** React Imports\nimport { useEffect } from 'react'\n\nexport const useOnClickOutside = (ref, handler) => {\n  useEffect(\n    () => {\n      const listener = event => {\n        // ** Do nothing if clicking ref's element or descendent elements\n        if (!ref.current || ref.current.contains(event.target)) {\n          return\n        }\n\n        // ** Call passed function on click outside\n        handler(event)\n      }\n\n      document.addEventListener('mousedown', listener)\n      document.addEventListener('touchstart', listener)\n\n      return () => {\n        document.removeEventListener('mousedown', listener)\n        document.removeEventListener('touchstart', listener)\n      }\n    },\n    // ** Add ref and handler to effect dependencies\n    // ** It's worth noting that because passed in handler is a new ...\n    // ** ... function on every render that will cause this effect ...\n    // ** ... callback/cleanup to run every render. It's not a big deal ...\n    // ** ... but to optimize you can wrap handler in useCallback before ...\n    // ** ... passing it into this hook.\n    [ref, handler]\n  )\n}\n"],"mappings":";AAAA;AACA,SAASA,SAAS,QAAQ,OAAO;AAEjC,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAiB,CAAIC,GAAG,EAAEC,OAAO,EAAK;EAAA;EACjDH,SAAS,CACP,YAAM;IACJ,IAAMI,QAAQ,GAAG,SAAXA,QAAQ,CAAGC,KAAK,EAAI;MACxB;MACA,IAAI,CAACH,GAAG,CAACI,OAAO,IAAIJ,GAAG,CAACI,OAAO,CAACC,QAAQ,CAACF,KAAK,CAACG,MAAM,CAAC,EAAE;QACtD;MACF;;MAEA;MACAL,OAAO,CAACE,KAAK,CAAC;IAChB,CAAC;IAEDI,QAAQ,CAACC,gBAAgB,CAAC,WAAW,EAAEN,QAAQ,CAAC;IAChDK,QAAQ,CAACC,gBAAgB,CAAC,YAAY,EAAEN,QAAQ,CAAC;IAEjD,OAAO,YAAM;MACXK,QAAQ,CAACE,mBAAmB,CAAC,WAAW,EAAEP,QAAQ,CAAC;MACnDK,QAAQ,CAACE,mBAAmB,CAAC,YAAY,EAAEP,QAAQ,CAAC;IACtD,CAAC;EACH,CAAC;EACD;EACA;EACA;EACA;EACA;EACA;EACA,CAACF,GAAG,EAAEC,OAAO,CAAC,CACf;AACH,CAAC;AAAA,GA7BYF,iBAAiB"},"metadata":{},"sourceType":"module"}