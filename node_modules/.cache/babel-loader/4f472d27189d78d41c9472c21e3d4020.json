{"ast":null,"code":"import { createFactory as t, $eq as r, $ne as i, $lt as n, $lte as e, $gt as u, $gte as o, $in as a, $nin as s, $all as f, $size as c, $regex as h, $options as v, $elemMatch as l, $exists as d, eq as b, ne as y, lt as p, lte as w, gt as g, gte as E, within as A, nin as $, all as m, size as j, regex as M, elemMatch as x, exists as F, and as O } from \"@ucast/mongo2js\";\nfunction P(t, r) {\n  for (var i = 0; i < r.length; i++) {\n    var n = r[i];\n    n.enumerable = n.enumerable || false;\n    n.configurable = true;\n    if (\"value\" in n) n.writable = true;\n    Object.defineProperty(t, n.key, n);\n  }\n}\nfunction R(t, r, i) {\n  if (r) P(t.prototype, r);\n  if (i) P(t, i);\n  return t;\n}\nfunction _() {\n  _ = Object.assign || function (t) {\n    for (var r = 1; r < arguments.length; r++) {\n      var i = arguments[r];\n      for (var n in i) {\n        if (Object.prototype.hasOwnProperty.call(i, n)) t[n] = i[n];\n      }\n    }\n    return t;\n  };\n  return _.apply(this, arguments);\n}\nfunction B(t, r) {\n  t.prototype = Object.create(r.prototype);\n  t.prototype.constructor = t;\n  t.__proto__ = r;\n}\nfunction T(t) {\n  if (void 0 === t) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  return t;\n}\nfunction k(t) {\n  return Array.isArray(t) ? t : [t];\n}\nvar q = \"__caslSubjectType__\";\nfunction z(t, r) {\n  if (r) if (!r.hasOwnProperty(q)) Object.defineProperty(r, q, {\n    value: t\n  });else if (t !== r[q]) throw new Error(\"Trying to cast object to subject type \" + t + \" but previously it was casted to \" + r[q]);\n  return r;\n}\nvar C = function t(r) {\n  var i = typeof r;\n  return \"string\" === i || \"function\" === i;\n};\nvar S = function t(r) {\n  return r.modelName || r.name;\n};\nvar Y = function t(r) {\n  return \"string\" === typeof r ? r : S(r);\n};\nfunction L(t) {\n  if (!t) return \"all\";\n  if (t.hasOwnProperty(q)) return t[q];\n  return S(t.constructor);\n}\nfunction D(t, r) {\n  var i = k(r);\n  var n = 0;\n  while (n < i.length) {\n    var e = i[n++];\n    if (t.hasOwnProperty(e)) i = i.concat(t[e]);\n  }\n  return i;\n}\nfunction G(t) {\n  if (t.manage) throw new Error('Cannot add alias for \"manage\" action because it is reserved');\n  Object.keys(t).forEach(function (r) {\n    var i = r === t[r] || Array.isArray(t[r]) && (-1 !== t[r].indexOf(r) || -1 !== t[r].indexOf(\"manage\"));\n    if (i) throw new Error(\"Attempt to alias action to itself: \" + r + \" -> \" + t[r]);\n  });\n}\nfunction H(t) {\n  if (\"production\" !== process.env.NODE_ENV) G(t);\n  return function (r) {\n    return D(t, r);\n  };\n}\nfunction I(t, r, i) {\n  for (var n = i; n < r.length; n++) {\n    t.push(r[n]);\n  }\n}\nfunction J(t, r) {\n  if (!t || !t.length) return r || [];\n  if (!r || !r.length) return t || [];\n  var i = 0;\n  var n = 0;\n  var e = [];\n  while (i < t.length && n < r.length) {\n    if (t[i].priority < r[n].priority) {\n      e.push(t[i]);\n      i++;\n    } else {\n      e.push(r[n]);\n      n++;\n    }\n  }\n  I(e, t, i);\n  I(e, r, n);\n  return e;\n}\nfunction K(t, r, i) {\n  var n = t.get(r);\n  if (!n) {\n    n = i();\n    t.set(r, n);\n  }\n  return n;\n}\nvar N = function t(r) {\n  return r;\n};\nfunction Q(t, r) {\n  if (Array.isArray(t.fields) && !t.fields.length) throw new Error(\"`rawRule.fields` cannot be an empty array. https://bit.ly/390miLa\");\n  if (t.fields && !r.fieldMatcher) throw new Error('You need to pass \"fieldMatcher\" option in order to restrict access by fields');\n  if (t.conditions && !r.conditionsMatcher) throw new Error('You need to pass \"conditionsMatcher\" option in order to restrict access by conditions');\n}\nvar U = function () {\n  function t(t, r, i) {\n    if (void 0 === i) i = 0;\n    Q(t, r);\n    this.action = r.resolveAction(t.action);\n    this.subject = t.subject;\n    this.inverted = !!t.inverted;\n    this.conditions = t.conditions;\n    this.reason = t.reason;\n    this.fields = t.fields ? k(t.fields) : void 0;\n    this.priority = i;\n    this.t = r;\n  }\n  var r = t.prototype;\n  r.i = function t() {\n    if (this.conditions && !this.u) this.u = this.t.conditionsMatcher(this.conditions);\n    return this.u;\n  };\n  r.matchesConditions = function t(r) {\n    if (!this.conditions) return true;\n    if (!r || C(r)) return !this.inverted;\n    var i = this.i();\n    return i(r);\n  };\n  r.matchesField = function t(r) {\n    if (!this.fields) return true;\n    if (!r) return !this.inverted;\n    if (this.fields && !this.o) this.o = this.t.fieldMatcher(this.fields);\n    return this.o(r);\n  };\n  R(t, [{\n    key: \"ast\",\n    get: function t() {\n      var r = this.i();\n      return r ? r.ast : void 0;\n    }\n  }]);\n  return t;\n}();\nvar V = function t(r, i) {\n  var n = {\n    value: r,\n    prev: i,\n    next: null\n  };\n  if (i) i.next = n;\n  return n;\n};\nvar W = function t(r) {\n  if (r.next) r.next.prev = r.prev;\n  if (r.prev) r.prev.next = r.next;\n  r.next = r.prev = null;\n};\nvar X = function t() {\n  return {\n    rules: [],\n    merged: false\n  };\n};\nvar Z = function t() {\n  return new Map();\n};\nvar tt = function t(r, i) {\n  if (!r.h && i.fields) r.h = true;\n};\nvar rt = function () {\n  function t(t, r) {\n    if (void 0 === t) t = [];\n    if (void 0 === r) r = {};\n    this.h = false;\n    this.v = new Map();\n    this.l = {\n      conditionsMatcher: r.conditionsMatcher,\n      fieldMatcher: r.fieldMatcher,\n      resolveAction: r.resolveAction || N\n    };\n    this.p = r.detectSubjectType || L;\n    this.g = t;\n    this.A = this.$(t);\n  }\n  var r = t.prototype;\n  r.detectSubjectType = function t(r) {\n    return C(r) ? r : this.p(r);\n  };\n  r.update = function t(r) {\n    var i = {\n      rules: r,\n      ability: this,\n      target: this\n    };\n    this.m(\"update\", i);\n    this.g = r;\n    this.A = this.$(r);\n    this.m(\"updated\", i);\n    return this;\n  };\n  r.$ = function t(r) {\n    var i = new Map();\n    for (var n = r.length - 1; n >= 0; n--) {\n      var e = r.length - n - 1;\n      var u = new U(r[n], this.l, e);\n      var o = k(u.action);\n      var a = k(u.subject || \"all\");\n      tt(this, u);\n      for (var s = 0; s < a.length; s++) {\n        var f = K(i, a[s], Z);\n        for (var c = 0; c < o.length; c++) {\n          K(f, o[c], X).rules.push(u);\n        }\n      }\n    }\n    return i;\n  };\n  r.possibleRulesFor = function t(r, i) {\n    if (void 0 === i) i = \"all\";\n    if (!C(i)) throw new Error('\"possibleRulesFor\" accepts only subject types (i.e., string or class) as the 2nd parameter');\n    var n = K(this.A, i, Z);\n    var e = K(n, r, X);\n    if (e.merged) return e.rules;\n    var u = \"manage\" !== r && n.has(\"manage\") ? n.get(\"manage\").rules : void 0;\n    var o = J(e.rules, u);\n    if (\"all\" !== i) o = J(o, this.possibleRulesFor(r, \"all\"));\n    e.rules = o;\n    e.merged = true;\n    return o;\n  };\n  r.rulesFor = function t(r, i, n) {\n    var e = this.possibleRulesFor(r, i);\n    if (n && \"string\" !== typeof n) throw new Error(\"The 3rd, `field` parameter is expected to be a string. See https://stalniy.github.io/casl/en/api/casl-ability#can-of-pure-ability for details\");\n    if (!this.h) return e;\n    return e.filter(function (t) {\n      return t.matchesField(n);\n    });\n  };\n  r.on = function t(r, i) {\n    var n = this;\n    var e = this.v.get(r) || null;\n    var u = V(i, e);\n    this.v.set(r, u);\n    return function () {\n      if (!u.next && !u.prev && n.v.get(r) === u) n.v.delete(r);else W(u);\n    };\n  };\n  r.m = function t(r, i) {\n    var n = this.v.get(r) || null;\n    while (null !== n) {\n      var e = n.prev;\n      n.value(i);\n      n = e;\n    }\n  };\n  R(t, [{\n    key: \"rules\",\n    get: function t() {\n      return this.g;\n    }\n  }]);\n  return t;\n}();\nvar it = function (t) {\n  B(PureAbility, t);\n  function PureAbility() {\n    return t.apply(this, arguments) || this;\n  }\n  var r = PureAbility.prototype;\n  r.can = function t() {\n    var r = this.relevantRuleFor.apply(this, arguments);\n    return !!r && !r.inverted;\n  };\n  r.relevantRuleFor = function t(r, i, n) {\n    var e = this.detectSubjectType(i);\n    var u = this.rulesFor(r, e, n);\n    for (var o = 0, a = u.length; o < a; o++) {\n      if (u[o].matchesConditions(i)) return u[o];\n    }\n    return null;\n  };\n  r.cannot = function t() {\n    return !this.can.apply(this, arguments);\n  };\n  return PureAbility;\n}(rt);\nvar nt = {\n  $eq: r,\n  $ne: i,\n  $lt: n,\n  $lte: e,\n  $gt: u,\n  $gte: o,\n  $in: a,\n  $nin: s,\n  $all: f,\n  $size: c,\n  $regex: h,\n  $options: v,\n  $elemMatch: l,\n  $exists: d\n};\nvar et = {\n  eq: b,\n  ne: y,\n  lt: p,\n  lte: w,\n  gt: g,\n  gte: E,\n  in: A,\n  nin: $,\n  all: m,\n  size: j,\n  regex: M,\n  elemMatch: x,\n  exists: F,\n  and: O\n};\nvar ut = function r(i, n, e) {\n  return t(_({}, nt, i), _({}, et, n), e);\n};\nvar ot = t(nt, et);\nvar at = /[-/\\\\^$+?.()|[\\]{}]/g;\nvar st = /\\.?\\*+\\.?/g;\nvar ft = /\\*+/;\nvar ct = /\\./g;\nfunction ht(t, r, i) {\n  var n = \"*\" === i[0] || \".\" === t[0] && \".\" === t[t.length - 1] ? \"+\" : \"*\";\n  var e = -1 === t.indexOf(\"**\") ? \"[^.]\" : \".\";\n  var u = t.replace(ct, \"\\\\$&\").replace(ft, e + n);\n  return r + t.length === i.length ? \"(?:\" + u + \")?\" : u;\n}\nfunction vt(t, r, i) {\n  if (\".\" === t && (\"*\" === i[r - 1] || \"*\" === i[r + 1])) return t;\n  return \"\\\\\" + t;\n}\nfunction lt(t) {\n  var r = t.map(function (t) {\n    return t.replace(at, vt).replace(st, ht);\n  });\n  var i = r.length > 1 ? \"(?:\" + r.join(\"|\") + \")\" : r[0];\n  return new RegExp(\"^\" + i + \"$\");\n}\nvar dt = function t(r) {\n  var i;\n  return function (t) {\n    if (\"undefined\" === typeof i) i = r.every(function (t) {\n      return -1 === t.indexOf(\"*\");\n    }) ? null : lt(r);\n    return null === i ? -1 !== r.indexOf(t) : i.test(t);\n  };\n};\nvar bt = function (t) {\n  B(Ability, t);\n  function Ability(r, i) {\n    if (void 0 === r) r = [];\n    if (void 0 === i) i = {};\n    return t.call(this, r, _({\n      conditionsMatcher: ot,\n      fieldMatcher: dt\n    }, i)) || this;\n  }\n  return Ability;\n}(it);\nvar yt = function () {\n  function t(t) {\n    this.j = t;\n  }\n  var r = t.prototype;\n  r.because = function t(r) {\n    this.j.reason = r;\n    return this;\n  };\n  return t;\n}();\nvar pt = function () {\n  function AbilityBuilder(t) {\n    this.rules = [];\n    this.M = t;\n    this.can = this.can.bind(this);\n    this.cannot = this.cannot.bind(this);\n    this.build = this.build.bind(this);\n  }\n  var t = AbilityBuilder.prototype;\n  t.can = function t(r, i, n, e) {\n    var u = {\n      action: r\n    };\n    if (i) {\n      u.subject = i;\n      if (Array.isArray(n) || \"string\" === typeof n) u.fields = n;else if (\"undefined\" !== typeof n) u.conditions = n;\n      if (\"undefined\" !== typeof e) u.conditions = e;\n    }\n    this.rules.push(u);\n    return new yt(u);\n  };\n  t.cannot = function t(r, i, n, e) {\n    var u = this.can(r, i, n, e);\n    u.j.inverted = true;\n    return u;\n  };\n  t.build = function t(r) {\n    return new this.M(this.rules, r);\n  };\n  return AbilityBuilder;\n}();\nfunction defineAbility(t, r) {\n  var i = new pt(bt);\n  var n = t(i.can, i.cannot);\n  if (n && \"function\" === typeof n.then) return n.then(function () {\n    return i.build(r);\n  });\n  return i.build(r);\n}\nvar wt = function t(r) {\n  return 'Cannot execute \"' + r.action + '\" on \"' + r.subjectType + '\"';\n};\nvar gt = function t(r) {\n  this.message = r;\n};\ngt.prototype = Object.create(Error.prototype);\nvar Et = function (t) {\n  B(ForbiddenError, t);\n  ForbiddenError.setDefaultMessage = function t(r) {\n    this.F = \"string\" === typeof r ? function () {\n      return r;\n    } : r;\n  };\n  ForbiddenError.from = function t(r) {\n    return new this(r);\n  };\n  function ForbiddenError(r) {\n    var i;\n    i = t.call(this, \"\") || this;\n    i.ability = r;\n    if (\"function\" === typeof Error.captureStackTrace) {\n      i.name = \"ForbiddenError\";\n      Error.captureStackTrace(T(i), i.constructor);\n    }\n    return i;\n  }\n  var r = ForbiddenError.prototype;\n  r.setMessage = function t(r) {\n    this.message = r;\n    return this;\n  };\n  r.throwUnlessCan = function t() {\n    var r;\n    var i = (r = this.ability).relevantRuleFor.apply(r, arguments);\n    if (i && !i.inverted) return;\n    this.action = arguments.length <= 0 ? void 0 : arguments[0];\n    this.subject = arguments.length <= 1 ? void 0 : arguments[1];\n    this.subjectType = Y(this.ability.detectSubjectType(arguments.length <= 1 ? void 0 : arguments[1]));\n    this.field = arguments.length <= 2 ? void 0 : arguments[2];\n    var n = i ? i.reason : \"\";\n    this.message = this.message || n || this.constructor.F(this);\n    throw this;\n  };\n  return ForbiddenError;\n}(gt);\nEt.F = wt;\nexport { bt as Ability, pt as AbilityBuilder, Et as ForbiddenError, it as PureAbility, ut as buildMongoQueryMatcher, H as createAliasResolver, defineAbility, L as detectSubjectType, dt as fieldPatternMatcher, wt as getDefaultErrorMessage, ot as mongoQueryMatcher, z as subject, k as wrapArray };","map":{"version":3,"sources":["../../src/utils.ts","../../src/Rule.ts","../../src/structures/LinkedItem.ts","../../src/RuleIndex.ts","../../src/PureAbility.ts","../../src/matchers/conditions.ts","../../src/matchers/field.ts","../../src/Ability.ts","../../src/AbilityBuilder.ts","../../src/ForbiddenError.ts"],"names":["wrapArray","value","Array","isArray","TYPE_FIELD","setSubjectType","type","object","hasOwnProperty","Object","defineProperty","Error","isSubjectType","getSubjectClassName","modelName","name","getSubjectTypeName","detectSubjectType","subject","constructor","expandActions","aliasMap","rawActions","actions","i","length","action","concat","assertAliasMap","manage","keys","forEach","alias","hasError","indexOf","createAliasResolver","process","env","NODE_ENV","copyArrayTo","dest","target","start","push","mergePrioritized","array","anotherArray","j","merged","priority","getOrDefault","map","key","defaultValue","get","set","identity","x","validate","rule","options","fields","fieldMatcher","conditions","conditionsMatcher","Rule","resolveAction","inverted","reason","undefined","_options","_conditionsMatcher","this","_matchConditions","matches","ast","matchesConditions","matchesField","field","_matchField","linkedItem","prev","item","next","unlinkItem","defaultActionEntry","rules","defaultSubjectEntry","Map","analyze","index","_hasPerFieldRules","RuleIndex","_events","_ruleOptions","_detectSubjectType","_rules","_indexedRules","_buildIndexFor","update","event","ability","_emit","rawRules","indexedRules","subjects","k","subjectRules","possibleRulesFor","subjectType","actionRules","manageRules","has","rulesFor","filter","on","handler","head","_this","delete","payload","current","PureAbility","can","relevantRuleFor","cannot","defaultInstructions","$eq","$ne","$lt","$lte","$gt","$gte","$in","$nin","$all","$size","$regex","$options","$elemMatch","$exists","defaultInterpreters","eq","ne","lt","lte","gt","gte","in","within","nin","all","size","regex","elemMatch","exists","and","buildMongoQueryMatcher","instructions","interpreters","createFactory","mongoQueryMatcher","REGEXP_SPECIAL_CHARS","REGEXP_ANY","REGEXP_STARS","REGEXP_DOT","detectRegexpPattern","match","string","quantifier","matcher","pattern","replace","escapeRegexp","createPattern","patterns","join","RegExp","fieldPatternMatcher","every","f","test","Ability","_PureAbility","RuleBuilder","_rule","because","AbilityBuilder","AbilityType","_AbilityType","bind","build","conditionsOrFields","builder","defineAbility","define","result","then","getDefaultErrorMessage","error","NativeError","NError","message","prototype","create","ForbiddenError","_defaultErrorMessage","setDefaultMessage","messageOrFn","from","captureStackTrace","setMessage","throwUnlessCan"],"mappings":"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","sourcesContent":["import { AnyObject, Subject, SubjectType, SubjectClass, ForcedSubject, AliasesMap } from './types';\n\nexport function wrapArray<T>(value: T[] | T): T[] {\n  return Array.isArray(value) ? value : [value];\n}\n\nexport function setByPath(object: AnyObject, path: string, value: unknown): void {\n  let ref = object;\n  let lastKey = path;\n\n  if (path.indexOf('.') !== -1) {\n    const keys = path.split('.');\n\n    lastKey = keys.pop()!;\n    ref = keys.reduce((res, prop) => {\n      res[prop] = res[prop] || {};\n      return res[prop] as AnyObject;\n    }, object);\n  }\n\n  ref[lastKey] = value;\n}\n\nconst TYPE_FIELD = '__caslSubjectType__';\nexport function setSubjectType<\n  T extends string,\n  U extends Record<PropertyKey, any>\n>(type: T, object: U): U & ForcedSubject<T> {\n  if (object) {\n    if (!object.hasOwnProperty(TYPE_FIELD)) {\n      Object.defineProperty(object, TYPE_FIELD, { value: type });\n    } else if (type !== object[TYPE_FIELD]) {\n      throw new Error(`Trying to cast object to subject type ${type} but previously it was casted to ${object[TYPE_FIELD]}`);\n    }\n  }\n\n  return object as U & ForcedSubject<T>;\n}\n\nexport const isSubjectType = (value: unknown): value is SubjectType => {\n  const type = typeof value;\n  return type === 'string' || type === 'function';\n};\n\nconst getSubjectClassName = (value: SubjectClass) => value.modelName || value.name;\nexport const getSubjectTypeName = (value: SubjectType) => {\n  return typeof value === 'string' ? value : getSubjectClassName(value);\n};\n\nexport function detectSubjectType(subject?: Exclude<Subject, SubjectType>): string {\n  if (!subject) {\n    return 'all';\n  }\n\n  if (subject.hasOwnProperty(TYPE_FIELD)) {\n    return (subject as any)[TYPE_FIELD];\n  }\n\n  return getSubjectClassName(subject.constructor as SubjectClass);\n}\n\nexport function expandActions(aliasMap: AliasesMap, rawActions: string | string[]) {\n  let actions = wrapArray(rawActions);\n  let i = 0;\n\n  while (i < actions.length) {\n    const action = actions[i++];\n\n    if (aliasMap.hasOwnProperty(action)) {\n      actions = actions.concat(aliasMap[action]);\n    }\n  }\n\n  return actions;\n}\n\nfunction assertAliasMap(aliasMap: AliasesMap) {\n  if (aliasMap.manage) {\n    throw new Error('Cannot add alias for \"manage\" action because it is reserved');\n  }\n\n  Object.keys(aliasMap).forEach((alias) => {\n    const hasError = alias === aliasMap[alias]\n      || Array.isArray(aliasMap[alias]) && (\n        aliasMap[alias].indexOf(alias) !== -1 || aliasMap[alias].indexOf('manage') !== -1\n      );\n\n    if (hasError) {\n      throw new Error(`Attempt to alias action to itself: ${alias} -> ${aliasMap[alias]}`);\n    }\n  });\n}\n\nexport function createAliasResolver(aliasMap: AliasesMap) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertAliasMap(aliasMap);\n  }\n\n  return (action: string | string[]) => expandActions(aliasMap, action);\n}\n\nfunction copyArrayTo<T>(dest: T[], target: T[], start: number) {\n  for (let i = start; i < target.length; i++) {\n    dest.push(target[i]);\n  }\n}\n\nexport function mergePrioritized<T extends { priority: number }>(\n  array?: T[],\n  anotherArray?: T[]\n): T[] {\n  if (!array || !array.length) {\n    return anotherArray || [];\n  }\n\n  if (!anotherArray || !anotherArray.length) {\n    return array || [];\n  }\n\n  let i = 0;\n  let j = 0;\n  const merged: T[] = [];\n\n  while (i < array.length && j < anotherArray.length) {\n    if (array[i].priority < anotherArray[j].priority) {\n      merged.push(array[i]);\n      i++;\n    } else {\n      merged.push(anotherArray[j]);\n      j++;\n    }\n  }\n\n  copyArrayTo(merged, array, i);\n  copyArrayTo(merged, anotherArray, j);\n\n  return merged;\n}\n\nexport function getOrDefault<K, V>(map: Map<K, V>, key: K, defaultValue: () => V) {\n  let value = map.get(key);\n\n  if (!value) {\n    value = defaultValue();\n    map.set(key, value);\n  }\n\n  return value;\n}\n\nexport const identity = <T>(x: T) => x;\n","import { wrapArray, isSubjectType } from './utils';\nimport {\n  MatchConditions,\n  MatchField,\n  Abilities,\n  ToAbilityTypes,\n  Normalize,\n  ConditionsMatcher,\n  FieldMatcher,\n} from './types';\nimport { RawRule, RawRuleFrom } from './RawRule';\n\ntype Tuple<A extends Abilities> = Normalize<ToAbilityTypes<A>>;\n\nfunction validate(rule: RawRuleFrom<Abilities, any>, options: RuleOptions<any>) {\n  if (Array.isArray(rule.fields) && !rule.fields.length) {\n    throw new Error('`rawRule.fields` cannot be an empty array. https://bit.ly/390miLa');\n  }\n\n  if (rule.fields && !options.fieldMatcher) {\n    throw new Error('You need to pass \"fieldMatcher\" option in order to restrict access by fields');\n  }\n\n  if (rule.conditions && !options.conditionsMatcher) {\n    throw new Error('You need to pass \"conditionsMatcher\" option in order to restrict access by conditions');\n  }\n}\n\nexport interface RuleOptions<Conditions> {\n  conditionsMatcher?: ConditionsMatcher<Conditions>\n  fieldMatcher?: FieldMatcher\n  resolveAction(action: string | string[]): string | string[]\n}\n\nexport class Rule<A extends Abilities, C> {\n  private _matchConditions: MatchConditions | undefined;\n  private _matchField: MatchField<string> | undefined;\n  private readonly _options!: RuleOptions<C>;\n  public readonly action!: Tuple<A>[0] | Tuple<A>[0][];\n  public readonly subject!: Tuple<A>[1] | Tuple<A>[1][];\n  public readonly inverted!: boolean;\n  public readonly conditions!: C | undefined;\n  public readonly fields!: string[] | undefined;\n  public readonly reason!: string | undefined;\n  public readonly priority!: number;\n\n  constructor(\n    rule: RawRule<ToAbilityTypes<A>, C>,\n    options: RuleOptions<C>,\n    priority: number = 0\n  ) {\n    validate(rule, options);\n\n    this.action = options.resolveAction(rule.action);\n    this.subject = rule.subject!;\n    this.inverted = !!rule.inverted;\n    this.conditions = rule.conditions;\n    this.reason = rule.reason;\n    this.fields = rule.fields ? wrapArray(rule.fields) : undefined;\n    this.priority = priority;\n    this._options = options;\n  }\n\n  private _conditionsMatcher() {\n    if (this.conditions && !this._matchConditions) {\n      this._matchConditions = this._options.conditionsMatcher!(this.conditions);\n    }\n\n    return this._matchConditions!;\n  }\n\n  get ast() {\n    const matches = this._conditionsMatcher();\n    return matches ? matches.ast : undefined;\n  }\n\n  matchesConditions(object: Normalize<A>[1] | undefined): boolean {\n    if (!this.conditions) {\n      return true;\n    }\n\n    if (!object || isSubjectType(object)) {\n      return !this.inverted;\n    }\n\n    const matches = this._conditionsMatcher();\n    return matches(object as Record<string, unknown>);\n  }\n\n  matchesField(field: string | undefined): boolean {\n    if (!this.fields) {\n      return true;\n    }\n\n    if (!field) {\n      return !this.inverted;\n    }\n\n    if (this.fields && !this._matchField) {\n      this._matchField = this._options.fieldMatcher!(this.fields);\n    }\n\n    return this._matchField!(field);\n  }\n}\n","export interface LinkedItem<T> {\n  next: LinkedItem<T> | null\n  prev: LinkedItem<T> | null\n  readonly value: T\n}\n\nexport const linkedItem = <T>(value: T, prev: LinkedItem<T>['prev']) => {\n  const item = { value, prev, next: null };\n\n  if (prev) {\n    prev.next = item;\n  }\n\n  return item;\n};\n\nexport const unlinkItem = (item: LinkedItem<any>) => {\n  if (item.next) {\n    item.next.prev = item.prev;\n  }\n\n  if (item.prev) {\n    item.prev.next = item.next;\n  }\n\n  item.next = item.prev = null; // eslint-disable-line\n};\n","import { Rule, RuleOptions } from './Rule';\nimport { RawRuleFrom } from './RawRule';\nimport {\n  Abilities,\n  Normalize,\n  SubjectType,\n  AbilityParameters,\n  AbilityTuple,\n  ExtractSubjectType\n} from './types';\nimport { wrapArray, detectSubjectType, mergePrioritized, getOrDefault, identity, isSubjectType } from './utils';\nimport { LinkedItem, linkedItem, unlinkItem } from './structures/LinkedItem';\n\nexport interface RuleIndexOptions<A extends Abilities, C> extends Partial<RuleOptions<C>> {\n  detectSubjectType?(\n    subject: Exclude<Normalize<A>[1], SubjectType>\n  ): ExtractSubjectType<Normalize<A>[1]>\n}\n\ndeclare const $abilities: unique symbol;\ndeclare const $conditions: unique symbol;\ninterface WithGenerics {\n  [$abilities]: any\n  [$conditions]: any\n}\nexport type Public<T extends WithGenerics> = { [K in keyof T]: T[K] };\nexport interface Generics<T extends WithGenerics> {\n  abilities: T[typeof $abilities],\n  conditions: T[typeof $conditions]\n}\n\nexport type RuleOf<T extends WithGenerics> =\n  Rule<Generics<T>['abilities'], Generics<T>['conditions']>;\nexport type RawRuleOf<T extends WithGenerics> =\n  RawRuleFrom<Generics<T>['abilities'], Generics<T>['conditions']>;\n\nexport type RuleIndexOptionsOf<T extends WithGenerics> =\n  RuleIndexOptions<Generics<T>['abilities'], Generics<T>['conditions']>;\n\ninterface AbilityEvent<T extends WithGenerics> {\n  target: T\n  /** @deprecated use \"target\" property instead */\n  ability: T\n}\n\nexport interface UpdateEvent<T extends WithGenerics> extends AbilityEvent<T> {\n  rules: RawRuleOf<T>[]\n}\nexport type EventHandler<Event> = (event: Event) => void;\n\nexport type Events<\n  T extends WithGenerics,\n  K extends keyof EventsMap<T> = keyof EventsMap<T>\n> = Map<K, LinkedItem<EventHandler<EventsMap<T>[K]>> | null>;\n\ninterface EventsMap<T extends WithGenerics> {\n  update: UpdateEvent<T>\n  updated: UpdateEvent<T>\n}\n\ntype IndexTree<A extends Abilities, C> = Map<SubjectType, Map<string, {\n  rules: Rule<A, C>[],\n  merged: boolean\n}>>;\n\nexport type Unsubscribe = () => void;\n\nconst defaultActionEntry = () => ({\n  rules: [] as unknown as Rule<any, any>[],\n  merged: false\n});\nconst defaultSubjectEntry = () => new Map<string, ReturnType<typeof defaultActionEntry>>();\nconst analyze = (index: any, rule: Rule<any, any>) => {\n  if (!index._hasPerFieldRules && rule.fields) {\n    index._hasPerFieldRules = true;\n  }\n};\n\ntype AbilitySubjectTypeParameters<T extends Abilities, IncludeField extends boolean = true> =\n  AbilityParameters<\n  T,\n  T extends AbilityTuple\n    ? IncludeField extends true\n      ? (action: T[0], subject: ExtractSubjectType<T[1]>, field?: string) => 0\n      : (action: T[0], subject: ExtractSubjectType<T[1]>) => 0\n    : never,\n  (action: Extract<T, string>) => 0\n  >;\n\nexport class RuleIndex<A extends Abilities, Conditions> {\n  private _hasPerFieldRules: boolean = false;\n  private _events: Events<this> = new Map();\n  private _indexedRules!: IndexTree<A, Conditions>;\n  private _rules!: RawRuleFrom<A, Conditions>[];\n  private readonly _ruleOptions!: RuleOptions<Conditions>;\n  private readonly _detectSubjectType!: Required<RuleIndexOptions<A, Conditions>>['detectSubjectType'];\n  readonly [$abilities]!: A;\n  readonly [$conditions]!: Conditions;\n\n  constructor(\n    rules: RawRuleFrom<A, Conditions>[] = [],\n    options: RuleIndexOptions<A, Conditions> = {}\n  ) {\n    this._ruleOptions = {\n      conditionsMatcher: options.conditionsMatcher,\n      fieldMatcher: options.fieldMatcher,\n      resolveAction: options.resolveAction || identity,\n    };\n    this._detectSubjectType = options.detectSubjectType || detectSubjectType;\n    this._rules = rules;\n    this._indexedRules = this._buildIndexFor(rules);\n  }\n\n  get rules() {\n    return this._rules;\n  }\n\n  detectSubjectType(object?: Normalize<A>[1]): ExtractSubjectType<Normalize<A>[1]> {\n    return isSubjectType(object)\n      ? object\n      : this._detectSubjectType(object as Exclude<Normalize<A>[1], SubjectType>);\n  }\n\n  update(rules: RawRuleFrom<A, Conditions>[]): Public<this> {\n    const event = {\n      rules,\n      ability: this,\n      target: this\n    } as unknown as UpdateEvent<this>;\n\n    this._emit('update', event);\n    this._rules = rules;\n    this._indexedRules = this._buildIndexFor(rules);\n    this._emit('updated', event);\n\n    return this;\n  }\n\n  private _buildIndexFor(rawRules: RawRuleFrom<A, Conditions>[]) {\n    const indexedRules: IndexTree<A, Conditions> = new Map();\n\n    for (let i = rawRules.length - 1; i >= 0; i--) {\n      const priority = rawRules.length - i - 1;\n      const rule = new Rule(rawRules[i], this._ruleOptions, priority);\n      const actions = wrapArray(rule.action);\n      const subjects = wrapArray(rule.subject || 'all');\n      analyze(this, rule);\n\n      for (let k = 0; k < subjects.length; k++) {\n        const subjectRules = getOrDefault(indexedRules, subjects[k], defaultSubjectEntry);\n\n        for (let j = 0; j < actions.length; j++) {\n          getOrDefault(subjectRules, actions[j], defaultActionEntry).rules.push(rule);\n        }\n      }\n    }\n\n    return indexedRules;\n  }\n\n  possibleRulesFor(...args: AbilitySubjectTypeParameters<A, false>): Rule<A, Conditions>[]\n  possibleRulesFor(action: string, subjectType: SubjectType = 'all'): Rule<A, Conditions>[] {\n    if (!isSubjectType(subjectType)) {\n      throw new Error('\"possibleRulesFor\" accepts only subject types (i.e., string or class) as the 2nd parameter');\n    }\n\n    const subjectRules = getOrDefault(this._indexedRules, subjectType, defaultSubjectEntry);\n    const actionRules = getOrDefault(subjectRules, action, defaultActionEntry);\n\n    if (actionRules.merged) {\n      return actionRules.rules;\n    }\n\n    const manageRules = action !== 'manage' && subjectRules.has('manage')\n      ? subjectRules.get('manage')!.rules\n      : undefined;\n    let rules = mergePrioritized(actionRules.rules, manageRules);\n\n    if (subjectType !== 'all') {\n      rules = mergePrioritized(rules, (this as any).possibleRulesFor(action, 'all'));\n    }\n\n    actionRules.rules = rules;\n    actionRules.merged = true;\n\n    return rules;\n  }\n\n  rulesFor(...args: AbilitySubjectTypeParameters<A>): Rule<A, Conditions>[]\n  rulesFor(action: string, subjectType?: SubjectType, field?: string): Rule<A, Conditions>[] {\n    const rules: Rule<A, Conditions>[] = (this as any).possibleRulesFor(action, subjectType);\n\n    if (field && typeof field !== 'string') {\n      throw new Error('The 3rd, `field` parameter is expected to be a string. See https://stalniy.github.io/casl/en/api/casl-ability#can-of-pure-ability for details');\n    }\n\n    if (!this._hasPerFieldRules) {\n      return rules;\n    }\n\n    return rules.filter(rule => rule.matchesField(field));\n  }\n\n  on<T extends keyof EventsMap<this>>(\n    event: T,\n    handler: EventHandler<EventsMap<Public<this>>[T]>\n  ): Unsubscribe {\n    const head = this._events.get(event) || null;\n    const item = linkedItem(handler, head);\n    this._events.set(event, item);\n\n    return () => {\n      if (!item.next && !item.prev && this._events.get(event) === item) {\n        this._events.delete(event);\n      } else {\n        unlinkItem(item);\n      }\n    };\n  }\n\n  private _emit<T extends keyof EventsMap<this>>(name: T, payload: EventsMap<this>[T]) {\n    let current = this._events.get(name) || null;\n    while (current !== null) {\n      const prev = current.prev;\n      current.value(payload);\n      current = prev;\n    }\n  }\n}\n","import { RuleIndex, RuleIndexOptions, RuleIndexOptionsOf, Public, RawRuleOf } from './RuleIndex';\nimport { Abilities, AbilityTuple, CanParameters, Subject } from './types';\nimport { Rule } from './Rule';\n\nexport interface AbilityOptions<A extends Abilities, Conditions>\n  extends RuleIndexOptions<A, Conditions> {}\nexport interface AnyAbility extends Public<PureAbility<any, any>> {}\nexport interface AbilityOptionsOf<T extends AnyAbility> extends RuleIndexOptionsOf<T> {}\nexport type AbilityClass<T extends AnyAbility> = new (\n  rules?: RawRuleOf<T>[],\n  options?: AbilityOptionsOf<T>\n) => T;\n\nexport class PureAbility<\n  A extends Abilities = AbilityTuple,\n  Conditions = unknown\n> extends RuleIndex<A, Conditions> {\n  can(...args: CanParameters<A>): boolean {\n    const rule = this.relevantRuleFor(...args);\n    return !!rule && !rule.inverted;\n  }\n\n  relevantRuleFor(...args: CanParameters<A>): Rule<A, Conditions> | null\n  relevantRuleFor(action: string, subject?: Subject, field?: string): Rule<A, Conditions> | null {\n    const subjectType = this.detectSubjectType(subject);\n    const rules = (this as any).rulesFor(action, subjectType, field);\n\n    for (let i = 0, length = rules.length; i < length; i++) {\n      if (rules[i].matchesConditions(subject)) {\n        return rules[i];\n      }\n    }\n\n    return null;\n  }\n\n  cannot(...args: CanParameters<A>): boolean {\n    return !this.can(...args);\n  }\n}\n","import {\n  $eq,\n  eq,\n  $ne,\n  ne,\n  $lt,\n  lt,\n  $lte,\n  lte,\n  $gt,\n  gt,\n  $gte,\n  gte,\n  $in,\n  within,\n  $nin,\n  nin,\n  $all,\n  all,\n  $size,\n  size,\n  $regex,\n  $options,\n  regex,\n  $elemMatch,\n  elemMatch,\n  $exists,\n  exists,\n  and,\n  createFactory,\n  BuildMongoQuery,\n  DefaultOperators,\n} from '@ucast/mongo2js';\nimport { ConditionsMatcher, AnyObject } from '../types';\nimport { Container, GenericFactory } from '../hkt';\n\nconst defaultInstructions = {\n  $eq,\n  $ne,\n  $lt,\n  $lte,\n  $gt,\n  $gte,\n  $in,\n  $nin,\n  $all,\n  $size,\n  $regex,\n  $options,\n  $elemMatch,\n  $exists,\n};\nconst defaultInterpreters = {\n  eq,\n  ne,\n  lt,\n  lte,\n  gt,\n  gte,\n  in: within,\n  nin,\n  all,\n  size,\n  regex,\n  elemMatch,\n  exists,\n  and,\n};\n\ninterface MongoQueryFactory extends GenericFactory {\n  produce: MongoQuery<this[0]>\n}\n\ntype MergeUnion<T extends {}, Keys extends keyof T = keyof T> = { [K in Keys]: T[K] };\nexport type MongoQuery<T = AnyObject> = BuildMongoQuery<MergeUnion<T>, {\n  toplevel: {},\n  field: Pick<DefaultOperators<MergeUnion<T>>['field'], keyof typeof defaultInstructions>\n}> & Container<MongoQueryFactory>;\n\ntype MongoQueryMatcherFactory =\n  (...args: Partial<Parameters<typeof createFactory>>) => ConditionsMatcher<MongoQuery>;\nexport const buildMongoQueryMatcher = ((instructions, interpreters, options) => createFactory(\n  { ...defaultInstructions, ...instructions },\n  { ...defaultInterpreters, ...interpreters },\n  options\n)) as MongoQueryMatcherFactory;\n\nexport const mongoQueryMatcher = createFactory(defaultInstructions, defaultInterpreters);\nexport type {\n  MongoQueryFieldOperators,\n  MongoQueryTopLevelOperators,\n  MongoQueryOperators,\n} from '@ucast/mongo2js';\n","import { FieldMatcher } from '../types';\n\nconst REGEXP_SPECIAL_CHARS = /[-/\\\\^$+?.()|[\\]{}]/g;\nconst REGEXP_ANY = /\\.?\\*+\\.?/g;\nconst REGEXP_STARS = /\\*+/;\nconst REGEXP_DOT = /\\./g;\n\nfunction detectRegexpPattern(match: string, index: number, string: string): string {\n  const quantifier = string[0] === '*' || match[0] === '.' && match[match.length - 1] === '.'\n    ? '+'\n    : '*';\n  const matcher = match.indexOf('**') === -1 ? '[^.]' : '.';\n  const pattern = match.replace(REGEXP_DOT, '\\\\$&')\n    .replace(REGEXP_STARS, matcher + quantifier);\n\n  return index + match.length === string.length ? `(?:${pattern})?` : pattern;\n}\n\nfunction escapeRegexp(match: string, index: number, string: string): string {\n  if (match === '.' && (string[index - 1] === '*' || string[index + 1] === '*')) {\n    return match;\n  }\n\n  return `\\\\${match}`;\n}\n\nfunction createPattern(fields: string[]) {\n  const patterns = fields.map(field => field\n    .replace(REGEXP_SPECIAL_CHARS, escapeRegexp)\n    .replace(REGEXP_ANY, detectRegexpPattern));\n  const pattern = patterns.length > 1 ? `(?:${patterns.join('|')})` : patterns[0];\n\n  return new RegExp(`^${pattern}$`);\n}\n\nexport const fieldPatternMatcher: FieldMatcher = (fields) => {\n  let pattern: RegExp | null;\n\n  return (field) => {\n    if (typeof pattern === 'undefined') {\n      pattern = fields.every(f => f.indexOf('*') === -1)\n        ? null\n        : createPattern(fields);\n    }\n\n    return pattern === null\n      ? fields.indexOf(field) !== -1\n      : pattern.test(field);\n  };\n};\n","import { PureAbility, AbilityOptions } from './PureAbility';\nimport { RawRuleFrom } from './RawRule';\nimport { AbilityTuple } from './types';\nimport { MongoQuery, mongoQueryMatcher } from './matchers/conditions';\nimport { fieldPatternMatcher } from './matchers/field';\nimport { Public } from './RuleIndex';\n\nexport class Ability<\n  A extends AbilityTuple = AbilityTuple,\n  C extends MongoQuery = MongoQuery\n> extends PureAbility<A, C> {\n  constructor(rules: RawRuleFrom<A, C>[] = [], options: AbilityOptions<A, C> = {}) {\n    super(rules, {\n      conditionsMatcher: mongoQueryMatcher,\n      fieldMatcher: fieldPatternMatcher,\n      ...options,\n    });\n  }\n}\n\nexport interface AnyMongoAbility extends Public<Ability<any, MongoQuery>> {}\n","import { Ability, AnyMongoAbility } from './Ability';\nimport { AnyAbility, AbilityOptionsOf, AbilityClass } from './PureAbility';\nimport { RawRuleOf, Generics } from './RuleIndex';\nimport {\n  ExtractSubjectType as E,\n  AbilityTuple,\n  SubjectType,\n  TaggedInterface,\n  Normalize,\n  AnyObject,\n  AnyClass,\n} from './types';\nimport { ProduceGeneric } from './hkt';\n\nclass RuleBuilder<T extends AnyAbility> {\n  public _rule!: RawRuleOf<T>;\n\n  constructor(rule: RawRuleOf<T>) {\n    this._rule = rule;\n  }\n\n  because(reason: string): this {\n    this._rule.reason = reason;\n    return this;\n  }\n}\n\ntype InstanceOf<T extends AnyAbility, S extends SubjectType> = S extends AnyClass<infer R>\n  ? R\n  : S extends string\n    ? Exclude<Normalize<Generics<T>['abilities']>[1], SubjectType> extends { kind: string }\n      ? Extract<Normalize<Generics<T>['abilities']>[1], TaggedInterface<S>>\n      : AnyObject\n    : never;\ntype ConditionsOf<T extends AnyAbility, I extends {}> =\n  ProduceGeneric<Generics<T>['conditions'], I>;\ntype ActionFrom<T extends AbilityTuple, S extends SubjectType> = T extends any\n  ? S extends T[1] ? T[0] : never\n  : never;\ntype ActionOf<T extends AnyAbility, S extends SubjectType> = ActionFrom<Generics<T>['abilities'], S>;\ntype SubjectTypeOf<T extends AnyAbility> = E<Normalize<Generics<T>['abilities']>[1]>;\n\ntype SimpleCanParams<T extends AnyAbility> = Parameters<(\n  action: Generics<T>['abilities'] | Generics<T>['abilities'][]\n) => 0>;\ntype BuilderCanParameters<\n  S extends SubjectType,\n  I extends InstanceOf<T, S>,\n  T extends AnyAbility\n> = Generics<T>['abilities'] extends AbilityTuple\n  ? Parameters<(\n    action: ActionOf<T, S> | ActionOf<T, S>[],\n    subject: S | S[],\n    conditions?: ConditionsOf<T, I>\n  ) => 0>\n  : SimpleCanParams<T>;\n\ntype BuilderCanParametersWithFields<\n  S extends SubjectType,\n  I extends InstanceOf<T, S>,\n  F extends string,\n  T extends AnyAbility\n> = Generics<T>['abilities'] extends AbilityTuple\n  ? Parameters<(\n    action: ActionOf<T, S> | ActionOf<T, S>[],\n    subject: S | S[],\n    fields?: F | F[],\n    conditions?: ConditionsOf<T, I>\n  ) => 0>\n  : SimpleCanParams<T>;\ntype Keys<T> = string & keyof T;\n\nexport class AbilityBuilder<T extends AnyAbility> {\n  public rules: RawRuleOf<T>[] = [];\n  private _AbilityType!: AnyClass<T>;\n\n  constructor(AbilityType: AnyClass<T>) {\n    this._AbilityType = AbilityType;\n    this.can = this.can.bind(this as any);\n    this.cannot = this.cannot.bind(this as any);\n    this.build = this.build.bind(this as any);\n  }\n\n  can<\n    I extends InstanceOf<T, S>,\n    S extends SubjectTypeOf<T> = SubjectTypeOf<T>\n  >(...args: BuilderCanParameters<S, I, T>): RuleBuilder<T>\n  can<\n    I extends InstanceOf<T, S>,\n    F extends string = Keys<I>,\n    S extends SubjectTypeOf<T> = SubjectTypeOf<T>\n  >(...args: BuilderCanParametersWithFields<S, I, F | Keys<I>, T>): RuleBuilder<T>\n  can(\n    action: string | string[],\n    subject?: SubjectType | SubjectType[],\n    conditionsOrFields?: string | string[] | Generics<T>['conditions'],\n    conditions?: Generics<T>['conditions']\n  ): RuleBuilder<T> {\n    const rule = { action } as RawRuleOf<T>;\n\n    if (subject) {\n      rule.subject = subject;\n\n      if (Array.isArray(conditionsOrFields) || typeof conditionsOrFields === 'string') {\n        rule.fields = conditionsOrFields;\n      } else if (typeof conditionsOrFields !== 'undefined') {\n        rule.conditions = conditionsOrFields;\n      }\n\n      if (typeof conditions !== 'undefined') {\n        rule.conditions = conditions;\n      }\n    }\n\n    this.rules.push(rule);\n\n    return new RuleBuilder(rule);\n  }\n\n  cannot<\n    I extends InstanceOf<T, S>,\n    S extends SubjectTypeOf<T> = SubjectTypeOf<T>\n  >(...args: BuilderCanParameters<S, I, T>): RuleBuilder<T>\n  cannot<\n    I extends InstanceOf<T, S>,\n    F extends string = Keys<I>,\n    S extends SubjectTypeOf<T> = SubjectTypeOf<T>\n  >(...args: BuilderCanParametersWithFields<S, I, F | Keys<I>, T>): RuleBuilder<T>\n  cannot(\n    action: string | string[],\n    subject?: SubjectType | SubjectType[],\n    conditionsOrFields?: string | string[] | Generics<T>['conditions'],\n    conditions?: Generics<T>['conditions'],\n  ): RuleBuilder<T> {\n    const builder = (this as any).can(action, subject, conditionsOrFields, conditions);\n    builder._rule.inverted = true;\n    return builder;\n  }\n\n  build(options?: AbilityOptionsOf<T>) {\n    return new this._AbilityType(this.rules, options);\n  }\n}\n\ntype DSL<T extends AnyAbility, R> = (\n  can: AbilityBuilder<T>['can'],\n  cannot: AbilityBuilder<T>['cannot']\n) => R;\n\nexport function defineAbility<\n  T extends AnyMongoAbility\n>(define: DSL<T, Promise<void>>, options?: AbilityOptionsOf<T>): Promise<T>;\nexport function defineAbility<\n  T extends AnyMongoAbility\n>(define: DSL<T, void>, options?: AbilityOptionsOf<T>): T;\nexport function defineAbility<\n  T extends AnyMongoAbility\n>(define: DSL<T, void | Promise<void>>, options?: AbilityOptionsOf<T>): T | Promise<T> {\n  const builder = new AbilityBuilder(Ability as unknown as AbilityClass<T>);\n  const result = define(builder.can, builder.cannot);\n\n  if (result && typeof result.then === 'function') {\n    return result.then(() => builder.build(options));\n  }\n\n  return builder.build(options);\n}\n","import { AnyAbility } from './PureAbility';\nimport { Normalize } from './types';\nimport { Generics } from './RuleIndex';\nimport { getSubjectTypeName } from './utils';\n\nexport type GetErrorMessage = (error: ForbiddenError<AnyAbility>) => string;\nexport const getDefaultErrorMessage: GetErrorMessage = error => `Cannot execute \"${error.action}\" on \"${error.subjectType}\"`;\n\nconst NativeError = function NError(this: Error, message: string) {\n  this.message = message;\n} as unknown as new (message: string) => Error;\n\nNativeError.prototype = Object.create(Error.prototype);\n\nexport class ForbiddenError<T extends AnyAbility> extends NativeError {\n  public readonly ability!: T;\n  public action!: Normalize<Generics<T>['abilities']>[0];\n  public subject!: Generics<T>['abilities'][1];\n  public field?: string;\n  public subjectType!: string;\n\n  static _defaultErrorMessage = getDefaultErrorMessage;\n\n  static setDefaultMessage(messageOrFn: string | GetErrorMessage) {\n    this._defaultErrorMessage = typeof messageOrFn === 'string' ? () => messageOrFn : messageOrFn;\n  }\n\n  static from<U extends AnyAbility>(ability: U) {\n    return new this<U>(ability);\n  }\n\n  private constructor(ability: T) {\n    super('');\n    this.ability = ability;\n\n    if (typeof Error.captureStackTrace === 'function') {\n      this.name = 'ForbiddenError';\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n\n  setMessage(message: string) {\n    this.message = message;\n    return this;\n  }\n\n  throwUnlessCan(...args: Parameters<T['can']>) {\n    const rule = this.ability.relevantRuleFor(...args);\n\n    if (rule && !rule.inverted) {\n      return;\n    }\n\n    this.action = args[0];\n    this.subject = args[1];\n    this.subjectType = getSubjectTypeName(this.ability.detectSubjectType(args[1]));\n    this.field = args[2];\n\n    const reason = rule ? rule.reason : '';\n    // eslint-disable-next-line no-underscore-dangle\n    this.message = this.message || reason || (this.constructor as any)._defaultErrorMessage(this);\n    throw this; // eslint-disable-line\n  }\n}\n"]},"metadata":{},"sourceType":"module"}