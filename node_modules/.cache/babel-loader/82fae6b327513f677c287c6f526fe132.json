{"ast":null,"code":"var _s = $RefreshSig$();\n//** React Imports\nimport { useEffect } from 'react';\n\n// ** Store & Actions\nimport { handleRTL } from '@Store/actions/layout';\nimport { useDispatch, useSelector } from 'react-redux';\nexport var useRTL = function useRTL() {\n  _s();\n  // ** Store Vars\n  var dispatch = useDispatch();\n  var isRtl = useSelector(function (state) {\n    return state.layout.isRTL;\n  });\n\n  // ** Return a wrapped version of useState's setter function\n  var setValue = function setValue(value) {\n    try {\n      // ** Allow value to be a function so we have same API as useState\n      var valueToStore = value instanceof Function ? value(isRtl) : value;\n      dispatch(handleRTL(valueToStore));\n    } catch (error) {\n      // ** A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n  useEffect(function () {\n    // ** Get HTML Tag\n    var element = document.getElementsByTagName('html')[0];\n\n    // ** If isRTL then add attr dir='rtl' with HTML else attr dir='ltr'\n    if (isRtl) {\n      element.setAttribute('dir', 'rtl');\n    } else {\n      element.setAttribute('dir', 'ltr');\n    }\n  }, [isRtl]);\n  return [isRtl, setValue];\n};\n_s(useRTL, \"bvotjOIwjvE2W8snyOVlqQxqT4s=\", false, function () {\n  return [useDispatch, useSelector];\n});","map":{"version":3,"names":["useEffect","handleRTL","useDispatch","useSelector","useRTL","dispatch","isRtl","state","layout","isRTL","setValue","value","valueToStore","Function","error","console","log","element","document","getElementsByTagName","setAttribute"],"sources":["/Users/abc/Downloads/Workspace/projectFPT/cms-fusamate/cms-fusamate/cms-fusamte/src/utility/hooks/useRTL.js"],"sourcesContent":["//** React Imports\nimport { useEffect } from 'react'\n\n// ** Store & Actions\nimport { handleRTL } from '@Store/actions/layout'\nimport { useDispatch, useSelector } from 'react-redux'\n\nexport const useRTL = () => {\n  // ** Store Vars\n  const dispatch = useDispatch()\n  const isRtl = useSelector(state => state.layout.isRTL)\n\n  // ** Return a wrapped version of useState's setter function\n  const setValue = value => {\n    try {\n      // ** Allow value to be a function so we have same API as useState\n      const valueToStore = value instanceof Function ? value(isRtl) : value\n      dispatch(handleRTL(valueToStore))\n    } catch (error) {\n      // ** A more advanced implementation would handle the error case\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    // ** Get HTML Tag\n    const element = document.getElementsByTagName('html')[0]\n\n    // ** If isRTL then add attr dir='rtl' with HTML else attr dir='ltr'\n    if (isRtl) {\n      element.setAttribute('dir', 'rtl')\n    } else {\n      element.setAttribute('dir', 'ltr')\n    }\n  }, [isRtl])\n\n  return [isRtl, setValue]\n}\n"],"mappings":";AAAA;AACA,SAASA,SAAS,QAAQ,OAAO;;AAEjC;AACA,SAASC,SAAS,QAAQ,uBAAuB;AACjD,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AAEtD,OAAO,IAAMC,MAAM,GAAG,SAATA,MAAM,GAAS;EAAA;EAC1B;EACA,IAAMC,QAAQ,GAAGH,WAAW,EAAE;EAC9B,IAAMI,KAAK,GAAGH,WAAW,CAAC,UAAAI,KAAK;IAAA,OAAIA,KAAK,CAACC,MAAM,CAACC,KAAK;EAAA,EAAC;;EAEtD;EACA,IAAMC,QAAQ,GAAG,SAAXA,QAAQ,CAAGC,KAAK,EAAI;IACxB,IAAI;MACF;MACA,IAAMC,YAAY,GAAGD,KAAK,YAAYE,QAAQ,GAAGF,KAAK,CAACL,KAAK,CAAC,GAAGK,KAAK;MACrEN,QAAQ,CAACJ,SAAS,CAACW,YAAY,CAAC,CAAC;IACnC,CAAC,CAAC,OAAOE,KAAK,EAAE;MACd;MACAC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IACpB;EACF,CAAC;EAEDd,SAAS,CAAC,YAAM;IACd;IACA,IAAMiB,OAAO,GAAGC,QAAQ,CAACC,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;;IAExD;IACA,IAAIb,KAAK,EAAE;MACTW,OAAO,CAACG,YAAY,CAAC,KAAK,EAAE,KAAK,CAAC;IACpC,CAAC,MAAM;MACLH,OAAO,CAACG,YAAY,CAAC,KAAK,EAAE,KAAK,CAAC;IACpC;EACF,CAAC,EAAE,CAACd,KAAK,CAAC,CAAC;EAEX,OAAO,CAACA,KAAK,EAAEI,QAAQ,CAAC;AAC1B,CAAC;AAAA,GA9BYN,MAAM;EAAA,QAEAF,WAAW,EACdC,WAAW;AAAA"},"metadata":{},"sourceType":"module"}