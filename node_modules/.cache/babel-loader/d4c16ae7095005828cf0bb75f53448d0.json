{"ast":null,"code":"import { get as r, set as i } from \"react-hook-form\";\nvar e = function e(i, _e, t) {\n    if (i && \"reportValidity\" in i) {\n      var f = r(t, _e);\n      i.setCustomValidity(f && f.message || \"\"), i.reportValidity();\n    }\n  },\n  t = function t(r, i) {\n    var t = function t(_t) {\n      var f = i.fields[_t];\n      f && f.ref && \"reportValidity\" in f.ref ? e(f.ref, _t, r) : f.refs && f.refs.forEach(function (i) {\n        return e(i, _t, r);\n      });\n    };\n    for (var f in i.fields) {\n      t(f);\n    }\n  },\n  f = function f(e, _f) {\n    _f.shouldUseNativeValidation && t(e, _f);\n    var o = {};\n    for (var a in e) {\n      var n = r(_f.fields, a);\n      i(o, a, Object.assign(e[a], {\n        ref: n && n.ref\n      }));\n    }\n    return o;\n  };\nexport { f as toNestError, t as validateFieldsNatively };","map":{"version":3,"sources":["../src/validateFieldsNatively.ts","../src/toNestError.ts"],"names":["setCustomValidity","ref","fieldPath","errors","error","get","message","reportValidity","validateFieldsNatively","options","fields","field","refs","forEach","toNestError","shouldUseNativeValidation","fieldErrors","path","set","Object","assign"],"mappings":";AAIA,IAAMA,CAAAA,GAAoB,WAACC,CAAAA,EAAUC,EAAAA,EAAmBC,CAAAA,EAAAA;IACtD,IAAIF,CAAAA,IAAO,gBAAA,IAAoBA,CAAAA,EAAK;MAClC,IAAMG,CAAAA,GAAQC,CAAAA,CAAIF,CAAAA,EAAQD,EAAAA,CAAAA;MAC1BD,CAAAA,CAAID,iBAAAA,CAAmBI,CAAAA,IAASA,CAAAA,CAAME,OAAAA,IAAY,EAAA,CAAA,EAElDL,CAAAA,CAAIM,cAAAA,EAAAA;IAAAA;EAAAA,CAAAA;EAKKC,CAAAA,GAAyB,WACpCL,CAAAA,EACAM,CAAAA,EAAAA;IAAAA,IAAAA,CAAAA,GAAAA,WAIWP,EAAAA,EAAAA;MACT,IAAMS,CAAAA,GAAQF,CAAAA,CAAQC,MAAAA,CAAOR,EAAAA,CAAAA;MACzBS,CAAAA,IAASA,CAAAA,CAAMV,GAAAA,IAAO,gBAAA,IAAoBU,CAAAA,CAAMV,GAAAA,GAClDD,CAAAA,CAAkBW,CAAAA,CAAMV,GAAAA,EAAKC,EAAAA,EAAWC,CAAAA,CAAAA,GAC/BQ,CAAAA,CAAMC,IAAAA,IACfD,CAAAA,CAAMC,IAAAA,CAAKC,OAAAA,CAAQ,UAACZ,CAAAA,EAAAA;QAAAA,OAA0BD,CAAAA,CAAkBC,CAAAA,EAAKC,EAAAA,EAAWC,CAAAA,CAAAA;MAAAA,CAAAA,CAAAA;IAAAA,CAAAA;IALpF,KAAK,IAAMD,CAAAA,IAAaO,CAAAA,CAAQC,MAAAA;MAAAA,CAAAA,CAArBR,CAAAA,CAAAA;IAAAA;EAAAA,CAAAA;ECXAY,CAAAA,GAAc,WACzBX,CAAAA,EACAM,EAAAA,EAAAA;IAEAA,EAAAA,CAAQM,yBAAAA,IAA6BP,CAAAA,CAAuBL,CAAAA,EAAQM,EAAAA,CAAAA;IAEpE,IAAMO,CAAAA,GAAc,CAAA,CAAA;IACpB,KAAK,IAAMC,CAAAA,IAAQd,CAAAA,EAAQ;MACzB,IAAMQ,CAAAA,GAAQN,CAAAA,CAAII,EAAAA,CAAQC,MAAAA,EAAQO,CAAAA,CAAAA;MAElCC,CAAAA,CACEF,CAAAA,EACAC,CAAAA,EACAE,MAAAA,CAAOC,MAAAA,CAAOjB,CAAAA,CAAOc,CAAAA,CAAAA,EAAO;QAAEhB,GAAAA,EAAKU,CAAAA,IAASA,CAAAA,CAAMV;MAAAA,CAAAA,CAAAA,CAAAA;IAAAA;IAItD,OAAOe,CAAAA;EAAAA,CAAAA;AAAAA,SAAAA,CAAAA,IAAAA,WAAAA,EAAAA,CAAAA,IAAAA,sBAAAA","sourcesContent":["import {\n  get, FieldError, ResolverOptions, Ref, FieldErrors\n} from 'react-hook-form';\n\nconst setCustomValidity = (ref: Ref, fieldPath: string, errors: FieldErrors) => {\n  if (ref && 'reportValidity' in ref) {\n    const error = get(errors, fieldPath) as FieldError | undefined;\n    ref.setCustomValidity((error && error.message) || '');\n\n    ref.reportValidity();\n  }\n};\n\n// Native validation (web only)\nexport const validateFieldsNatively = <TFieldValues>(\n  errors: FieldErrors,\n  options: ResolverOptions<TFieldValues>,\n): void => {\n\n\n  for (const fieldPath in options.fields) {\n    const field = options.fields[fieldPath];\n    if (field && field.ref && 'reportValidity' in field.ref) {\n      setCustomValidity(field.ref, fieldPath, errors)\n    } else if (field.refs) {\n      field.refs.forEach((ref: HTMLInputElement) => setCustomValidity(ref, fieldPath, errors))\n    }\n  }\n};\n","import {\n  set,\n  get,\n  FieldErrors,\n  Field,\n  ResolverOptions,\n} from 'react-hook-form';\nimport { validateFieldsNatively } from './validateFieldsNatively';\n\nexport const toNestError = <TFieldValues>(\n  errors: FieldErrors,\n  options: ResolverOptions<TFieldValues>,\n): FieldErrors<TFieldValues> => {\n  options.shouldUseNativeValidation && validateFieldsNatively(errors, options);\n\n  const fieldErrors = {} as FieldErrors<TFieldValues>;\n  for (const path in errors) {\n    const field = get(options.fields, path) as Field['_f'] | undefined;\n\n    set(\n      fieldErrors,\n      path,\n      Object.assign(errors[path], { ref: field && field.ref }),\n    );\n  }\n\n  return fieldErrors;\n};\n"]},"metadata":{},"sourceType":"module"}