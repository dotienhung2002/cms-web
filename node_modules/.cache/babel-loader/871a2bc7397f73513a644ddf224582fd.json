{"ast":null,"code":"//** React Imports\nimport{useEffect}from'react';export var useOnClickOutside=function useOnClickOutside(ref,handler){useEffect(function(){var listener=function listener(event){// ** Do nothing if clicking ref's element or descendent elements\nif(!ref.current||ref.current.contains(event.target)){return;}// ** Call passed function on click outside\nhandler(event);};document.addEventListener('mousedown',listener);document.addEventListener('touchstart',listener);return function(){document.removeEventListener('mousedown',listener);document.removeEventListener('touchstart',listener);};},// ** Add ref and handler to effect dependencies\n// ** It's worth noting that because passed in handler is a new ...\n// ** ... function on every render that will cause this effect ...\n// ** ... callback/cleanup to run every render. It's not a big deal ...\n// ** ... but to optimize you can wrap handler in useCallback before ...\n// ** ... passing it into this hook.\n[ref,handler]);};","map":{"version":3,"names":["useEffect","useOnClickOutside","ref","handler","listener","event","current","contains","target","document","addEventListener","removeEventListener"],"sources":["/Users/abc/Downloads/Workspace/projectFPT/cms-fusamate/cms-fusamate/cms-fusamte/src/utility/hooks/useOnClickOutside.js"],"sourcesContent":["//** React Imports\nimport { useEffect } from 'react'\n\nexport const useOnClickOutside = (ref, handler) => {\n  useEffect(\n    () => {\n      const listener = event => {\n        // ** Do nothing if clicking ref's element or descendent elements\n        if (!ref.current || ref.current.contains(event.target)) {\n          return\n        }\n\n        // ** Call passed function on click outside\n        handler(event)\n      }\n\n      document.addEventListener('mousedown', listener)\n      document.addEventListener('touchstart', listener)\n\n      return () => {\n        document.removeEventListener('mousedown', listener)\n        document.removeEventListener('touchstart', listener)\n      }\n    },\n    // ** Add ref and handler to effect dependencies\n    // ** It's worth noting that because passed in handler is a new ...\n    // ** ... function on every render that will cause this effect ...\n    // ** ... callback/cleanup to run every render. It's not a big deal ...\n    // ** ... but to optimize you can wrap handler in useCallback before ...\n    // ** ... passing it into this hook.\n    [ref, handler]\n  )\n}\n"],"mappings":"AAAA;AACA,OAASA,SAAS,KAAQ,OAAO,CAEjC,MAAO,IAAMC,kBAAiB,CAAG,QAApBA,kBAAiB,CAAIC,GAAG,CAAEC,OAAO,CAAK,CACjDH,SAAS,CACP,UAAM,CACJ,GAAMI,SAAQ,CAAG,QAAXA,SAAQ,CAAGC,KAAK,CAAI,CACxB;AACA,GAAI,CAACH,GAAG,CAACI,OAAO,EAAIJ,GAAG,CAACI,OAAO,CAACC,QAAQ,CAACF,KAAK,CAACG,MAAM,CAAC,CAAE,CACtD,OACF,CAEA;AACAL,OAAO,CAACE,KAAK,CAAC,CAChB,CAAC,CAEDI,QAAQ,CAACC,gBAAgB,CAAC,WAAW,CAAEN,QAAQ,CAAC,CAChDK,QAAQ,CAACC,gBAAgB,CAAC,YAAY,CAAEN,QAAQ,CAAC,CAEjD,MAAO,WAAM,CACXK,QAAQ,CAACE,mBAAmB,CAAC,WAAW,CAAEP,QAAQ,CAAC,CACnDK,QAAQ,CAACE,mBAAmB,CAAC,YAAY,CAAEP,QAAQ,CAAC,CACtD,CAAC,CACH,CAAC,CACD;AACA;AACA;AACA;AACA;AACA;AACA,CAACF,GAAG,CAAEC,OAAO,CAAC,CACf,CACH,CAAC"},"metadata":{},"sourceType":"module"}