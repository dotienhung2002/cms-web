{"ast":null,"code":"import { createTranslatorFactory as r, ITSELF as t } from \"@ucast/core\";\nexport * from \"@ucast/core\";\nimport { MongoQueryParser as o, allParsingInstructions as n, defaultParsers as e } from \"@ucast/mongo\";\nexport * from \"@ucast/mongo\";\nimport { createJsInterpreter as f, allInterpreters as i, compare as u } from \"@ucast/js\";\nexport * from \"@ucast/js\";\nfunction c() {\n  return (c = Object.assign || function (r) {\n    for (var t = 1; t < arguments.length; t++) {\n      var o = arguments[t];\n      for (var n in o) {\n        Object.prototype.hasOwnProperty.call(o, n) && (r[n] = o[n]);\n      }\n    }\n    return r;\n  }).apply(this, arguments);\n}\nfunction a(r) {\n  return r instanceof Date ? r.getTime() : r && \"function\" == typeof r.toJSON ? r.toJSON() : r;\n}\nvar m = function m(r, t) {\n  return u(a(r), a(t));\n};\nfunction p(n, e, i) {\n  var u = new o(n),\n    a = f(e, c({\n      compare: m\n    }, i));\n  if (i && i.forPrimitives) {\n    var p = {\n        field: t\n      },\n      s = u.parse;\n    u.setParse(function (r) {\n      return s(r, p);\n    });\n  }\n  return r(u.parse, a);\n}\nvar s = p(n, i),\n  v = p([\"$and\", \"$or\"].reduce(function (r, t) {\n    return r[t] = c({}, r[t], {\n      type: \"field\"\n    }), r;\n  }, c({}, n, {\n    $nor: c({}, n.$nor, {\n      type: \"field\",\n      parse: e.compound\n    })\n  })), i, {\n    forPrimitives: !0\n  }),\n  d = s;\nexport { p as createFactory, d as filter, s as guard, v as squire };","map":{"version":3,"sources":["../../src/factory.ts"],"names":["toPrimitive","value","Date","getTime","toJSON","comparePrimitives","a","b","compare","createFactory","instructions","interpreters","options","parser","MongoQueryParser","interpret","createJsInterpreter","forPrimitives","params","field","ITSELF","parse","setParse","query","createTranslatorFactory","guard","allParsingInstructions","allInterpreters","reduce","name","type","$nor","defaultParsers","compound","squire","filter"],"mappings":";;;;;;;;;;;;;;;;;AAyBA,SAASA,CAAAA,CAAYC,CAAAA,EAAAA;EAAAA,OACfA,CAAAA,YAAiBC,IAAAA,GACZD,CAAAA,CAAME,OAAAA,EAAAA,GAGXF,CAAAA,IAAgD,UAAA,IAAA,OAA/BA,CAAAA,CAAoBG,MAAAA,GAC/BH,CAAAA,CAAoBG,MAAAA,EAAAA,GAGvBH,CAAAA;AAAAA;AAGT,IAAMI,CAAAA,GAAoC,SAApCA,CAAAA,CAAqCC,CAAAA,EAAGC,CAAAA,EAAAA;EAAAA,OAAMC,CAAAA,CAAQR,CAAAA,CAAYM,CAAAA,CAAAA,EAAIN,CAAAA,CAAYO,CAAAA,CAAAA,CAAAA;AAAAA,CAAAA;AAyBjF,SAASE,CAAAA,CAIdC,CAAAA,EAAiBC,CAAAA,EAAiBC,CAAAA,EAAAA;EAAAA,IAC5BC,CAAAA,GAAS,IAAIC,CAAAA,CAAiBJ,CAAAA,CAAAA;IAC9BK,CAAAA,GAAYC,CAAAA,CAAoBL,CAAAA,EAAAA,CAAAA,CAAAA;MACpCH,OAAAA,EAASH;IAAAA,CAAAA,EACNO,CAAAA,CAAAA,CAAAA;EAAAA,IAGDA,CAAAA,IAAWA,CAAAA,CAAQK,aAAAA,EAAe;IAAA,IAC9BC,CAAAA,GAAS;QAAEC,KAAAA,EAAOC;MAAAA,CAAAA;MAClBC,CAAAA,GAAQR,CAAAA,CAAOQ,KAAAA;IACrBR,CAAAA,CAAOS,QAAAA,CAAS,UAAA,CAAA,EAAA;MAAA,OAASD,CAAAA,CAAME,CAAAA,EAAOL,CAAAA,CAAAA;IAAAA,CAAAA,CAAAA;EAAAA;EAAAA,OAGjCM,CAAAA,CAAwBX,CAAAA,CAAOQ,KAAAA,EAAON,CAAAA,CAAAA;AAAAA;AAAAA,IAGlCU,CAAAA,GAAQhB,CAAAA,CAAciB,CAAAA,EAAwBC,CAAAA,CAAAA;EAe9CO,CAAAA,GAASzB,CAAAA,CAbI,CAAC,MAAA,EAAQ,KAAA,CAAA,CACuBmB,MAAAA,CAAO,UAAClB,CAAAA,EAAcmB,CAAAA,EAAAA;IAAAA,OAC9EnB,CAAAA,CAAamB,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAanB,CAAAA,CAAamB,CAAAA,CAAAA,EAAAA;MAAOC,IAAAA,EAAM;IAAA,CAAA,CAAA,EAC7CpB,CAAAA;EAAAA,CAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAEJgB,CAAAA,EAAAA;IACHK,IAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EACKL,CAAAA,CAAuBK,IAAAA,EAAAA;MAC1BD,IAAAA,EAAM,OAAA;MACNT,KAAAA,EAAOW,CAAAA,CAAeC;IAAAA,CAAAA;EAAAA,CAAAA,CAAAA,CAAAA,EAI2CN,CAAAA,EAAiB;IACpFV,aAAAA,EAAAA,CAAe;EAAA,CAAA,CAAA;EAEJkB,CAAAA,GAASV,CAAAA;AAAAA,SAAAA,CAAAA,IAAAA,aAAAA,EAAAA,CAAAA,IAAAA,MAAAA,EAAAA,CAAAA,IAAAA,KAAAA,EAAAA,CAAAA,IAAAA,MAAAA","sourcesContent":["import { createTranslatorFactory, ParsingInstruction, Condition, ITSELF } from '@ucast/core';\nimport {\n  MongoQuery,\n  MongoQueryParser,\n  MongoQueryFieldOperators,\n  allParsingInstructions,\n  defaultParsers\n} from '@ucast/mongo';\nimport {\n  createJsInterpreter,\n  allInterpreters,\n  JsInterpreter,\n  JsInterpretationOptions,\n  compare\n} from '@ucast/js';\n\ntype ThingFilter<T> = {\n  (object: T): boolean\n  ast: Condition\n};\n\ninterface HasToJSON {\n  toJSON(): unknown\n}\n\nfunction toPrimitive(value: unknown) {\n  if (value instanceof Date) {\n    return value.getTime();\n  }\n\n  if (value && typeof (value as HasToJSON).toJSON === 'function') {\n    return (value as HasToJSON).toJSON();\n  }\n\n  return value;\n}\n\nconst comparePrimitives: typeof compare = (a, b) => compare(toPrimitive(a), toPrimitive(b));\n\nexport interface FactoryOptions extends JsInterpretationOptions {\n  forPrimitives: boolean\n}\n\nexport type Filter = <\n  T = Record<string, unknown>,\n  Q extends MongoQuery<T> = MongoQuery<T>\n>(query: Q) => ThingFilter<T>;\n\nexport type PrimitiveMongoQuery<T> = MongoQueryFieldOperators<T> & Partial<{\n  $and: MongoQueryFieldOperators<T>[],\n  $or: MongoQueryFieldOperators<T>[],\n  $nor: MongoQueryFieldOperators<T>[]\n}>;\nexport type PrimitiveFilter = <\n  T,\n  Q extends PrimitiveMongoQuery<T> = PrimitiveMongoQuery<T>\n>(query: Q) => ThingFilter<T>;\n\ntype FilterType<T extends { forPrimitives?: true }> = T['forPrimitives'] extends true\n  ? PrimitiveFilter\n  : Filter;\n\nexport function createFactory<\n  T extends Record<string, ParsingInstruction<any, any>>,\n  I extends Record<string, JsInterpreter<any>>,\n  P extends { forPrimitives?: true }\n>(instructions: T, interpreters: I, options?: Partial<FactoryOptions> & P): FilterType<P> {\n  const parser = new MongoQueryParser(instructions);\n  const interpret = createJsInterpreter(interpreters, {\n    compare: comparePrimitives,\n    ...options\n  });\n\n  if (options && options.forPrimitives) {\n    const params = { field: ITSELF };\n    const parse = parser.parse;\n    parser.setParse(query => parse(query, params));\n  }\n\n  return createTranslatorFactory(parser.parse, interpret) as any;\n}\n\nexport const guard = createFactory(allParsingInstructions, allInterpreters);\n\nconst compoundOperators = ['$and', '$or'] as const;\nconst allPrimitiveParsingInstructions = compoundOperators.reduce((instructions, name) => {\n  instructions[name] = { ...instructions[name], type: 'field' } as any;\n  return instructions;\n}, {\n  ...allParsingInstructions,\n  $nor: {\n    ...allParsingInstructions.$nor,\n    type: 'field',\n    parse: defaultParsers.compound\n  }\n});\n\nexport const squire = createFactory(allPrimitiveParsingInstructions, allInterpreters, {\n  forPrimitives: true\n});\nexport const filter = guard; // TODO: remove in next major version\n"]},"metadata":{},"sourceType":"module"}