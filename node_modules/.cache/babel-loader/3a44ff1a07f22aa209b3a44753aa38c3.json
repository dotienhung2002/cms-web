{"ast":null,"code":"var _jsxFileName = \"/Users/abc/Downloads/Workspace/projectFPT/cms-fusamate/cms-fusamate/cms-fusamte/src/views/apps/calendar/Calendar.js\",\n    _s = $RefreshSig$();\n\n// ** React Import\nimport { useEffect, useRef, memo, Fragment } from 'react'; // ** Full Calendar & it's Plugins\n\nimport FullCalendar from '@fullcalendar/react';\nimport listPlugin from '@fullcalendar/list';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction'; // ** Custom Components\n\nimport Avatar from '@Components/avatar'; // ** Third Party Components\n\nimport { toast } from 'react-toastify';\nimport { Card, CardBody } from 'reactstrap';\nimport { Menu, Check } from 'react-feather'; // ** Toast Component\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ToastComponent = ({\n  title,\n  icon,\n  color\n}) => /*#__PURE__*/_jsxDEV(Fragment, {\n  children: /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"toastify-header pb-0\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"title-wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(Avatar, {\n        size: \"sm\",\n        color: color,\n        icon: icon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n        className: \"toast-title\",\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 21,\n  columnNumber: 3\n}, this);\n\n_c = ToastComponent;\n\nconst Calendar = props => {\n  _s();\n\n  // ** Refs\n  const calendarRef = useRef(null); // ** Props\n\n  const {\n    store,\n    isRtl,\n    dispatch,\n    calendarsColor,\n    calendarApi,\n    setCalendarApi,\n    handleAddEventSidebar,\n    blankEvent,\n    toggleSidebar,\n    selectEvent,\n    updateEvent\n  } = props; // ** UseEffect checks for CalendarAPI Update\n\n  useEffect(() => {\n    if (calendarApi === null) {\n      setCalendarApi(calendarRef.current.getApi());\n    }\n  }, [calendarApi]); // ** calendarOptions(Props)\n\n  const calendarOptions = {\n    events: store.events.length ? store.events : [],\n    plugins: [interactionPlugin, dayGridPlugin, timeGridPlugin, listPlugin],\n    initialView: 'dayGridMonth',\n    headerToolbar: {\n      start: 'sidebarToggle, prev,next, title',\n      end: 'dayGridMonth,timeGridWeek,timeGridDay,listMonth'\n    },\n\n    /*\n      Enable dragging and resizing event\n      ? Docs: https://fullcalendar.io/docs/editable\n    */\n    editable: true,\n\n    /*\n      Enable resizing event from start\n      ? Docs: https://fullcalendar.io/docs/eventResizableFromStart\n    */\n    eventResizableFromStart: true,\n\n    /*\n      Automatically scroll the scroll-containers during event drag-and-drop and date selecting\n      ? Docs: https://fullcalendar.io/docs/dragScroll\n    */\n    dragScroll: true,\n\n    /*\n      Max number of events within a given day\n      ? Docs: https://fullcalendar.io/docs/dayMaxEvents\n    */\n    dayMaxEvents: 2,\n\n    /*\n      Determines if day names and week names are clickable\n      ? Docs: https://fullcalendar.io/docs/navLinks\n    */\n    navLinks: true,\n\n    eventClassNames({\n      event: calendarEvent\n    }) {\n      // eslint-disable-next-line no-underscore-dangle\n      const colorName = calendarsColor[calendarEvent._def.extendedProps.calendar];\n      return [// Background Color\n      `bg-light-${colorName}`];\n    },\n\n    eventClick({\n      event: clickedEvent\n    }) {\n      dispatch(selectEvent(clickedEvent));\n      handleAddEventSidebar(); // * Only grab required field otherwise it goes in infinity loop\n      // ! Always grab all fields rendered by form (even if it get `undefined`) otherwise due to Vue3/Composition API you might get: \"object is not extensible\"\n      // event.value = grabEventDataFromEventApi(clickedEvent)\n      // eslint-disable-next-line no-use-before-define\n      // isAddNewEventSidebarActive.value = true\n    },\n\n    customButtons: {\n      sidebarToggle: {\n        text: /*#__PURE__*/_jsxDEV(Menu, {\n          className: \"d-xl-none d-block\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 15\n        }, this),\n\n        click() {\n          toggleSidebar(true);\n        }\n\n      }\n    },\n\n    dateClick(info) {\n      const ev = blankEvent;\n      ev.start = info.date;\n      ev.end = info.date;\n      dispatch(selectEvent(ev));\n      handleAddEventSidebar();\n    },\n\n    /*\n      Handle event drop (Also include dragged event)\n      ? Docs: https://fullcalendar.io/docs/eventDrop\n      ? We can use `eventDragStop` but it doesn't return updated event so we have to use `eventDrop` which returns updated event\n    */\n    eventDrop({\n      event: droppedEvent\n    }) {\n      dispatch(updateEvent(droppedEvent));\n      toast.success( /*#__PURE__*/_jsxDEV(ToastComponent, {\n        title: \"Event Updated\",\n        color: \"success\",\n        icon: /*#__PURE__*/_jsxDEV(Check, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 81\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 21\n      }, this), {\n        autoClose: 2000,\n        hideProgressBar: true,\n        closeButton: false\n      });\n    },\n\n    /*\n      Handle event resize\n      ? Docs: https://fullcalendar.io/docs/eventResize\n    */\n    eventResize({\n      event: resizedEvent\n    }) {\n      dispatch(updateEvent(resizedEvent));\n      toast.success( /*#__PURE__*/_jsxDEV(ToastComponent, {\n        title: \"Event Updated\",\n        color: \"success\",\n        icon: /*#__PURE__*/_jsxDEV(Check, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 81\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 21\n      }, this), {\n        autoClose: 2000,\n        hideProgressBar: true,\n        closeButton: false\n      });\n    },\n\n    ref: calendarRef,\n    // Get direction from app state (store)\n    direction: isRtl ? 'rtl' : 'ltr'\n  };\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: \"shadow-none border-0 mb-0 rounded-0\",\n    children: /*#__PURE__*/_jsxDEV(CardBody, {\n      className: \"pb-0\",\n      children: [/*#__PURE__*/_jsxDEV(FullCalendar, { ...calendarOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this), ' ']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Calendar, \"HuswXQNKgAj2xlMza6JPwM9t0kA=\");\n\n_c2 = Calendar;\nexport default _c3 = /*#__PURE__*/memo(Calendar);\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"ToastComponent\");\n$RefreshReg$(_c2, \"Calendar\");\n$RefreshReg$(_c3, \"%default%\");","map":{"version":3,"sources":["/Users/abc/Downloads/Workspace/projectFPT/cms-fusamate/cms-fusamate/cms-fusamte/src/views/apps/calendar/Calendar.js"],"names":["useEffect","useRef","memo","Fragment","FullCalendar","listPlugin","dayGridPlugin","timeGridPlugin","interactionPlugin","Avatar","toast","Card","CardBody","Menu","Check","ToastComponent","title","icon","color","Calendar","props","calendarRef","store","isRtl","dispatch","calendarsColor","calendarApi","setCalendarApi","handleAddEventSidebar","blankEvent","toggleSidebar","selectEvent","updateEvent","current","getApi","calendarOptions","events","length","plugins","initialView","headerToolbar","start","end","editable","eventResizableFromStart","dragScroll","dayMaxEvents","navLinks","eventClassNames","event","calendarEvent","colorName","_def","extendedProps","calendar","eventClick","clickedEvent","customButtons","sidebarToggle","text","click","dateClick","info","ev","date","eventDrop","droppedEvent","success","autoClose","hideProgressBar","closeButton","eventResize","resizedEvent","ref","direction"],"mappings":"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","sourcesContent":["// ** React Import\nimport { useEffect, useRef, memo, Fragment } from 'react'\n\n// ** Full Calendar & it's Plugins\nimport FullCalendar from '@fullcalendar/react'\nimport listPlugin from '@fullcalendar/list'\nimport dayGridPlugin from '@fullcalendar/daygrid'\nimport timeGridPlugin from '@fullcalendar/timegrid'\nimport interactionPlugin from '@fullcalendar/interaction'\n\n// ** Custom Components\nimport Avatar from '@Components/avatar'\n\n// ** Third Party Components\nimport { toast } from 'react-toastify'\nimport { Card, CardBody } from 'reactstrap'\nimport { Menu, Check } from 'react-feather'\n\n// ** Toast Component\nconst ToastComponent = ({ title, icon, color }) => (\n  <Fragment>\n    <div className='toastify-header pb-0'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color={color} icon={icon} />\n        <h6 className='toast-title'>{title}</h6>\n      </div>\n    </div>\n  </Fragment>\n)\n\nconst Calendar = props => {\n  // ** Refs\n  const calendarRef = useRef(null)\n\n  // ** Props\n  const {\n    store,\n    isRtl,\n    dispatch,\n    calendarsColor,\n    calendarApi,\n    setCalendarApi,\n    handleAddEventSidebar,\n    blankEvent,\n    toggleSidebar,\n    selectEvent,\n    updateEvent\n  } = props\n\n  // ** UseEffect checks for CalendarAPI Update\n  useEffect(() => {\n    if (calendarApi === null) {\n      setCalendarApi(calendarRef.current.getApi())\n    }\n  }, [calendarApi])\n\n  // ** calendarOptions(Props)\n  const calendarOptions = {\n    events: store.events.length ? store.events : [],\n    plugins: [interactionPlugin, dayGridPlugin, timeGridPlugin, listPlugin],\n    initialView: 'dayGridMonth',\n    headerToolbar: {\n      start: 'sidebarToggle, prev,next, title',\n      end: 'dayGridMonth,timeGridWeek,timeGridDay,listMonth'\n    },\n    /*\n      Enable dragging and resizing event\n      ? Docs: https://fullcalendar.io/docs/editable\n    */\n    editable: true,\n\n    /*\n      Enable resizing event from start\n      ? Docs: https://fullcalendar.io/docs/eventResizableFromStart\n    */\n    eventResizableFromStart: true,\n\n    /*\n      Automatically scroll the scroll-containers during event drag-and-drop and date selecting\n      ? Docs: https://fullcalendar.io/docs/dragScroll\n    */\n    dragScroll: true,\n\n    /*\n      Max number of events within a given day\n      ? Docs: https://fullcalendar.io/docs/dayMaxEvents\n    */\n    dayMaxEvents: 2,\n\n    /*\n      Determines if day names and week names are clickable\n      ? Docs: https://fullcalendar.io/docs/navLinks\n    */\n    navLinks: true,\n\n    eventClassNames({ event: calendarEvent }) {\n      // eslint-disable-next-line no-underscore-dangle\n      const colorName = calendarsColor[calendarEvent._def.extendedProps.calendar]\n\n      return [\n        // Background Color\n        `bg-light-${colorName}`\n      ]\n    },\n\n    eventClick({ event: clickedEvent }) {\n      dispatch(selectEvent(clickedEvent))\n      handleAddEventSidebar()\n\n      // * Only grab required field otherwise it goes in infinity loop\n      // ! Always grab all fields rendered by form (even if it get `undefined`) otherwise due to Vue3/Composition API you might get: \"object is not extensible\"\n      // event.value = grabEventDataFromEventApi(clickedEvent)\n\n      // eslint-disable-next-line no-use-before-define\n      // isAddNewEventSidebarActive.value = true\n    },\n\n    customButtons: {\n      sidebarToggle: {\n        text: <Menu className='d-xl-none d-block' />,\n        click() {\n          toggleSidebar(true)\n        }\n      }\n    },\n\n    dateClick(info) {\n      const ev = blankEvent\n      ev.start = info.date\n      ev.end = info.date\n      dispatch(selectEvent(ev))\n      handleAddEventSidebar()\n    },\n\n    /*\n      Handle event drop (Also include dragged event)\n      ? Docs: https://fullcalendar.io/docs/eventDrop\n      ? We can use `eventDragStop` but it doesn't return updated event so we have to use `eventDrop` which returns updated event\n    */\n    eventDrop({ event: droppedEvent }) {\n      dispatch(updateEvent(droppedEvent))\n      toast.success(<ToastComponent title='Event Updated' color='success' icon={<Check />} />, {\n        autoClose: 2000,\n        hideProgressBar: true,\n        closeButton: false\n      })\n    },\n\n    /*\n      Handle event resize\n      ? Docs: https://fullcalendar.io/docs/eventResize\n    */\n    eventResize({ event: resizedEvent }) {\n      dispatch(updateEvent(resizedEvent))\n      toast.success(<ToastComponent title='Event Updated' color='success' icon={<Check />} />, {\n        autoClose: 2000,\n        hideProgressBar: true,\n        closeButton: false\n      })\n    },\n\n    ref: calendarRef,\n\n    // Get direction from app state (store)\n    direction: isRtl ? 'rtl' : 'ltr'\n  }\n\n  return (\n    <Card className='shadow-none border-0 mb-0 rounded-0'>\n      <CardBody className='pb-0'>\n        <FullCalendar {...calendarOptions} />{' '}\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default memo(Calendar)\n"]},"metadata":{},"sourceType":"module"}