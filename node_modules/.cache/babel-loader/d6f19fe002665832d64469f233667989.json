{"ast":null,"code":"var _s = $RefreshSig$();\n\n//** React Imports\nimport { useState, useEffect } from 'react'; // ** Configs\n\nimport themeConfig from '@Configs/themeConfig';\nexport const useSkin = () => {\n  _s();\n\n  // ** State\n  const [skin, setSkin] = useState(() => {\n    try {\n      // ** Get from local storage by key\n      const item = window.localStorage.getItem('skin'); // ** Parse stored json or if none return initialValue\n\n      return item ? JSON.parse(item) : themeConfig.layout.skin;\n    } catch (error) {\n      // ** If error also return initialValue\n      console.log(error);\n      return themeConfig.layout.skin;\n    }\n  }); // ** Return a wrapped version of useState's setter function\n\n  const setValue = value => {\n    try {\n      // ** Allow value to be a function so we have same API as useState\n      const valueToStore = value instanceof Function ? value(skin) : value; // ** Set state\n\n      setSkin(valueToStore); // ** Save to local storage\n\n      window.localStorage.setItem('skin', JSON.stringify(valueToStore));\n    } catch (error) {\n      // ** A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    // ** Get Body Tag\n    const element = window.document.body; // ** Define classnames for skins\n\n    const classNames = {\n      dark: 'dark-layout',\n      bordered: 'bordered-layout',\n      'semi-dark': 'semi-dark-layout'\n    }; // ** Remove all classes from Body on mount\n\n    element.classList.remove(...element.classList); // ** If skin is not light add skin class\n\n    if (skin !== 'light') {\n      element.classList.add(classNames[skin]);\n    }\n  }, [skin]);\n  return [skin, setValue];\n};\n\n_s(useSkin, \"oH+qNgKY8VzOgD9FgTbU25QI1UQ=\");","map":{"version":3,"sources":["/Users/abc/Downloads/Workspace/projectFPT/cms-fusamate/cms-fusamate/cms-fusamte/src/utility/hooks/useSkin.tsx"],"names":["useState","useEffect","themeConfig","useSkin","skin","setSkin","item","window","localStorage","getItem","JSON","parse","layout","error","console","log","setValue","value","valueToStore","Function","setItem","stringify","element","document","body","classNames","dark","bordered","classList","remove","add"],"mappings":";;AAAA;AACA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC,C,CAEA;;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AAEA,OAAO,MAAMC,OAAO,GAAG,MAAM;AAAA;;AAC3B;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,MAAM;AACrC,QAAI;AACF;AACA,YAAMM,IAAI,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,MAA5B,CAAb,CAFE,CAGF;;AACA,aAAOH,IAAI,GAAGI,IAAI,CAACC,KAAL,CAAWL,IAAX,CAAH,GAAsBJ,WAAW,CAACU,MAAZ,CAAmBR,IAApD;AACD,KALD,CAKE,OAAOS,KAAP,EAAc;AACd;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,aAAOX,WAAW,CAACU,MAAZ,CAAmBR,IAA1B;AACD;AACF,GAX+B,CAAhC,CAF2B,CAe3B;;AACA,QAAMY,QAAQ,GAAGC,KAAK,IAAI;AACxB,QAAI;AACF;AACA,YAAMC,YAAY,GAAGD,KAAK,YAAYE,QAAjB,GAA4BF,KAAK,CAACb,IAAD,CAAjC,GAA0Ca,KAA/D,CAFE,CAGF;;AACAZ,MAAAA,OAAO,CAACa,YAAD,CAAP,CAJE,CAKF;;AACAX,MAAAA,MAAM,CAACC,YAAP,CAAoBY,OAApB,CAA4B,MAA5B,EAAoCV,IAAI,CAACW,SAAL,CAAeH,YAAf,CAApC;AACD,KAPD,CAOE,OAAOL,KAAP,EAAc;AACd;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,GAZD;;AAcAZ,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,UAAMqB,OAAO,GAAGf,MAAM,CAACgB,QAAP,CAAgBC,IAAhC,CAFc,CAId;;AACA,UAAMC,UAAU,GAAG;AACjBC,MAAAA,IAAI,EAAE,aADW;AAEjBC,MAAAA,QAAQ,EAAE,iBAFO;AAGjB,mBAAa;AAHI,KAAnB,CALc,CAWd;;AACAL,IAAAA,OAAO,CAACM,SAAR,CAAkBC,MAAlB,CAAyB,GAAGP,OAAO,CAACM,SAApC,EAZc,CAcd;;AACA,QAAIxB,IAAI,KAAK,OAAb,EAAsB;AACpBkB,MAAAA,OAAO,CAACM,SAAR,CAAkBE,GAAlB,CAAsBL,UAAU,CAACrB,IAAD,CAAhC;AACD;AACF,GAlBQ,EAkBN,CAACA,IAAD,CAlBM,CAAT;AAoBA,SAAO,CAACA,IAAD,EAAOY,QAAP,CAAP;AACD,CAnDM;;GAAMb,O","sourcesContent":["//** React Imports\nimport { useState, useEffect } from 'react'\n\n// ** Configs\nimport themeConfig from '@Configs/themeConfig'\n\nexport const useSkin = () => {\n  // ** State\n  const [skin, setSkin] = useState(() => {\n    try {\n      // ** Get from local storage by key\n      const item = window.localStorage.getItem('skin')\n      // ** Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : themeConfig.layout.skin\n    } catch (error) {\n      // ** If error also return initialValue\n      console.log(error)\n      return themeConfig.layout.skin\n    }\n  })\n\n  // ** Return a wrapped version of useState's setter function\n  const setValue = value => {\n    try {\n      // ** Allow value to be a function so we have same API as useState\n      const valueToStore = value instanceof Function ? value(skin) : value\n      // ** Set state\n      setSkin(valueToStore)\n      // ** Save to local storage\n      window.localStorage.setItem('skin', JSON.stringify(valueToStore))\n    } catch (error) {\n      // ** A more advanced implementation would handle the error case\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    // ** Get Body Tag\n    const element = window.document.body\n\n    // ** Define classnames for skins\n    const classNames = {\n      dark: 'dark-layout',\n      bordered: 'bordered-layout',\n      'semi-dark': 'semi-dark-layout'\n    }\n\n    // ** Remove all classes from Body on mount\n    element.classList.remove(...element.classList)\n\n    // ** If skin is not light add skin class\n    if (skin !== 'light') {\n      element.classList.add(classNames[skin])\n    }\n  }, [skin])\n\n  return [skin, setValue]\n}\n"]},"metadata":{},"sourceType":"module"}