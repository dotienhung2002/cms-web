{"ast":null,"code":"import _objectSpread from \"/Users/abc/Downloads/Workspace/projectFPT/cms-fusamate/cms-fusamate/cms-fusamte/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\n// ** Checks if an object is empty (returns boolean)\nexport var isObjEmpty = function isObjEmpty(obj) {\n  return Object.keys(obj).length === 0;\n};\n\n// ** Returns K format from a number\nexport var kFormatter = function kFormatter(num) {\n  return num > 999 ? \"\".concat((num / 1000).toFixed(1), \"k\") : num;\n};\n\n// ** Converts HTML to string\nexport var htmlToString = function htmlToString(html) {\n  return html.replace(/<\\/?[^>]+(>|$)/g, '');\n};\n\n// ** Checks if the passed date is today\nvar isToday = function isToday(date) {\n  var today = new Date();\n  return (/* eslint-disable operator-linebreak */\n    date.getDate() === today.getDate() && date.getMonth() === today.getMonth() && date.getFullYear() === today.getFullYear()\n    /* eslint-enable */\n  );\n};\n\n/**\n ** Format and return date in Humanize format\n ** Intl docs: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format\n ** Intl Constructor: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat\n * @param {String} value date to format\n * @param {Object} formatting Intl object to format with\n */\nexport var formatDate = function formatDate(value) {\n  var formatting = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    month: 'short',\n    day: 'numeric',\n    year: 'numeric'\n  };\n  if (!value) return value;\n  return new Intl.DateTimeFormat('en-US', formatting).format(new Date(value));\n};\n\n// ** Returns short month of passed date\nexport var formatDateToMonthShort = function formatDateToMonthShort(value) {\n  var toTimeForCurrentDay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var date = new Date(value);\n  var formatting = {\n    month: 'short',\n    day: 'numeric'\n  };\n  if (toTimeForCurrentDay && isToday(date)) {\n    formatting = {\n      hour: 'numeric',\n      minute: 'numeric'\n    };\n  }\n  return new Intl.DateTimeFormat('en-US', formatting).format(new Date(value));\n};\n\n/**\n ** Return if user is logged in\n ** This is completely up to you and how you want to store the token in your frontend application\n *  ? e.g. If you are using cookies to store the application please update this function\n */\nexport var isUserLoggedIn = function isUserLoggedIn() {\n  return localStorage.getItem('userData');\n};\nexport var getUserData = function getUserData() {\n  return JSON.parse(localStorage.getItem('userData'));\n};\n\n/**\n ** This function is used for demo purpose route navigation\n ** In real app you won't need this function because your app will navigate to same route for each users regardless of ability\n ** Please note role field is just for showing purpose it's not used by anything in frontend\n ** We are checking role just for ease\n * ? NOTE: If you have different pages to navigate based on user ability then this function can be useful. However, you need to update it.\n * @param {String} userRole Role of user\n */\nexport var getHomeRouteForLoggedInUser = function getHomeRouteForLoggedInUser(userRole) {\n  if (userRole === 'admin') return '/';\n  if (userRole === 'client') return '/access-control';\n  return '/cms/login';\n};\n\n// ** React Select Theme Colors\nexport var selectThemeColors = function selectThemeColors(theme) {\n  return _objectSpread(_objectSpread({}, theme), {}, {\n    colors: _objectSpread(_objectSpread({}, theme.colors), {}, {\n      primary25: '#7367f01a',\n      // for option hover bg-color\n      primary: '#7367f0',\n      // for selected option bg-color\n      neutral10: '#7367f0',\n      // for tags bg-color\n      neutral20: '#ededed',\n      // for input border-color\n      neutral30: '#ededed' // for input hover border-color\n    })\n  });\n};","map":{"version":3,"names":["isObjEmpty","obj","Object","keys","length","kFormatter","num","toFixed","htmlToString","html","replace","isToday","date","today","Date","getDate","getMonth","getFullYear","formatDate","value","formatting","month","day","year","Intl","DateTimeFormat","format","formatDateToMonthShort","toTimeForCurrentDay","hour","minute","isUserLoggedIn","localStorage","getItem","getUserData","JSON","parse","getHomeRouteForLoggedInUser","userRole","selectThemeColors","theme","colors","primary25","primary","neutral10","neutral20","neutral30"],"sources":["/Users/abc/Downloads/Workspace/projectFPT/cms-fusamate/cms-fusamate/cms-fusamte/src/utility/Utils.js"],"sourcesContent":["// ** Checks if an object is empty (returns boolean)\nexport const isObjEmpty = obj => Object.keys(obj).length === 0\n\n// ** Returns K format from a number\nexport const kFormatter = num => (num > 999 ? `${(num / 1000).toFixed(1)}k` : num)\n\n// ** Converts HTML to string\nexport const htmlToString = html => html.replace(/<\\/?[^>]+(>|$)/g, '')\n\n// ** Checks if the passed date is today\nconst isToday = date => {\n  const today = new Date()\n  return (\n    /* eslint-disable operator-linebreak */\n    date.getDate() === today.getDate() &&\n    date.getMonth() === today.getMonth() &&\n    date.getFullYear() === today.getFullYear()\n    /* eslint-enable */\n  )\n}\n\n/**\n ** Format and return date in Humanize format\n ** Intl docs: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format\n ** Intl Constructor: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat\n * @param {String} value date to format\n * @param {Object} formatting Intl object to format with\n */\nexport const formatDate = (value, formatting = { month: 'short', day: 'numeric', year: 'numeric' }) => {\n  if (!value) return value\n  return new Intl.DateTimeFormat('en-US', formatting).format(new Date(value))\n}\n\n// ** Returns short month of passed date\nexport const formatDateToMonthShort = (value, toTimeForCurrentDay = true) => {\n  const date = new Date(value)\n  let formatting = { month: 'short', day: 'numeric' }\n\n  if (toTimeForCurrentDay && isToday(date)) {\n    formatting = { hour: 'numeric', minute: 'numeric' }\n  }\n\n  return new Intl.DateTimeFormat('en-US', formatting).format(new Date(value))\n}\n\n/**\n ** Return if user is logged in\n ** This is completely up to you and how you want to store the token in your frontend application\n *  ? e.g. If you are using cookies to store the application please update this function\n */\nexport const isUserLoggedIn = () => localStorage.getItem('userData')\nexport const getUserData = () => JSON.parse(localStorage.getItem('userData'))\n\n/**\n ** This function is used for demo purpose route navigation\n ** In real app you won't need this function because your app will navigate to same route for each users regardless of ability\n ** Please note role field is just for showing purpose it's not used by anything in frontend\n ** We are checking role just for ease\n * ? NOTE: If you have different pages to navigate based on user ability then this function can be useful. However, you need to update it.\n * @param {String} userRole Role of user\n */\nexport const getHomeRouteForLoggedInUser = userRole => {\n  if (userRole === 'admin') return '/'\n  if (userRole === 'client') return '/access-control'\n  return '/cms/login'\n}\n\n// ** React Select Theme Colors\nexport const selectThemeColors = theme => ({\n  ...theme,\n  colors: {\n    ...theme.colors,\n    primary25: '#7367f01a', // for option hover bg-color\n    primary: '#7367f0', // for selected option bg-color\n    neutral10: '#7367f0', // for tags bg-color\n    neutral20: '#ededed', // for input border-color\n    neutral30: '#ededed' // for input hover border-color\n  }\n})\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}