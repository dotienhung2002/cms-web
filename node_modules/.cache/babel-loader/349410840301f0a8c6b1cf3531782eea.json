{"ast":null,"code":"var _jsxFileName = \"/Users/abc/Downloads/Workspace/projectFPT/cms-fusamate/cms-fusamate/cms-fusamte/src/@core/components/input-password-toggle/index.js\",\n    _s = $RefreshSig$();\n\n// ** React Imports\nimport { Fragment, useState } from 'react'; // ** Third Party Components\n\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport { Eye, EyeOff } from 'react-feather';\nimport { InputGroup, InputGroupAddon, Input, InputGroupText, Label, inputClassName } from 'reactstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst InputPasswordToggle = props => {\n  _s();\n\n  // ** Props\n  const {\n    label,\n    hideIcon,\n    showIcon,\n    visible,\n    className,\n    htmlFor,\n    placeholder,\n    iconSize,\n    inputClassName,\n    ...rest\n  } = props; // ** State\n\n  const [inputVisibility, setInputVisibility] = useState(visible); // ** Renders Icon Based On Visibility\n\n  const renderIcon = () => {\n    const size = iconSize ? iconSize : 14;\n\n    if (inputVisibility === false) {\n      return hideIcon ? hideIcon : /*#__PURE__*/_jsxDEV(Eye, {\n        size: size\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 36\n      }, this);\n    } else {\n      return showIcon ? showIcon : /*#__PURE__*/_jsxDEV(EyeOff, {\n        size: size\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 36\n      }, this);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [label ? /*#__PURE__*/_jsxDEV(Label, {\n      for: htmlFor,\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 16\n    }, this) : null, /*#__PURE__*/_jsxDEV(InputGroup, {\n      className: classnames({\n        [className]: className\n      }),\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        type: inputVisibility === false ? 'password' : 'text',\n        placeholder: placeholder ? placeholder : '············',\n        className: classnames({\n          [inputClassName]: inputClassName\n        })\n        /*eslint-disable */\n        ,\n        ...(label && htmlFor ? {\n          id: htmlFor\n        } : {}),\n        ...rest\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputGroupAddon, {\n        addonType: \"append\",\n        onClick: () => setInputVisibility(!inputVisibility),\n        children: /*#__PURE__*/_jsxDEV(InputGroupText, {\n          className: \"cursor-pointer\",\n          children: renderIcon()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n\n_s(InputPasswordToggle, \"CP4M4NpEdDJ4VcmvhtakRhTfULA=\");\n\n_c = InputPasswordToggle;\nexport default InputPasswordToggle; // ** PropTypes\n\nInputPasswordToggle.propTypes = {\n  hideIcon: PropTypes.node,\n  showIcon: PropTypes.node,\n  visible: PropTypes.bool,\n  className: PropTypes.string,\n  placeholder: PropTypes.string,\n  iconSize: PropTypes.number,\n  inputClassName: PropTypes.string,\n\n  label(props, propName, componentName) {\n    // ** If label is defined and htmlFor is undefined throw error\n    if (props[propName] && props['htmlFor'] === 'undefined') {\n      throw new Error('htmlFor prop is required when label prop is present');\n    }\n  },\n\n  htmlFor(props, propName, componentName) {\n    // ** If htmlFor is defined and label is undefined throw error\n    if (props[propName] && props['label'] === 'undefined') {\n      throw new Error('label prop is required when htmlFor prop is present');\n    }\n  }\n\n}; // ** Default Props\n\nInputPasswordToggle.defaultProps = {\n  visible: false\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"InputPasswordToggle\");","map":{"version":3,"sources":["/Users/abc/Downloads/Workspace/projectFPT/cms-fusamate/cms-fusamate/cms-fusamte/src/@core/components/input-password-toggle/index.js"],"names":["Fragment","useState","PropTypes","classnames","Eye","EyeOff","InputGroup","InputGroupAddon","Input","InputGroupText","Label","inputClassName","InputPasswordToggle","props","label","hideIcon","showIcon","visible","className","htmlFor","placeholder","iconSize","rest","inputVisibility","setInputVisibility","renderIcon","size","id","propTypes","node","bool","string","number","propName","componentName","Error","defaultProps"],"mappings":"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","sourcesContent":["// ** React Imports\nimport { Fragment, useState } from 'react'\n\n// ** Third Party Components\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport { Eye, EyeOff } from 'react-feather'\nimport { InputGroup, InputGroupAddon, Input, InputGroupText, Label, inputClassName } from 'reactstrap'\n\nconst InputPasswordToggle = props => {\n  // ** Props\n  const {\n    label,\n    hideIcon,\n    showIcon,\n    visible,\n    className,\n    htmlFor,\n    placeholder,\n    iconSize,\n    inputClassName,\n    ...rest\n  } = props\n\n  // ** State\n  const [inputVisibility, setInputVisibility] = useState(visible)\n\n  // ** Renders Icon Based On Visibility\n  const renderIcon = () => {\n    const size = iconSize ? iconSize : 14\n\n    if (inputVisibility === false) {\n      return hideIcon ? hideIcon : <Eye size={size} />\n    } else {\n      return showIcon ? showIcon : <EyeOff size={size} />\n    }\n  }\n\n  return (\n    <Fragment>\n      {label ? <Label for={htmlFor}>{label}</Label> : null}\n      <InputGroup\n        className={classnames({\n          [className]: className\n        })}\n      >\n        <Input\n          type={inputVisibility === false ? 'password' : 'text'}\n          placeholder={placeholder ? placeholder : '············'}\n          className={classnames({\n            [inputClassName]: inputClassName\n          })}\n          /*eslint-disable */\n          {...(label && htmlFor\n            ? {\n                id: htmlFor\n              }\n            : {})}\n          {...rest}\n          /*eslint-enable */\n        />\n        <InputGroupAddon addonType='append' onClick={() => setInputVisibility(!inputVisibility)}>\n          <InputGroupText className='cursor-pointer'>{renderIcon()}</InputGroupText>\n        </InputGroupAddon>\n      </InputGroup>\n    </Fragment>\n  )\n}\n\nexport default InputPasswordToggle\n\n// ** PropTypes\nInputPasswordToggle.propTypes = {\n  hideIcon: PropTypes.node,\n  showIcon: PropTypes.node,\n  visible: PropTypes.bool,\n  className: PropTypes.string,\n  placeholder: PropTypes.string,\n  iconSize: PropTypes.number,\n  inputClassName: PropTypes.string,\n  label(props, propName, componentName) {\n    // ** If label is defined and htmlFor is undefined throw error\n    if (props[propName] && props['htmlFor'] === 'undefined') {\n      throw new Error('htmlFor prop is required when label prop is present')\n    }\n  },\n  htmlFor(props, propName, componentName) {\n    // ** If htmlFor is defined and label is undefined throw error\n    if (props[propName] && props['label'] === 'undefined') {\n      throw new Error('label prop is required when htmlFor prop is present')\n    }\n  }\n}\n\n// ** Default Props\nInputPasswordToggle.defaultProps = {\n  visible: false\n}\n"]},"metadata":{},"sourceType":"module"}