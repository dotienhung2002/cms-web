{"ast":null,"code":"var _jsxFileName = \"/Users/abc/Downloads/Workspace/projectFPT/cms-websitebangiay/src/views/components/alerts/AlertSourceCode.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport var defaultAlert = /*#__PURE__*/_jsxDEV(\"pre\", {\n  className: \"language-jsx\",\n  children: /*#__PURE__*/_jsxDEV(\"code\", {\n    className: \"language-jsx\",\n    children: \"\\n\\nimport { Alert } from 'reactstrap'\\n\\nconst DefaultAlert = () => {\\n  return (\\n    <React.Fragment>\\n      <Alert color='primary'>\\n        <div className='alert-body'>\\n          <span className='font-weight-bold'>Good Morning!</span>\\n          <span> Start your day with some alerts.</span>\\n        </div>\\n      </Alert>\\n    </React.Fragment>\\n  )\\n}\\nexport default DefaultAlert\\n  \"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 3,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 2,\n  columnNumber: 3\n}, this);\nexport var alertTitle = /*#__PURE__*/_jsxDEV(\"pre\", {\n  children: /*#__PURE__*/_jsxDEV(\"code\", {\n    className: \"language-jsx\",\n    children: \"\\n\\nimport { Alert } from 'reactstrap'\\n\\nconst AlertTitle = () => {\\n  return (\\n      <Alert color='warning'>\\n        <h4 className='alert-heading'>Lorem ipsum dolor sit amet</h4>\\n        <div className='alert-body'>Lorem ipsum dolor sit amet consectetur adipisicing elit. Ducimus, laborum!.</div>\\n      </Alert>\\n  )\\n}\\nexport default AlertTitle\\n\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 27,\n  columnNumber: 3\n}, this);\nexport var alertColors = /*#__PURE__*/_jsxDEV(\"pre\", {\n  children: /*#__PURE__*/_jsxDEV(\"code\", {\n    className: \"language-jsx\",\n    children: \"\\n\\nimport { Alert } from 'reactstrap'\\n\\nconst AlertColors = () => {\\n  return (\\n    <React.Fragment>\\n      <Alert color='primary'>\\n        <h4 className='alert-heading'>Primary</h4>\\n        <div className='alert-body'>\\n          Tootsie roll lollipop lollipop icing. Wafer cookie danish macaroon. Liquorice fruitcake apple pie I love\\n          cupcake cupcake.\\n        </div>\\n      </Alert>\\n      <Alert color='secondary'>\\n        <h4 className='alert-heading'>Secondary</h4>\\n        <div className='alert-body'>\\n          Tootsie roll lollipop lollipop icing. Wafer cookie danish macaroon. Liquorice fruitcake apple pie I love\\n          cupcake cupcake.\\n        </div>\\n      </Alert>\\n      <Alert color='success'>\\n        <h4 className='alert-heading'>Success</h4>\\n        <div className='alert-body'>\\n          Tootsie roll lollipop lollipop icing. Wafer cookie danish macaroon. Liquorice fruitcake apple pie I love\\n          cupcake cupcake.\\n        </div>\\n      </Alert>\\n      <Alert color='danger'>\\n        <h4 className='alert-heading'>Danger</h4>\\n        <div className='alert-body'>\\n          Tootsie roll lollipop lollipop icing. Wafer cookie danish macaroon. Liquorice fruitcake apple pie I love\\n          cupcake cupcake.\\n        </div>\\n      </Alert>\\n      <Alert color='warning'>\\n        <h4 className='alert-heading'>Warning</h4>\\n        <div className='alert-body'>\\n          Tootsie roll lollipop lollipop icing. Wafer cookie danish macaroon. Liquorice fruitcake apple pie I love\\n          cupcake cupcake.\\n        </div>\\n      </Alert>\\n      <Alert color='info'>\\n        <h4 className='alert-heading'>Info</h4>\\n        <div className='alert-body'>\\n          Tootsie roll lollipop lollipop icing. Wafer cookie danish macaroon. Liquorice fruitcake apple pie I love\\n          cupcake cupcake.\\n        </div>\\n      </Alert>\\n      <Alert color='dark'>\\n        <h4 className='alert-heading'>Dark</h4>\\n        <div className='alert-body'>\\n          Tootsie roll lollipop lollipop icing. Wafer cookie danish macaroon. Liquorice fruitcake apple pie I love\\n          cupcake cupcake.\\n        </div>\\n      </Alert>\\n    </React.Fragment>\\n  )\\n}\\nexport default AlertColors\\n\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 48,\n  columnNumber: 3\n}, this);\nexport var alertDismissable = /*#__PURE__*/_jsxDEV(\"pre\", {\n  children: /*#__PURE__*/_jsxDEV(\"code\", {\n    className: \"language-jsx\",\n    children: \"\\nimport React, { useState } from 'react'\\nimport { Alert } from 'reactstrap'\\n\\nconst AlertDismissable = () => {\\n  const [visible, setVisible] = useState(true)\\n\\n  return (\\n    <React.Fragment>\\n      <Alert color='info' isOpen={visible} toggle={() => setVisible(false)}>\\n        <div className='alert-body'>\\n          Chupa chups topping bonbon. Jelly-o toffee I love. Sweet I love wafer I love wafer.\\n        </div>\\n      </Alert>\\n    </React.Fragment>\\n  )\\n}\\nexport default AlertDismissable\\n    \"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 116,\n  columnNumber: 3\n}, this);\nexport var alertUncontrolled = /*#__PURE__*/_jsxDEV(\"pre\", {\n  children: /*#__PURE__*/_jsxDEV(\"code\", {\n    className: \"language-jsx\",\n    children: \"\\n\\nimport { UncontrolledAlert } from 'reactstrap'\\n\\nconst AlertUncontrolled = () => {\\n  return (\\n    <React.Fragment>\\n      <UncontrolledAlert color='danger'>\\n        <div className='alert-body'>\\n          Chupa chups topping bonbon. Jelly-o toffee I love. Sweet I love wafer I love wafer.\\n        </div>\\n      </UncontrolledAlert>\\n    </React.Fragment>\\n  )\\n}\\nexport default AlertUncontrolled\\n      \"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 142,\n  columnNumber: 3\n}, this);\nexport var alertIcon = /*#__PURE__*/_jsxDEV(\"pre\", {\n  children: /*#__PURE__*/_jsxDEV(\"code\", {\n    className: \"language-jsx\",\n    children: \"\\n\\nimport { Alert } from 'reactstrap'\\nimport { Star } from 'react-feather'\\n\\nconst AlertIcon = () => {\\n  return (\\n    <React.Fragment>\\n      <Alert color='primary'>\\n        <div className='alert-body'>\\n          <Star size={15} />\\n          <span className='ml-1'>\\n            Chupa chups topping bonbon. Jelly-o toffee I love. Sweet I love wafer I love wafer.\\n          </span>\\n        </div>\\n      </Alert>\\n    </React.Fragment>\\n  )\\n}\\nexport default AlertIcon\\n        \"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 166,\n  columnNumber: 3\n}, this);\nexport var alertExample = /*#__PURE__*/_jsxDEV(\"pre\", {\n  children: /*#__PURE__*/_jsxDEV(\"code\", {\n    className: \"language-jsx\",\n    children: \"\\nimport React, { useState } from 'react'\\nimport { Alert, FormGroup, Label, Input } from 'reactstrap'\\nimport { AlertCircle } from 'react-feather'\\n\\nconst AlertExample = () => {\\n  const [inputTerm, setInputTerm] = useState('')\\n  const [visible, setVisible] = useState('')\\n\\n  const handleInput = e => {\\n    setInputTerm(e.target.value)\\n\\n    if (e.target.value.length > 0 && isNaN(e.target.value)) {\\n      setVisible(true)\\n    } else {\\n      setVisible(false)\\n    }\\n  }\\n\\n  return (\\n    <React.Fragment>\\n      <FormGroup>\\n        <Label htmlFor='numbers'>Enter numbers only</Label>\\n        <Input\\n          className='w-25 h-25 pl-1'\\n          placeholder='0123456789'\\n          value={inputTerm}\\n          onChange={e => handleInput(e)}\\n        />\\n      </FormGroup>\\n      <Alert color='danger' isOpen={visible}>\\n        <div className='alert-body'>\\n          <AlertCircle size={15} />{' '}\\n          <span className='ml-1'>\\n            the value is <strong>invalid</strong> you can only enter numbers\\n          </span>\\n        </div>\\n      </Alert>\\n    </React.Fragment>\\n  )\\n}\\nexport default AlertExample\\n        \"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 195,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 194,\n  columnNumber: 3\n}, this);","map":{"version":3,"names":["defaultAlert","alertTitle","alertColors","alertDismissable","alertUncontrolled","alertIcon","alertExample"],"sources":["/Users/abc/Downloads/Workspace/projectFPT/cms-websitebangiay/src/views/components/alerts/AlertSourceCode.js"],"sourcesContent":["export const defaultAlert = (\n  <pre className='language-jsx'>\n    <code className='language-jsx'>\n      {`\n\nimport { Alert } from 'reactstrap'\n\nconst DefaultAlert = () => {\n  return (\n    <React.Fragment>\n      <Alert color='primary'>\n        <div className='alert-body'>\n          <span className='font-weight-bold'>Good Morning!</span>\n          <span> Start your day with some alerts.</span>\n        </div>\n      </Alert>\n    </React.Fragment>\n  )\n}\nexport default DefaultAlert\n  `}\n    </code>\n  </pre>\n)\n\nexport const alertTitle = (\n  <pre>\n    <code className='language-jsx'>\n      {`\n\nimport { Alert } from 'reactstrap'\n\nconst AlertTitle = () => {\n  return (\n      <Alert color='warning'>\n        <h4 className='alert-heading'>Lorem ipsum dolor sit amet</h4>\n        <div className='alert-body'>Lorem ipsum dolor sit amet consectetur adipisicing elit. Ducimus, laborum!.</div>\n      </Alert>\n  )\n}\nexport default AlertTitle\n`}\n    </code>\n  </pre>\n)\n\nexport const alertColors = (\n  <pre>\n    <code className='language-jsx'>\n      {`\n\nimport { Alert } from 'reactstrap'\n\nconst AlertColors = () => {\n  return (\n    <React.Fragment>\n      <Alert color='primary'>\n        <h4 className='alert-heading'>Primary</h4>\n        <div className='alert-body'>\n          Tootsie roll lollipop lollipop icing. Wafer cookie danish macaroon. Liquorice fruitcake apple pie I love\n          cupcake cupcake.\n        </div>\n      </Alert>\n      <Alert color='secondary'>\n        <h4 className='alert-heading'>Secondary</h4>\n        <div className='alert-body'>\n          Tootsie roll lollipop lollipop icing. Wafer cookie danish macaroon. Liquorice fruitcake apple pie I love\n          cupcake cupcake.\n        </div>\n      </Alert>\n      <Alert color='success'>\n        <h4 className='alert-heading'>Success</h4>\n        <div className='alert-body'>\n          Tootsie roll lollipop lollipop icing. Wafer cookie danish macaroon. Liquorice fruitcake apple pie I love\n          cupcake cupcake.\n        </div>\n      </Alert>\n      <Alert color='danger'>\n        <h4 className='alert-heading'>Danger</h4>\n        <div className='alert-body'>\n          Tootsie roll lollipop lollipop icing. Wafer cookie danish macaroon. Liquorice fruitcake apple pie I love\n          cupcake cupcake.\n        </div>\n      </Alert>\n      <Alert color='warning'>\n        <h4 className='alert-heading'>Warning</h4>\n        <div className='alert-body'>\n          Tootsie roll lollipop lollipop icing. Wafer cookie danish macaroon. Liquorice fruitcake apple pie I love\n          cupcake cupcake.\n        </div>\n      </Alert>\n      <Alert color='info'>\n        <h4 className='alert-heading'>Info</h4>\n        <div className='alert-body'>\n          Tootsie roll lollipop lollipop icing. Wafer cookie danish macaroon. Liquorice fruitcake apple pie I love\n          cupcake cupcake.\n        </div>\n      </Alert>\n      <Alert color='dark'>\n        <h4 className='alert-heading'>Dark</h4>\n        <div className='alert-body'>\n          Tootsie roll lollipop lollipop icing. Wafer cookie danish macaroon. Liquorice fruitcake apple pie I love\n          cupcake cupcake.\n        </div>\n      </Alert>\n    </React.Fragment>\n  )\n}\nexport default AlertColors\n`}\n    </code>\n  </pre>\n)\n\nexport const alertDismissable = (\n  <pre>\n    <code className='language-jsx'>\n      {`\nimport React, { useState } from 'react'\nimport { Alert } from 'reactstrap'\n\nconst AlertDismissable = () => {\n  const [visible, setVisible] = useState(true)\n\n  return (\n    <React.Fragment>\n      <Alert color='info' isOpen={visible} toggle={() => setVisible(false)}>\n        <div className='alert-body'>\n          Chupa chups topping bonbon. Jelly-o toffee I love. Sweet I love wafer I love wafer.\n        </div>\n      </Alert>\n    </React.Fragment>\n  )\n}\nexport default AlertDismissable\n    `}\n    </code>\n  </pre>\n)\n\nexport const alertUncontrolled = (\n  <pre>\n    <code className='language-jsx'>\n      {`\n\nimport { UncontrolledAlert } from 'reactstrap'\n\nconst AlertUncontrolled = () => {\n  return (\n    <React.Fragment>\n      <UncontrolledAlert color='danger'>\n        <div className='alert-body'>\n          Chupa chups topping bonbon. Jelly-o toffee I love. Sweet I love wafer I love wafer.\n        </div>\n      </UncontrolledAlert>\n    </React.Fragment>\n  )\n}\nexport default AlertUncontrolled\n      `}\n    </code>\n  </pre>\n)\n\nexport const alertIcon = (\n  <pre>\n    <code className='language-jsx'>\n      {`\n\nimport { Alert } from 'reactstrap'\nimport { Star } from 'react-feather'\n\nconst AlertIcon = () => {\n  return (\n    <React.Fragment>\n      <Alert color='primary'>\n        <div className='alert-body'>\n          <Star size={15} />\n          <span className='ml-1'>\n            Chupa chups topping bonbon. Jelly-o toffee I love. Sweet I love wafer I love wafer.\n          </span>\n        </div>\n      </Alert>\n    </React.Fragment>\n  )\n}\nexport default AlertIcon\n        `}\n    </code>\n  </pre>\n)\n\nexport const alertExample = (\n  <pre>\n    <code className='language-jsx'>\n      {`\nimport React, { useState } from 'react'\nimport { Alert, FormGroup, Label, Input } from 'reactstrap'\nimport { AlertCircle } from 'react-feather'\n\nconst AlertExample = () => {\n  const [inputTerm, setInputTerm] = useState('')\n  const [visible, setVisible] = useState('')\n\n  const handleInput = e => {\n    setInputTerm(e.target.value)\n\n    if (e.target.value.length > 0 && isNaN(e.target.value)) {\n      setVisible(true)\n    } else {\n      setVisible(false)\n    }\n  }\n\n  return (\n    <React.Fragment>\n      <FormGroup>\n        <Label htmlFor='numbers'>Enter numbers only</Label>\n        <Input\n          className='w-25 h-25 pl-1'\n          placeholder='0123456789'\n          value={inputTerm}\n          onChange={e => handleInput(e)}\n        />\n      </FormGroup>\n      <Alert color='danger' isOpen={visible}>\n        <div className='alert-body'>\n          <AlertCircle size={15} />{' '}\n          <span className='ml-1'>\n            the value is <strong>invalid</strong> you can only enter numbers\n          </span>\n        </div>\n      </Alert>\n    </React.Fragment>\n  )\n}\nexport default AlertExample\n        `}\n    </code>\n  </pre>\n)\n"],"mappings":";;AAAA,OAAO,IAAMA,YAAY,gBACvB;EAAK,SAAS,EAAC,cAAc;EAAA,uBAC3B;IAAM,SAAS,EAAC,cAAc;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA;AAmBvB;EAAA;EAAA;EAAA;AAAA,QAEV;AAED,OAAO,IAAMC,UAAU,gBACrB;EAAA,uBACE;IAAM,SAAS,EAAC,cAAc;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA;AAevB;EAAA;EAAA;EAAA;AAAA,QAEV;AAED,OAAO,IAAMC,WAAW,gBACtB;EAAA,uBACE;IAAM,SAAS,EAAC,cAAc;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA;AA8DvB;EAAA;EAAA;EAAA;AAAA,QAEV;AAED,OAAO,IAAMC,gBAAgB,gBAC3B;EAAA,uBACE;IAAM,SAAS,EAAC,cAAc;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA;AAoBvB;EAAA;EAAA;EAAA;AAAA,QAEV;AAED,OAAO,IAAMC,iBAAiB,gBAC5B;EAAA,uBACE;IAAM,SAAS,EAAC,cAAc;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA;AAkBvB;EAAA;EAAA;EAAA;AAAA,QAEV;AAED,OAAO,IAAMC,SAAS,gBACpB;EAAA,uBACE;IAAM,SAAS,EAAC,cAAc;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA;AAsBvB;EAAA;EAAA;EAAA;AAAA,QAEV;AAED,OAAO,IAAMC,YAAY,gBACvB;EAAA,uBACE;IAAM,SAAS,EAAC,cAAc;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA;AA4CvB;EAAA;EAAA;EAAA;AAAA,QAEV"},"metadata":{},"sourceType":"module"}