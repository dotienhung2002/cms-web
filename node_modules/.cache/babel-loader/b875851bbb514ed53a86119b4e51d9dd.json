{"ast":null,"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target;\n};\nvar objectWithoutProperties = function objectWithoutProperties(obj, keys) {\n  var target = {};\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n  return target;\n};\nvar DEFAULT_CDN_URL = 'https://cdnjs.cloudflare.com/ajax/libs/flag-icon-css/3.4.3/flags/4x3/';\nvar DEFAULT_CDN_SUFFIX = 'svg';\n\n// offset between uppercase ascii and regional indicator symbols\nvar OFFSET = 127397;\nfunction ReactCountryFlag(_ref) {\n  var cdnSuffix = _ref.cdnSuffix,\n    cdnUrl = _ref.cdnUrl,\n    countryCode = _ref.countryCode,\n    style = _ref.style,\n    svg = _ref.svg,\n    props = objectWithoutProperties(_ref, ['cdnSuffix', 'cdnUrl', 'countryCode', 'style', 'svg']);\n  if (typeof countryCode !== 'string') {\n    return null;\n  }\n  if (svg) {\n    var flagUrl = '' + cdnUrl + countryCode.toLowerCase() + '.' + DEFAULT_CDN_SUFFIX;\n    return React.createElement('img', _extends({}, props, {\n      src: flagUrl,\n      style: _extends({\n        display: 'inline-block',\n        width: '1em',\n        height: '1em',\n        verticalAlign: 'middle'\n      }, style)\n    }));\n  }\n  var emoji = countryCode.toUpperCase().replace(/./g, function (char) {\n    return String.fromCodePoint(char.charCodeAt(0) + OFFSET);\n  });\n  return React.createElement('span', _extends({\n    role: 'img'\n  }, props, {\n    style: _extends({\n      display: 'inline-block',\n      fontSize: '1em',\n      lineHeight: '1em',\n      verticalAlign: 'middle'\n    }, style)\n  }), emoji);\n}\nReactCountryFlag.propTypes = {\n  cdnUrl: PropTypes.string,\n  countryCode: PropTypes.string.isRequired,\n  style: PropTypes.object,\n  svg: PropTypes.bool\n};\nReactCountryFlag.defaultProps = {\n  cdnUrl: DEFAULT_CDN_URL,\n  svg: false\n};\nexport default ReactCountryFlag;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;AAGA,IAAMA,kBACF,uEADJ;AAEA,IAAMC,qBAAqB,KAA3B;;;AAGA,IAAMC,SAAS,MAAf;AAEA,SAASC,gBAAT,OAOG;MANCC,SAMD,QANCA,SAMD;IALCC,MAKD,QALCA,MAKD;IAJCC,WAID,QAJCA,WAID;IAHCC,KAGD,QAHCA,KAGD;IAFCC,GAED,QAFCA,GAED;IADIC,KACJ;MACK,OAAOH,WAAP,KAAuB,QAA3B,EAAqC;WAC1B,IAAP;;MAGAE,GAAJ,EAAS;QACCE,eAAaL,MAAb,GAAsBC,YAAYK,WAAZ,EAAtB,SAAmDV,kBAAzD;WAGIW,wCACQH,KADR;WAESC,OAFT;;iBAIiB,cADb;eAEW,KAFX;gBAGY,KAHZ;uBAImB;SACZH,KALP;OAJR;;MAeEM,QAAQP,YACTQ,WADS,GAETC,OAFS,CAED,IAFC,EAEK,UAACC,IAAD;WACXC,OAAOC,aAAP,CAAqBF,KAAKG,UAAL,CAAgB,CAAhB,IAAqBjB,MAA1C,CADW;GAFL,CAAd;SAOIU;UACS;KACDH,KAFR;;eAIiB,cADb;gBAEc,KAFd;kBAGgB,KAHhB;qBAImB;OACZF,KALP;YAJR;;AAiBJJ,iBAAiBiB,SAAjB,GAA6B;UACjBC,UAAUC,MADO;eAEZD,UAAUC,MAAV,CAAiBC,UAFL;SAGlBF,UAAUG,MAHQ;OAIpBH,UAAUI;CAJnB;AAOAtB,iBAAiBuB,YAAjB,GAAgC;UACpB1B,eADoB;OAEvB;CAFT","names":["DEFAULT_CDN_URL","DEFAULT_CDN_SUFFIX","OFFSET","ReactCountryFlag","cdnSuffix","cdnUrl","countryCode","style","svg","props","flagUrl","toLowerCase","React","emoji","toUpperCase","replace","char","String","fromCodePoint","charCodeAt","propTypes","PropTypes","string","isRequired","object","bool","defaultProps"],"sources":["../src/index.js"],"sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst DEFAULT_CDN_URL =\n    'https://cdnjs.cloudflare.com/ajax/libs/flag-icon-css/3.4.3/flags/4x3/'\nconst DEFAULT_CDN_SUFFIX = 'svg'\n\n// offset between uppercase ascii and regional indicator symbols\nconst OFFSET = 127397\n\nfunction ReactCountryFlag({\n    cdnSuffix,\n    cdnUrl,\n    countryCode,\n    style,\n    svg,\n    ...props\n}) {\n    if (typeof countryCode !== 'string') {\n        return null\n    }\n\n    if (svg) {\n        const flagUrl = `${cdnUrl}${countryCode.toLowerCase()}.${DEFAULT_CDN_SUFFIX}`\n\n        return (\n            <img\n                {...props}\n                src={flagUrl}\n                style={{\n                    display: 'inline-block',\n                    width: '1em',\n                    height: '1em',\n                    verticalAlign: 'middle',\n                    ...style\n                }}\n            />\n        )\n    }\n\n    const emoji = countryCode\n        .toUpperCase()\n        .replace(/./g, (char) =>\n            String.fromCodePoint(char.charCodeAt(0) + OFFSET)\n        )\n\n    return (\n        <span\n            role=\"img\"\n            {...props}\n            style={{\n                display: 'inline-block',\n                fontSize: '1em',\n                lineHeight: '1em',\n                verticalAlign: 'middle',\n                ...style\n            }}\n        >\n            {emoji}\n        </span>\n    )\n}\n\nReactCountryFlag.propTypes = {\n    cdnUrl: PropTypes.string,\n    countryCode: PropTypes.string.isRequired,\n    style: PropTypes.object,\n    svg: PropTypes.bool\n}\n\nReactCountryFlag.defaultProps = {\n    cdnUrl: DEFAULT_CDN_URL,\n    svg: false\n}\n\nexport default ReactCountryFlag\n"]},"metadata":{},"sourceType":"module"}