{"ast":null,"code":"import { createFactory as t, $eq as r, $ne as i, $lt as n, $lte as e, $gt as u, $gte as o, $in as a, $nin as s, $all as f, $size as c, $regex as h, $options as v, $elemMatch as l, $exists as d, eq as b, ne as y, lt as p, lte as w, gt as g, gte as E, within as A, nin as $, all as m, size as j, regex as M, elemMatch as x, exists as F, and as O } from \"@ucast/mongo2js\";\nfunction P(t, r) {\n  for (var i = 0; i < r.length; i++) {\n    var n = r[i];\n    n.enumerable = n.enumerable || false;\n    n.configurable = true;\n    if (\"value\" in n) n.writable = true;\n    Object.defineProperty(t, n.key, n);\n  }\n}\nfunction R(t, r, i) {\n  if (r) P(t.prototype, r);\n  if (i) P(t, i);\n  return t;\n}\nfunction _() {\n  _ = Object.assign || function (t) {\n    for (var r = 1; r < arguments.length; r++) {\n      var i = arguments[r];\n      for (var n in i) {\n        if (Object.prototype.hasOwnProperty.call(i, n)) t[n] = i[n];\n      }\n    }\n    return t;\n  };\n  return _.apply(this, arguments);\n}\nfunction B(t, r) {\n  t.prototype = Object.create(r.prototype);\n  t.prototype.constructor = t;\n  t.__proto__ = r;\n}\nfunction T(t) {\n  if (void 0 === t) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  return t;\n}\nfunction k(t) {\n  return Array.isArray(t) ? t : [t];\n}\nvar q = \"__caslSubjectType__\";\nfunction z(t, r) {\n  if (r) if (!r.hasOwnProperty(q)) Object.defineProperty(r, q, {\n    value: t\n  });else if (t !== r[q]) throw new Error(\"Trying to cast object to subject type \" + t + \" but previously it was casted to \" + r[q]);\n  return r;\n}\nvar C = function t(r) {\n  var i = typeof r;\n  return \"string\" === i || \"function\" === i;\n};\nvar S = function t(r) {\n  return r.modelName || r.name;\n};\nvar Y = function t(r) {\n  return \"string\" === typeof r ? r : S(r);\n};\nfunction L(t) {\n  if (!t) return \"all\";\n  if (t.hasOwnProperty(q)) return t[q];\n  return S(t.constructor);\n}\nfunction D(t, r) {\n  var i = k(r);\n  var n = 0;\n  while (n < i.length) {\n    var e = i[n++];\n    if (t.hasOwnProperty(e)) i = i.concat(t[e]);\n  }\n  return i;\n}\nfunction G(t) {\n  if (t.manage) throw new Error('Cannot add alias for \"manage\" action because it is reserved');\n  Object.keys(t).forEach(function (r) {\n    var i = r === t[r] || Array.isArray(t[r]) && (-1 !== t[r].indexOf(r) || -1 !== t[r].indexOf(\"manage\"));\n    if (i) throw new Error(\"Attempt to alias action to itself: \" + r + \" -> \" + t[r]);\n  });\n}\nfunction H(t) {\n  if (\"production\" !== process.env.NODE_ENV) G(t);\n  return function (r) {\n    return D(t, r);\n  };\n}\nfunction I(t, r, i) {\n  for (var n = i; n < r.length; n++) {\n    t.push(r[n]);\n  }\n}\nfunction J(t, r) {\n  if (!t || !t.length) return r || [];\n  if (!r || !r.length) return t || [];\n  var i = 0;\n  var n = 0;\n  var e = [];\n  while (i < t.length && n < r.length) {\n    if (t[i].priority < r[n].priority) {\n      e.push(t[i]);\n      i++;\n    } else {\n      e.push(r[n]);\n      n++;\n    }\n  }\n  I(e, t, i);\n  I(e, r, n);\n  return e;\n}\nfunction K(t, r, i) {\n  var n = t.get(r);\n  if (!n) {\n    n = i();\n    t.set(r, n);\n  }\n  return n;\n}\nvar N = function t(r) {\n  return r;\n};\nfunction Q(t, r) {\n  if (Array.isArray(t.fields) && !t.fields.length) throw new Error(\"`rawRule.fields` cannot be an empty array. https://bit.ly/390miLa\");\n  if (t.fields && !r.fieldMatcher) throw new Error('You need to pass \"fieldMatcher\" option in order to restrict access by fields');\n  if (t.conditions && !r.conditionsMatcher) throw new Error('You need to pass \"conditionsMatcher\" option in order to restrict access by conditions');\n}\nvar U = function () {\n  function t(t, r, i) {\n    if (void 0 === i) i = 0;\n    Q(t, r);\n    this.action = r.resolveAction(t.action);\n    this.subject = t.subject;\n    this.inverted = !!t.inverted;\n    this.conditions = t.conditions;\n    this.reason = t.reason;\n    this.fields = t.fields ? k(t.fields) : void 0;\n    this.priority = i;\n    this.t = r;\n  }\n  var r = t.prototype;\n  r.i = function t() {\n    if (this.conditions && !this.u) this.u = this.t.conditionsMatcher(this.conditions);\n    return this.u;\n  };\n  r.matchesConditions = function t(r) {\n    if (!this.conditions) return true;\n    if (!r || C(r)) return !this.inverted;\n    var i = this.i();\n    return i(r);\n  };\n  r.matchesField = function t(r) {\n    if (!this.fields) return true;\n    if (!r) return !this.inverted;\n    if (this.fields && !this.o) this.o = this.t.fieldMatcher(this.fields);\n    return this.o(r);\n  };\n  R(t, [{\n    key: \"ast\",\n    get: function t() {\n      var r = this.i();\n      return r ? r.ast : void 0;\n    }\n  }]);\n  return t;\n}();\nvar V = function t(r, i) {\n  var n = {\n    value: r,\n    prev: i,\n    next: null\n  };\n  if (i) i.next = n;\n  return n;\n};\nvar W = function t(r) {\n  if (r.next) r.next.prev = r.prev;\n  if (r.prev) r.prev.next = r.next;\n  r.next = r.prev = null;\n};\nvar X = function t() {\n  return {\n    rules: [],\n    merged: false\n  };\n};\nvar Z = function t() {\n  return new Map();\n};\nvar tt = function t(r, i) {\n  if (!r.h && i.fields) r.h = true;\n};\nvar rt = function () {\n  function t(t, r) {\n    if (void 0 === t) t = [];\n    if (void 0 === r) r = {};\n    this.h = false;\n    this.v = new Map();\n    this.l = {\n      conditionsMatcher: r.conditionsMatcher,\n      fieldMatcher: r.fieldMatcher,\n      resolveAction: r.resolveAction || N\n    };\n    this.p = r.detectSubjectType || L;\n    this.g = t;\n    this.A = this.$(t);\n  }\n  var r = t.prototype;\n  r.detectSubjectType = function t(r) {\n    return C(r) ? r : this.p(r);\n  };\n  r.update = function t(r) {\n    var i = {\n      rules: r,\n      ability: this,\n      target: this\n    };\n    this.m(\"update\", i);\n    this.g = r;\n    this.A = this.$(r);\n    this.m(\"updated\", i);\n    return this;\n  };\n  r.$ = function t(r) {\n    var i = new Map();\n    for (var n = r.length - 1; n >= 0; n--) {\n      var e = r.length - n - 1;\n      var u = new U(r[n], this.l, e);\n      var o = k(u.action);\n      var a = k(u.subject || \"all\");\n      tt(this, u);\n      for (var s = 0; s < a.length; s++) {\n        var f = K(i, a[s], Z);\n        for (var c = 0; c < o.length; c++) {\n          K(f, o[c], X).rules.push(u);\n        }\n      }\n    }\n    return i;\n  };\n  r.possibleRulesFor = function t(r, i) {\n    if (void 0 === i) i = \"all\";\n    if (!C(i)) throw new Error('\"possibleRulesFor\" accepts only subject types (i.e., string or class) as the 2nd parameter');\n    var n = K(this.A, i, Z);\n    var e = K(n, r, X);\n    if (e.merged) return e.rules;\n    var u = \"manage\" !== r && n.has(\"manage\") ? n.get(\"manage\").rules : void 0;\n    var o = J(e.rules, u);\n    if (\"all\" !== i) o = J(o, this.possibleRulesFor(r, \"all\"));\n    e.rules = o;\n    e.merged = true;\n    return o;\n  };\n  r.rulesFor = function t(r, i, n) {\n    var e = this.possibleRulesFor(r, i);\n    if (n && \"string\" !== typeof n) throw new Error(\"The 3rd, `field` parameter is expected to be a string. See https://stalniy.github.io/casl/en/api/casl-ability#can-of-pure-ability for details\");\n    if (!this.h) return e;\n    return e.filter(function (t) {\n      return t.matchesField(n);\n    });\n  };\n  r.on = function t(r, i) {\n    var n = this;\n    var e = this.v.get(r) || null;\n    var u = V(i, e);\n    this.v.set(r, u);\n    return function () {\n      if (!u.next && !u.prev && n.v.get(r) === u) n.v.delete(r);else W(u);\n    };\n  };\n  r.m = function t(r, i) {\n    var n = this.v.get(r) || null;\n    while (null !== n) {\n      var e = n.prev;\n      n.value(i);\n      n = e;\n    }\n  };\n  R(t, [{\n    key: \"rules\",\n    get: function t() {\n      return this.g;\n    }\n  }]);\n  return t;\n}();\nvar it = function (t) {\n  B(PureAbility, t);\n  function PureAbility() {\n    return t.apply(this, arguments) || this;\n  }\n  var r = PureAbility.prototype;\n  r.can = function t() {\n    var r = this.relevantRuleFor.apply(this, arguments);\n    return !!r && !r.inverted;\n  };\n  r.relevantRuleFor = function t(r, i, n) {\n    var e = this.detectSubjectType(i);\n    var u = this.rulesFor(r, e, n);\n    for (var o = 0, a = u.length; o < a; o++) {\n      if (u[o].matchesConditions(i)) return u[o];\n    }\n    return null;\n  };\n  r.cannot = function t() {\n    return !this.can.apply(this, arguments);\n  };\n  return PureAbility;\n}(rt);\nvar nt = {\n  $eq: r,\n  $ne: i,\n  $lt: n,\n  $lte: e,\n  $gt: u,\n  $gte: o,\n  $in: a,\n  $nin: s,\n  $all: f,\n  $size: c,\n  $regex: h,\n  $options: v,\n  $elemMatch: l,\n  $exists: d\n};\nvar et = {\n  eq: b,\n  ne: y,\n  lt: p,\n  lte: w,\n  gt: g,\n  gte: E,\n  in: A,\n  nin: $,\n  all: m,\n  size: j,\n  regex: M,\n  elemMatch: x,\n  exists: F,\n  and: O\n};\nvar ut = function r(i, n, e) {\n  return t(_({}, nt, i), _({}, et, n), e);\n};\nvar ot = t(nt, et);\nvar at = /[-/\\\\^$+?.()|[\\]{}]/g;\nvar st = /\\.?\\*+\\.?/g;\nvar ft = /\\*+/;\nvar ct = /\\./g;\nfunction ht(t, r, i) {\n  var n = \"*\" === i[0] || \".\" === t[0] && \".\" === t[t.length - 1] ? \"+\" : \"*\";\n  var e = -1 === t.indexOf(\"**\") ? \"[^.]\" : \".\";\n  var u = t.replace(ct, \"\\\\$&\").replace(ft, e + n);\n  return r + t.length === i.length ? \"(?:\" + u + \")?\" : u;\n}\nfunction vt(t, r, i) {\n  if (\".\" === t && (\"*\" === i[r - 1] || \"*\" === i[r + 1])) return t;\n  return \"\\\\\" + t;\n}\nfunction lt(t) {\n  var r = t.map(function (t) {\n    return t.replace(at, vt).replace(st, ht);\n  });\n  var i = r.length > 1 ? \"(?:\" + r.join(\"|\") + \")\" : r[0];\n  return new RegExp(\"^\" + i + \"$\");\n}\nvar dt = function t(r) {\n  var i;\n  return function (t) {\n    if (\"undefined\" === typeof i) i = r.every(function (t) {\n      return -1 === t.indexOf(\"*\");\n    }) ? null : lt(r);\n    return null === i ? -1 !== r.indexOf(t) : i.test(t);\n  };\n};\nvar bt = function (t) {\n  B(Ability, t);\n  function Ability(r, i) {\n    if (void 0 === r) r = [];\n    if (void 0 === i) i = {};\n    return t.call(this, r, _({\n      conditionsMatcher: ot,\n      fieldMatcher: dt\n    }, i)) || this;\n  }\n  return Ability;\n}(it);\nvar yt = function () {\n  function t(t) {\n    this.j = t;\n  }\n  var r = t.prototype;\n  r.because = function t(r) {\n    this.j.reason = r;\n    return this;\n  };\n  return t;\n}();\nvar pt = function () {\n  function AbilityBuilder(t) {\n    this.rules = [];\n    this.M = t;\n    this.can = this.can.bind(this);\n    this.cannot = this.cannot.bind(this);\n    this.build = this.build.bind(this);\n  }\n  var t = AbilityBuilder.prototype;\n  t.can = function t(r, i, n, e) {\n    var u = {\n      action: r\n    };\n    if (i) {\n      u.subject = i;\n      if (Array.isArray(n) || \"string\" === typeof n) u.fields = n;else if (\"undefined\" !== typeof n) u.conditions = n;\n      if (\"undefined\" !== typeof e) u.conditions = e;\n    }\n    this.rules.push(u);\n    return new yt(u);\n  };\n  t.cannot = function t(r, i, n, e) {\n    var u = this.can(r, i, n, e);\n    u.j.inverted = true;\n    return u;\n  };\n  t.build = function t(r) {\n    return new this.M(this.rules, r);\n  };\n  return AbilityBuilder;\n}();\nfunction defineAbility(t, r) {\n  var i = new pt(bt);\n  var n = t(i.can, i.cannot);\n  if (n && \"function\" === typeof n.then) return n.then(function () {\n    return i.build(r);\n  });\n  return i.build(r);\n}\nvar wt = function t(r) {\n  return 'Cannot execute \"' + r.action + '\" on \"' + r.subjectType + '\"';\n};\nvar gt = function t(r) {\n  this.message = r;\n};\ngt.prototype = Object.create(Error.prototype);\nvar Et = function (t) {\n  B(ForbiddenError, t);\n  ForbiddenError.setDefaultMessage = function t(r) {\n    this.F = \"string\" === typeof r ? function () {\n      return r;\n    } : r;\n  };\n  ForbiddenError.from = function t(r) {\n    return new this(r);\n  };\n  function ForbiddenError(r) {\n    var i;\n    i = t.call(this, \"\") || this;\n    i.ability = r;\n    if (\"function\" === typeof Error.captureStackTrace) {\n      i.name = \"ForbiddenError\";\n      Error.captureStackTrace(T(i), i.constructor);\n    }\n    return i;\n  }\n  var r = ForbiddenError.prototype;\n  r.setMessage = function t(r) {\n    this.message = r;\n    return this;\n  };\n  r.throwUnlessCan = function t() {\n    var r;\n    var i = (r = this.ability).relevantRuleFor.apply(r, arguments);\n    if (i && !i.inverted) return;\n    this.action = arguments.length <= 0 ? void 0 : arguments[0];\n    this.subject = arguments.length <= 1 ? void 0 : arguments[1];\n    this.subjectType = Y(this.ability.detectSubjectType(arguments.length <= 1 ? void 0 : arguments[1]));\n    this.field = arguments.length <= 2 ? void 0 : arguments[2];\n    var n = i ? i.reason : \"\";\n    this.message = this.message || n || this.constructor.F(this);\n    throw this;\n  };\n  return ForbiddenError;\n}(gt);\nEt.F = wt;\nexport { bt as Ability, pt as AbilityBuilder, Et as ForbiddenError, it as PureAbility, ut as buildMongoQueryMatcher, H as createAliasResolver, defineAbility, L as detectSubjectType, dt as fieldPatternMatcher, wt as getDefaultErrorMessage, ot as mongoQueryMatcher, z as subject, k as wrapArray };","map":{"version":3,"mappings":"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","names":["wrapArray","value","Array","isArray","TYPE_FIELD","setSubjectType","type","object","hasOwnProperty","Object","defineProperty","Error","isSubjectType","getSubjectClassName","modelName","name","getSubjectTypeName","detectSubjectType","subject","constructor","expandActions","aliasMap","rawActions","actions","i","length","action","concat","assertAliasMap","manage","keys","forEach","alias","hasError","indexOf","createAliasResolver","process","env","NODE_ENV","copyArrayTo","dest","target","start","push","mergePrioritized","array","anotherArray","j","merged","priority","getOrDefault","map","key","defaultValue","get","set","identity","x","validate","rule","options","fields","fieldMatcher","conditions","conditionsMatcher","Rule","resolveAction","inverted","reason","undefined","_options","_conditionsMatcher","this","_matchConditions","matchesConditions","matches","matchesField","field","_matchField","ast","linkedItem","prev","item","next","unlinkItem","defaultActionEntry","rules","defaultSubjectEntry","Map","analyze","index","_hasPerFieldRules","RuleIndex","_events","_ruleOptions","_detectSubjectType","_rules","_indexedRules","_buildIndexFor","update","event","ability","_emit","rawRules","indexedRules","subjects","k","subjectRules","possibleRulesFor","subjectType","actionRules","manageRules","has","rulesFor","filter","on","handler","head","_this","delete","payload","current","PureAbility","can","relevantRuleFor","r","cannot","defaultInstructions","$eq","$ne","$lt","$lte","$gt","$gte","$in","$nin","$all","$size","$regex","$options","$elemMatch","$exists","defaultInterpreters","eq","ne","lt","lte","gt","gte","in","within","nin","all","size","regex","elemMatch","exists","and","buildMongoQueryMatcher","instructions","interpreters","createFactory","mongoQueryMatcher","REGEXP_SPECIAL_CHARS","REGEXP_ANY","REGEXP_STARS","REGEXP_DOT","detectRegexpPattern","match","string","quantifier","matcher","pattern","replace","escapeRegexp","createPattern","patterns","join","RegExp","fieldPatternMatcher","every","f","test","Ability","_PureAbility","RuleBuilder","_rule","because","AbilityBuilder","AbilityType","_AbilityType","bind","build","conditionsOrFields","builder","defineAbility","define","result","then","getDefaultErrorMessage","error","NativeError","NError","message","prototype","create","ForbiddenError","setDefaultMessage","messageOrFn","_defaultErrorMessage","from","captureStackTrace","setMessage","throwUnlessCan"],"sources":["../../src/utils.ts","../../src/Rule.ts","../../src/structures/LinkedItem.ts","../../src/RuleIndex.ts","../../src/PureAbility.ts","../../src/matchers/conditions.ts","../../src/matchers/field.ts","../../src/Ability.ts","../../src/AbilityBuilder.ts","../../src/ForbiddenError.ts"],"sourcesContent":["import { AnyObject, Subject, SubjectType, SubjectClass, ForcedSubject, AliasesMap } from './types';\n\nexport function wrapArray<T>(value: T[] | T): T[] {\n  return Array.isArray(value) ? value : [value];\n}\n\nexport function setByPath(object: AnyObject, path: string, value: unknown): void {\n  let ref = object;\n  let lastKey = path;\n\n  if (path.indexOf('.') !== -1) {\n    const keys = path.split('.');\n\n    lastKey = keys.pop()!;\n    ref = keys.reduce((res, prop) => {\n      res[prop] = res[prop] || {};\n      return res[prop] as AnyObject;\n    }, object);\n  }\n\n  ref[lastKey] = value;\n}\n\nconst TYPE_FIELD = '__caslSubjectType__';\nexport function setSubjectType<\n  T extends string,\n  U extends Record<PropertyKey, any>\n>(type: T, object: U): U & ForcedSubject<T> {\n  if (object) {\n    if (!object.hasOwnProperty(TYPE_FIELD)) {\n      Object.defineProperty(object, TYPE_FIELD, { value: type });\n    } else if (type !== object[TYPE_FIELD]) {\n      throw new Error(`Trying to cast object to subject type ${type} but previously it was casted to ${object[TYPE_FIELD]}`);\n    }\n  }\n\n  return object as U & ForcedSubject<T>;\n}\n\nexport const isSubjectType = (value: unknown): value is SubjectType => {\n  const type = typeof value;\n  return type === 'string' || type === 'function';\n};\n\nconst getSubjectClassName = (value: SubjectClass) => value.modelName || value.name;\nexport const getSubjectTypeName = (value: SubjectType) => {\n  return typeof value === 'string' ? value : getSubjectClassName(value);\n};\n\nexport function detectSubjectType(subject?: Exclude<Subject, SubjectType>): string {\n  if (!subject) {\n    return 'all';\n  }\n\n  if (subject.hasOwnProperty(TYPE_FIELD)) {\n    return (subject as any)[TYPE_FIELD];\n  }\n\n  return getSubjectClassName(subject.constructor as SubjectClass);\n}\n\nexport function expandActions(aliasMap: AliasesMap, rawActions: string | string[]) {\n  let actions = wrapArray(rawActions);\n  let i = 0;\n\n  while (i < actions.length) {\n    const action = actions[i++];\n\n    if (aliasMap.hasOwnProperty(action)) {\n      actions = actions.concat(aliasMap[action]);\n    }\n  }\n\n  return actions;\n}\n\nfunction assertAliasMap(aliasMap: AliasesMap) {\n  if (aliasMap.manage) {\n    throw new Error('Cannot add alias for \"manage\" action because it is reserved');\n  }\n\n  Object.keys(aliasMap).forEach((alias) => {\n    const hasError = alias === aliasMap[alias]\n      || Array.isArray(aliasMap[alias]) && (\n        aliasMap[alias].indexOf(alias) !== -1 || aliasMap[alias].indexOf('manage') !== -1\n      );\n\n    if (hasError) {\n      throw new Error(`Attempt to alias action to itself: ${alias} -> ${aliasMap[alias]}`);\n    }\n  });\n}\n\nexport function createAliasResolver(aliasMap: AliasesMap) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertAliasMap(aliasMap);\n  }\n\n  return (action: string | string[]) => expandActions(aliasMap, action);\n}\n\nfunction copyArrayTo<T>(dest: T[], target: T[], start: number) {\n  for (let i = start; i < target.length; i++) {\n    dest.push(target[i]);\n  }\n}\n\nexport function mergePrioritized<T extends { priority: number }>(\n  array?: T[],\n  anotherArray?: T[]\n): T[] {\n  if (!array || !array.length) {\n    return anotherArray || [];\n  }\n\n  if (!anotherArray || !anotherArray.length) {\n    return array || [];\n  }\n\n  let i = 0;\n  let j = 0;\n  const merged: T[] = [];\n\n  while (i < array.length && j < anotherArray.length) {\n    if (array[i].priority < anotherArray[j].priority) {\n      merged.push(array[i]);\n      i++;\n    } else {\n      merged.push(anotherArray[j]);\n      j++;\n    }\n  }\n\n  copyArrayTo(merged, array, i);\n  copyArrayTo(merged, anotherArray, j);\n\n  return merged;\n}\n\nexport function getOrDefault<K, V>(map: Map<K, V>, key: K, defaultValue: () => V) {\n  let value = map.get(key);\n\n  if (!value) {\n    value = defaultValue();\n    map.set(key, value);\n  }\n\n  return value;\n}\n\nexport const identity = <T>(x: T) => x;\n","import { wrapArray, isSubjectType } from './utils';\nimport {\n  MatchConditions,\n  MatchField,\n  Abilities,\n  ToAbilityTypes,\n  Normalize,\n  ConditionsMatcher,\n  FieldMatcher,\n} from './types';\nimport { RawRule, RawRuleFrom } from './RawRule';\n\ntype Tuple<A extends Abilities> = Normalize<ToAbilityTypes<A>>;\n\nfunction validate(rule: RawRuleFrom<Abilities, any>, options: RuleOptions<any>) {\n  if (Array.isArray(rule.fields) && !rule.fields.length) {\n    throw new Error('`rawRule.fields` cannot be an empty array. https://bit.ly/390miLa');\n  }\n\n  if (rule.fields && !options.fieldMatcher) {\n    throw new Error('You need to pass \"fieldMatcher\" option in order to restrict access by fields');\n  }\n\n  if (rule.conditions && !options.conditionsMatcher) {\n    throw new Error('You need to pass \"conditionsMatcher\" option in order to restrict access by conditions');\n  }\n}\n\nexport interface RuleOptions<Conditions> {\n  conditionsMatcher?: ConditionsMatcher<Conditions>\n  fieldMatcher?: FieldMatcher\n  resolveAction(action: string | string[]): string | string[]\n}\n\nexport class Rule<A extends Abilities, C> {\n  private _matchConditions: MatchConditions | undefined;\n  private _matchField: MatchField<string> | undefined;\n  private readonly _options!: RuleOptions<C>;\n  public readonly action!: Tuple<A>[0] | Tuple<A>[0][];\n  public readonly subject!: Tuple<A>[1] | Tuple<A>[1][];\n  public readonly inverted!: boolean;\n  public readonly conditions!: C | undefined;\n  public readonly fields!: string[] | undefined;\n  public readonly reason!: string | undefined;\n  public readonly priority!: number;\n\n  constructor(\n    rule: RawRule<ToAbilityTypes<A>, C>,\n    options: RuleOptions<C>,\n    priority: number = 0\n  ) {\n    validate(rule, options);\n\n    this.action = options.resolveAction(rule.action);\n    this.subject = rule.subject!;\n    this.inverted = !!rule.inverted;\n    this.conditions = rule.conditions;\n    this.reason = rule.reason;\n    this.fields = rule.fields ? wrapArray(rule.fields) : undefined;\n    this.priority = priority;\n    this._options = options;\n  }\n\n  private _conditionsMatcher() {\n    if (this.conditions && !this._matchConditions) {\n      this._matchConditions = this._options.conditionsMatcher!(this.conditions);\n    }\n\n    return this._matchConditions!;\n  }\n\n  get ast() {\n    const matches = this._conditionsMatcher();\n    return matches ? matches.ast : undefined;\n  }\n\n  matchesConditions(object: Normalize<A>[1] | undefined): boolean {\n    if (!this.conditions) {\n      return true;\n    }\n\n    if (!object || isSubjectType(object)) {\n      return !this.inverted;\n    }\n\n    const matches = this._conditionsMatcher();\n    return matches(object as Record<string, unknown>);\n  }\n\n  matchesField(field: string | undefined): boolean {\n    if (!this.fields) {\n      return true;\n    }\n\n    if (!field) {\n      return !this.inverted;\n    }\n\n    if (this.fields && !this._matchField) {\n      this._matchField = this._options.fieldMatcher!(this.fields);\n    }\n\n    return this._matchField!(field);\n  }\n}\n","export interface LinkedItem<T> {\n  next: LinkedItem<T> | null\n  prev: LinkedItem<T> | null\n  readonly value: T\n}\n\nexport const linkedItem = <T>(value: T, prev: LinkedItem<T>['prev']) => {\n  const item = { value, prev, next: null };\n\n  if (prev) {\n    prev.next = item;\n  }\n\n  return item;\n};\n\nexport const unlinkItem = (item: LinkedItem<any>) => {\n  if (item.next) {\n    item.next.prev = item.prev;\n  }\n\n  if (item.prev) {\n    item.prev.next = item.next;\n  }\n\n  item.next = item.prev = null; // eslint-disable-line\n};\n","import { Rule, RuleOptions } from './Rule';\nimport { RawRuleFrom } from './RawRule';\nimport {\n  Abilities,\n  Normalize,\n  SubjectType,\n  AbilityParameters,\n  AbilityTuple,\n  ExtractSubjectType\n} from './types';\nimport { wrapArray, detectSubjectType, mergePrioritized, getOrDefault, identity, isSubjectType } from './utils';\nimport { LinkedItem, linkedItem, unlinkItem } from './structures/LinkedItem';\n\nexport interface RuleIndexOptions<A extends Abilities, C> extends Partial<RuleOptions<C>> {\n  detectSubjectType?(\n    subject: Exclude<Normalize<A>[1], SubjectType>\n  ): ExtractSubjectType<Normalize<A>[1]>\n}\n\ndeclare const $abilities: unique symbol;\ndeclare const $conditions: unique symbol;\ninterface WithGenerics {\n  [$abilities]: any\n  [$conditions]: any\n}\nexport type Public<T extends WithGenerics> = { [K in keyof T]: T[K] };\nexport interface Generics<T extends WithGenerics> {\n  abilities: T[typeof $abilities],\n  conditions: T[typeof $conditions]\n}\n\nexport type RuleOf<T extends WithGenerics> =\n  Rule<Generics<T>['abilities'], Generics<T>['conditions']>;\nexport type RawRuleOf<T extends WithGenerics> =\n  RawRuleFrom<Generics<T>['abilities'], Generics<T>['conditions']>;\n\nexport type RuleIndexOptionsOf<T extends WithGenerics> =\n  RuleIndexOptions<Generics<T>['abilities'], Generics<T>['conditions']>;\n\ninterface AbilityEvent<T extends WithGenerics> {\n  target: T\n  /** @deprecated use \"target\" property instead */\n  ability: T\n}\n\nexport interface UpdateEvent<T extends WithGenerics> extends AbilityEvent<T> {\n  rules: RawRuleOf<T>[]\n}\nexport type EventHandler<Event> = (event: Event) => void;\n\nexport type Events<\n  T extends WithGenerics,\n  K extends keyof EventsMap<T> = keyof EventsMap<T>\n> = Map<K, LinkedItem<EventHandler<EventsMap<T>[K]>> | null>;\n\ninterface EventsMap<T extends WithGenerics> {\n  update: UpdateEvent<T>\n  updated: UpdateEvent<T>\n}\n\ntype IndexTree<A extends Abilities, C> = Map<SubjectType, Map<string, {\n  rules: Rule<A, C>[],\n  merged: boolean\n}>>;\n\nexport type Unsubscribe = () => void;\n\nconst defaultActionEntry = () => ({\n  rules: [] as unknown as Rule<any, any>[],\n  merged: false\n});\nconst defaultSubjectEntry = () => new Map<string, ReturnType<typeof defaultActionEntry>>();\nconst analyze = (index: any, rule: Rule<any, any>) => {\n  if (!index._hasPerFieldRules && rule.fields) {\n    index._hasPerFieldRules = true;\n  }\n};\n\ntype AbilitySubjectTypeParameters<T extends Abilities, IncludeField extends boolean = true> =\n  AbilityParameters<\n  T,\n  T extends AbilityTuple\n    ? IncludeField extends true\n      ? (action: T[0], subject: ExtractSubjectType<T[1]>, field?: string) => 0\n      : (action: T[0], subject: ExtractSubjectType<T[1]>) => 0\n    : never,\n  (action: Extract<T, string>) => 0\n  >;\n\nexport class RuleIndex<A extends Abilities, Conditions> {\n  private _hasPerFieldRules: boolean = false;\n  private _events: Events<this> = new Map();\n  private _indexedRules!: IndexTree<A, Conditions>;\n  private _rules!: RawRuleFrom<A, Conditions>[];\n  private readonly _ruleOptions!: RuleOptions<Conditions>;\n  private readonly _detectSubjectType!: Required<RuleIndexOptions<A, Conditions>>['detectSubjectType'];\n  readonly [$abilities]!: A;\n  readonly [$conditions]!: Conditions;\n\n  constructor(\n    rules: RawRuleFrom<A, Conditions>[] = [],\n    options: RuleIndexOptions<A, Conditions> = {}\n  ) {\n    this._ruleOptions = {\n      conditionsMatcher: options.conditionsMatcher,\n      fieldMatcher: options.fieldMatcher,\n      resolveAction: options.resolveAction || identity,\n    };\n    this._detectSubjectType = options.detectSubjectType || detectSubjectType;\n    this._rules = rules;\n    this._indexedRules = this._buildIndexFor(rules);\n  }\n\n  get rules() {\n    return this._rules;\n  }\n\n  detectSubjectType(object?: Normalize<A>[1]): ExtractSubjectType<Normalize<A>[1]> {\n    return isSubjectType(object)\n      ? object\n      : this._detectSubjectType(object as Exclude<Normalize<A>[1], SubjectType>);\n  }\n\n  update(rules: RawRuleFrom<A, Conditions>[]): Public<this> {\n    const event = {\n      rules,\n      ability: this,\n      target: this\n    } as unknown as UpdateEvent<this>;\n\n    this._emit('update', event);\n    this._rules = rules;\n    this._indexedRules = this._buildIndexFor(rules);\n    this._emit('updated', event);\n\n    return this;\n  }\n\n  private _buildIndexFor(rawRules: RawRuleFrom<A, Conditions>[]) {\n    const indexedRules: IndexTree<A, Conditions> = new Map();\n\n    for (let i = rawRules.length - 1; i >= 0; i--) {\n      const priority = rawRules.length - i - 1;\n      const rule = new Rule(rawRules[i], this._ruleOptions, priority);\n      const actions = wrapArray(rule.action);\n      const subjects = wrapArray(rule.subject || 'all');\n      analyze(this, rule);\n\n      for (let k = 0; k < subjects.length; k++) {\n        const subjectRules = getOrDefault(indexedRules, subjects[k], defaultSubjectEntry);\n\n        for (let j = 0; j < actions.length; j++) {\n          getOrDefault(subjectRules, actions[j], defaultActionEntry).rules.push(rule);\n        }\n      }\n    }\n\n    return indexedRules;\n  }\n\n  possibleRulesFor(...args: AbilitySubjectTypeParameters<A, false>): Rule<A, Conditions>[]\n  possibleRulesFor(action: string, subjectType: SubjectType = 'all'): Rule<A, Conditions>[] {\n    if (!isSubjectType(subjectType)) {\n      throw new Error('\"possibleRulesFor\" accepts only subject types (i.e., string or class) as the 2nd parameter');\n    }\n\n    const subjectRules = getOrDefault(this._indexedRules, subjectType, defaultSubjectEntry);\n    const actionRules = getOrDefault(subjectRules, action, defaultActionEntry);\n\n    if (actionRules.merged) {\n      return actionRules.rules;\n    }\n\n    const manageRules = action !== 'manage' && subjectRules.has('manage')\n      ? subjectRules.get('manage')!.rules\n      : undefined;\n    let rules = mergePrioritized(actionRules.rules, manageRules);\n\n    if (subjectType !== 'all') {\n      rules = mergePrioritized(rules, (this as any).possibleRulesFor(action, 'all'));\n    }\n\n    actionRules.rules = rules;\n    actionRules.merged = true;\n\n    return rules;\n  }\n\n  rulesFor(...args: AbilitySubjectTypeParameters<A>): Rule<A, Conditions>[]\n  rulesFor(action: string, subjectType?: SubjectType, field?: string): Rule<A, Conditions>[] {\n    const rules: Rule<A, Conditions>[] = (this as any).possibleRulesFor(action, subjectType);\n\n    if (field && typeof field !== 'string') {\n      throw new Error('The 3rd, `field` parameter is expected to be a string. See https://stalniy.github.io/casl/en/api/casl-ability#can-of-pure-ability for details');\n    }\n\n    if (!this._hasPerFieldRules) {\n      return rules;\n    }\n\n    return rules.filter(rule => rule.matchesField(field));\n  }\n\n  on<T extends keyof EventsMap<this>>(\n    event: T,\n    handler: EventHandler<EventsMap<Public<this>>[T]>\n  ): Unsubscribe {\n    const head = this._events.get(event) || null;\n    const item = linkedItem(handler, head);\n    this._events.set(event, item);\n\n    return () => {\n      if (!item.next && !item.prev && this._events.get(event) === item) {\n        this._events.delete(event);\n      } else {\n        unlinkItem(item);\n      }\n    };\n  }\n\n  private _emit<T extends keyof EventsMap<this>>(name: T, payload: EventsMap<this>[T]) {\n    let current = this._events.get(name) || null;\n    while (current !== null) {\n      const prev = current.prev;\n      current.value(payload);\n      current = prev;\n    }\n  }\n}\n","import { RuleIndex, RuleIndexOptions, RuleIndexOptionsOf, Public, RawRuleOf } from './RuleIndex';\nimport { Abilities, AbilityTuple, CanParameters, Subject } from './types';\nimport { Rule } from './Rule';\n\nexport interface AbilityOptions<A extends Abilities, Conditions>\n  extends RuleIndexOptions<A, Conditions> {}\nexport interface AnyAbility extends Public<PureAbility<any, any>> {}\nexport interface AbilityOptionsOf<T extends AnyAbility> extends RuleIndexOptionsOf<T> {}\nexport type AbilityClass<T extends AnyAbility> = new (\n  rules?: RawRuleOf<T>[],\n  options?: AbilityOptionsOf<T>\n) => T;\n\nexport class PureAbility<\n  A extends Abilities = AbilityTuple,\n  Conditions = unknown\n> extends RuleIndex<A, Conditions> {\n  can(...args: CanParameters<A>): boolean {\n    const rule = this.relevantRuleFor(...args);\n    return !!rule && !rule.inverted;\n  }\n\n  relevantRuleFor(...args: CanParameters<A>): Rule<A, Conditions> | null\n  relevantRuleFor(action: string, subject?: Subject, field?: string): Rule<A, Conditions> | null {\n    const subjectType = this.detectSubjectType(subject);\n    const rules = (this as any).rulesFor(action, subjectType, field);\n\n    for (let i = 0, length = rules.length; i < length; i++) {\n      if (rules[i].matchesConditions(subject)) {\n        return rules[i];\n      }\n    }\n\n    return null;\n  }\n\n  cannot(...args: CanParameters<A>): boolean {\n    return !this.can(...args);\n  }\n}\n","import {\n  $eq,\n  eq,\n  $ne,\n  ne,\n  $lt,\n  lt,\n  $lte,\n  lte,\n  $gt,\n  gt,\n  $gte,\n  gte,\n  $in,\n  within,\n  $nin,\n  nin,\n  $all,\n  all,\n  $size,\n  size,\n  $regex,\n  $options,\n  regex,\n  $elemMatch,\n  elemMatch,\n  $exists,\n  exists,\n  and,\n  createFactory,\n  BuildMongoQuery,\n  DefaultOperators,\n} from '@ucast/mongo2js';\nimport { ConditionsMatcher, AnyObject } from '../types';\nimport { Container, GenericFactory } from '../hkt';\n\nconst defaultInstructions = {\n  $eq,\n  $ne,\n  $lt,\n  $lte,\n  $gt,\n  $gte,\n  $in,\n  $nin,\n  $all,\n  $size,\n  $regex,\n  $options,\n  $elemMatch,\n  $exists,\n};\nconst defaultInterpreters = {\n  eq,\n  ne,\n  lt,\n  lte,\n  gt,\n  gte,\n  in: within,\n  nin,\n  all,\n  size,\n  regex,\n  elemMatch,\n  exists,\n  and,\n};\n\ninterface MongoQueryFactory extends GenericFactory {\n  produce: MongoQuery<this[0]>\n}\n\ntype MergeUnion<T extends {}, Keys extends keyof T = keyof T> = { [K in Keys]: T[K] };\nexport type MongoQuery<T = AnyObject> = BuildMongoQuery<MergeUnion<T>, {\n  toplevel: {},\n  field: Pick<DefaultOperators<MergeUnion<T>>['field'], keyof typeof defaultInstructions>\n}> & Container<MongoQueryFactory>;\n\ntype MongoQueryMatcherFactory =\n  (...args: Partial<Parameters<typeof createFactory>>) => ConditionsMatcher<MongoQuery>;\nexport const buildMongoQueryMatcher = ((instructions, interpreters, options) => createFactory(\n  { ...defaultInstructions, ...instructions },\n  { ...defaultInterpreters, ...interpreters },\n  options\n)) as MongoQueryMatcherFactory;\n\nexport const mongoQueryMatcher = createFactory(defaultInstructions, defaultInterpreters);\nexport type {\n  MongoQueryFieldOperators,\n  MongoQueryTopLevelOperators,\n  MongoQueryOperators,\n} from '@ucast/mongo2js';\n","import { FieldMatcher } from '../types';\n\nconst REGEXP_SPECIAL_CHARS = /[-/\\\\^$+?.()|[\\]{}]/g;\nconst REGEXP_ANY = /\\.?\\*+\\.?/g;\nconst REGEXP_STARS = /\\*+/;\nconst REGEXP_DOT = /\\./g;\n\nfunction detectRegexpPattern(match: string, index: number, string: string): string {\n  const quantifier = string[0] === '*' || match[0] === '.' && match[match.length - 1] === '.'\n    ? '+'\n    : '*';\n  const matcher = match.indexOf('**') === -1 ? '[^.]' : '.';\n  const pattern = match.replace(REGEXP_DOT, '\\\\$&')\n    .replace(REGEXP_STARS, matcher + quantifier);\n\n  return index + match.length === string.length ? `(?:${pattern})?` : pattern;\n}\n\nfunction escapeRegexp(match: string, index: number, string: string): string {\n  if (match === '.' && (string[index - 1] === '*' || string[index + 1] === '*')) {\n    return match;\n  }\n\n  return `\\\\${match}`;\n}\n\nfunction createPattern(fields: string[]) {\n  const patterns = fields.map(field => field\n    .replace(REGEXP_SPECIAL_CHARS, escapeRegexp)\n    .replace(REGEXP_ANY, detectRegexpPattern));\n  const pattern = patterns.length > 1 ? `(?:${patterns.join('|')})` : patterns[0];\n\n  return new RegExp(`^${pattern}$`);\n}\n\nexport const fieldPatternMatcher: FieldMatcher = (fields) => {\n  let pattern: RegExp | null;\n\n  return (field) => {\n    if (typeof pattern === 'undefined') {\n      pattern = fields.every(f => f.indexOf('*') === -1)\n        ? null\n        : createPattern(fields);\n    }\n\n    return pattern === null\n      ? fields.indexOf(field) !== -1\n      : pattern.test(field);\n  };\n};\n","import { PureAbility, AbilityOptions } from './PureAbility';\nimport { RawRuleFrom } from './RawRule';\nimport { AbilityTuple } from './types';\nimport { MongoQuery, mongoQueryMatcher } from './matchers/conditions';\nimport { fieldPatternMatcher } from './matchers/field';\nimport { Public } from './RuleIndex';\n\nexport class Ability<\n  A extends AbilityTuple = AbilityTuple,\n  C extends MongoQuery = MongoQuery\n> extends PureAbility<A, C> {\n  constructor(rules: RawRuleFrom<A, C>[] = [], options: AbilityOptions<A, C> = {}) {\n    super(rules, {\n      conditionsMatcher: mongoQueryMatcher,\n      fieldMatcher: fieldPatternMatcher,\n      ...options,\n    });\n  }\n}\n\nexport interface AnyMongoAbility extends Public<Ability<any, MongoQuery>> {}\n","import { Ability, AnyMongoAbility } from './Ability';\nimport { AnyAbility, AbilityOptionsOf, AbilityClass } from './PureAbility';\nimport { RawRuleOf, Generics } from './RuleIndex';\nimport {\n  ExtractSubjectType as E,\n  AbilityTuple,\n  SubjectType,\n  TaggedInterface,\n  Normalize,\n  AnyObject,\n  AnyClass,\n} from './types';\nimport { ProduceGeneric } from './hkt';\n\nclass RuleBuilder<T extends AnyAbility> {\n  public _rule!: RawRuleOf<T>;\n\n  constructor(rule: RawRuleOf<T>) {\n    this._rule = rule;\n  }\n\n  because(reason: string): this {\n    this._rule.reason = reason;\n    return this;\n  }\n}\n\ntype InstanceOf<T extends AnyAbility, S extends SubjectType> = S extends AnyClass<infer R>\n  ? R\n  : S extends string\n    ? Exclude<Normalize<Generics<T>['abilities']>[1], SubjectType> extends { kind: string }\n      ? Extract<Normalize<Generics<T>['abilities']>[1], TaggedInterface<S>>\n      : AnyObject\n    : never;\ntype ConditionsOf<T extends AnyAbility, I extends {}> =\n  ProduceGeneric<Generics<T>['conditions'], I>;\ntype ActionFrom<T extends AbilityTuple, S extends SubjectType> = T extends any\n  ? S extends T[1] ? T[0] : never\n  : never;\ntype ActionOf<T extends AnyAbility, S extends SubjectType> = ActionFrom<Generics<T>['abilities'], S>;\ntype SubjectTypeOf<T extends AnyAbility> = E<Normalize<Generics<T>['abilities']>[1]>;\n\ntype SimpleCanParams<T extends AnyAbility> = Parameters<(\n  action: Generics<T>['abilities'] | Generics<T>['abilities'][]\n) => 0>;\ntype BuilderCanParameters<\n  S extends SubjectType,\n  I extends InstanceOf<T, S>,\n  T extends AnyAbility\n> = Generics<T>['abilities'] extends AbilityTuple\n  ? Parameters<(\n    action: ActionOf<T, S> | ActionOf<T, S>[],\n    subject: S | S[],\n    conditions?: ConditionsOf<T, I>\n  ) => 0>\n  : SimpleCanParams<T>;\n\ntype BuilderCanParametersWithFields<\n  S extends SubjectType,\n  I extends InstanceOf<T, S>,\n  F extends string,\n  T extends AnyAbility\n> = Generics<T>['abilities'] extends AbilityTuple\n  ? Parameters<(\n    action: ActionOf<T, S> | ActionOf<T, S>[],\n    subject: S | S[],\n    fields?: F | F[],\n    conditions?: ConditionsOf<T, I>\n  ) => 0>\n  : SimpleCanParams<T>;\ntype Keys<T> = string & keyof T;\n\nexport class AbilityBuilder<T extends AnyAbility> {\n  public rules: RawRuleOf<T>[] = [];\n  private _AbilityType!: AnyClass<T>;\n\n  constructor(AbilityType: AnyClass<T>) {\n    this._AbilityType = AbilityType;\n    this.can = this.can.bind(this as any);\n    this.cannot = this.cannot.bind(this as any);\n    this.build = this.build.bind(this as any);\n  }\n\n  can<\n    I extends InstanceOf<T, S>,\n    S extends SubjectTypeOf<T> = SubjectTypeOf<T>\n  >(...args: BuilderCanParameters<S, I, T>): RuleBuilder<T>\n  can<\n    I extends InstanceOf<T, S>,\n    F extends string = Keys<I>,\n    S extends SubjectTypeOf<T> = SubjectTypeOf<T>\n  >(...args: BuilderCanParametersWithFields<S, I, F | Keys<I>, T>): RuleBuilder<T>\n  can(\n    action: string | string[],\n    subject?: SubjectType | SubjectType[],\n    conditionsOrFields?: string | string[] | Generics<T>['conditions'],\n    conditions?: Generics<T>['conditions']\n  ): RuleBuilder<T> {\n    const rule = { action } as RawRuleOf<T>;\n\n    if (subject) {\n      rule.subject = subject;\n\n      if (Array.isArray(conditionsOrFields) || typeof conditionsOrFields === 'string') {\n        rule.fields = conditionsOrFields;\n      } else if (typeof conditionsOrFields !== 'undefined') {\n        rule.conditions = conditionsOrFields;\n      }\n\n      if (typeof conditions !== 'undefined') {\n        rule.conditions = conditions;\n      }\n    }\n\n    this.rules.push(rule);\n\n    return new RuleBuilder(rule);\n  }\n\n  cannot<\n    I extends InstanceOf<T, S>,\n    S extends SubjectTypeOf<T> = SubjectTypeOf<T>\n  >(...args: BuilderCanParameters<S, I, T>): RuleBuilder<T>\n  cannot<\n    I extends InstanceOf<T, S>,\n    F extends string = Keys<I>,\n    S extends SubjectTypeOf<T> = SubjectTypeOf<T>\n  >(...args: BuilderCanParametersWithFields<S, I, F | Keys<I>, T>): RuleBuilder<T>\n  cannot(\n    action: string | string[],\n    subject?: SubjectType | SubjectType[],\n    conditionsOrFields?: string | string[] | Generics<T>['conditions'],\n    conditions?: Generics<T>['conditions'],\n  ): RuleBuilder<T> {\n    const builder = (this as any).can(action, subject, conditionsOrFields, conditions);\n    builder._rule.inverted = true;\n    return builder;\n  }\n\n  build(options?: AbilityOptionsOf<T>) {\n    return new this._AbilityType(this.rules, options);\n  }\n}\n\ntype DSL<T extends AnyAbility, R> = (\n  can: AbilityBuilder<T>['can'],\n  cannot: AbilityBuilder<T>['cannot']\n) => R;\n\nexport function defineAbility<\n  T extends AnyMongoAbility\n>(define: DSL<T, Promise<void>>, options?: AbilityOptionsOf<T>): Promise<T>;\nexport function defineAbility<\n  T extends AnyMongoAbility\n>(define: DSL<T, void>, options?: AbilityOptionsOf<T>): T;\nexport function defineAbility<\n  T extends AnyMongoAbility\n>(define: DSL<T, void | Promise<void>>, options?: AbilityOptionsOf<T>): T | Promise<T> {\n  const builder = new AbilityBuilder(Ability as unknown as AbilityClass<T>);\n  const result = define(builder.can, builder.cannot);\n\n  if (result && typeof result.then === 'function') {\n    return result.then(() => builder.build(options));\n  }\n\n  return builder.build(options);\n}\n","import { AnyAbility } from './PureAbility';\nimport { Normalize } from './types';\nimport { Generics } from './RuleIndex';\nimport { getSubjectTypeName } from './utils';\n\nexport type GetErrorMessage = (error: ForbiddenError<AnyAbility>) => string;\nexport const getDefaultErrorMessage: GetErrorMessage = error => `Cannot execute \"${error.action}\" on \"${error.subjectType}\"`;\n\nconst NativeError = function NError(this: Error, message: string) {\n  this.message = message;\n} as unknown as new (message: string) => Error;\n\nNativeError.prototype = Object.create(Error.prototype);\n\nexport class ForbiddenError<T extends AnyAbility> extends NativeError {\n  public readonly ability!: T;\n  public action!: Normalize<Generics<T>['abilities']>[0];\n  public subject!: Generics<T>['abilities'][1];\n  public field?: string;\n  public subjectType!: string;\n\n  static _defaultErrorMessage = getDefaultErrorMessage;\n\n  static setDefaultMessage(messageOrFn: string | GetErrorMessage) {\n    this._defaultErrorMessage = typeof messageOrFn === 'string' ? () => messageOrFn : messageOrFn;\n  }\n\n  static from<U extends AnyAbility>(ability: U) {\n    return new this<U>(ability);\n  }\n\n  private constructor(ability: T) {\n    super('');\n    this.ability = ability;\n\n    if (typeof Error.captureStackTrace === 'function') {\n      this.name = 'ForbiddenError';\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n\n  setMessage(message: string) {\n    this.message = message;\n    return this;\n  }\n\n  throwUnlessCan(...args: Parameters<T['can']>) {\n    const rule = this.ability.relevantRuleFor(...args);\n\n    if (rule && !rule.inverted) {\n      return;\n    }\n\n    this.action = args[0];\n    this.subject = args[1];\n    this.subjectType = getSubjectTypeName(this.ability.detectSubjectType(args[1]));\n    this.field = args[2];\n\n    const reason = rule ? rule.reason : '';\n    // eslint-disable-next-line no-underscore-dangle\n    this.message = this.message || reason || (this.constructor as any)._defaultErrorMessage(this);\n    throw this; // eslint-disable-line\n  }\n}\n"]},"metadata":{},"sourceType":"module"}