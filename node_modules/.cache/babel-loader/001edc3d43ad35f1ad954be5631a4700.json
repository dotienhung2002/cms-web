{"ast":null,"code":"import _slicedToArray from \"/Users/abc/Downloads/Workspace/projectFPT/cms-websitebangiay/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nvar _s = $RefreshSig$();\n//** React Imports\nimport { useState } from 'react';\n\n// ** Configs\nimport themeConfig from '@Configs/themeConfig';\nexport var useNavbarType = function useNavbarType() {\n  _s();\n  // ** State\n  var _useState = useState(function () {\n      try {\n        return themeConfig.layout.navbar.type;\n      } catch (error) {\n        // ** If error return initialValue\n        console.log(error);\n        return themeConfig.layout.navbar.type;\n      }\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    navbarType = _useState2[0],\n    setNavbarType = _useState2[1];\n\n  // ** Return a wrapped version of useState's setter function\n  var setValue = function setValue(value) {\n    try {\n      // ** Allow value to be a function so we have same API as useState\n      var valueToStore = value instanceof Function ? value(navbarType) : value;\n\n      // ** Set state\n      setNavbarType(valueToStore);\n    } catch (error) {\n      // ** A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n  return [navbarType, setValue];\n};\n_s(useNavbarType, \"k9NBAxGiXTkLy5ErTbAkjxmK/F8=\");","map":{"version":3,"names":["useState","themeConfig","useNavbarType","layout","navbar","type","error","console","log","navbarType","setNavbarType","setValue","value","valueToStore","Function"],"sources":["/Users/abc/Downloads/Workspace/projectFPT/cms-websitebangiay/src/utility/hooks/useNavbarType.js"],"sourcesContent":["//** React Imports\nimport { useState } from 'react'\n\n// ** Configs\nimport themeConfig from '@Configs/themeConfig'\n\nexport const useNavbarType = () => {\n  // ** State\n  const [navbarType, setNavbarType] = useState(() => {\n    try {\n      return themeConfig.layout.navbar.type\n    } catch (error) {\n      // ** If error return initialValue\n      console.log(error)\n      return themeConfig.layout.navbar.type\n    }\n  })\n\n  // ** Return a wrapped version of useState's setter function\n  const setValue = value => {\n    try {\n      // ** Allow value to be a function so we have same API as useState\n      const valueToStore = value instanceof Function ? value(navbarType) : value\n\n      // ** Set state\n      setNavbarType(valueToStore)\n    } catch (error) {\n      // ** A more advanced implementation would handle the error case\n      console.log(error)\n    }\n  }\n\n  return [navbarType, setValue]\n}\n"],"mappings":";;AAAA;AACA,SAASA,QAAQ,QAAQ,OAAO;;AAEhC;AACA,OAAOC,WAAW,MAAM,sBAAsB;AAE9C,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAa,GAAS;EAAA;EACjC;EACA,gBAAoCF,QAAQ,CAAC,YAAM;MACjD,IAAI;QACF,OAAOC,WAAW,CAACE,MAAM,CAACC,MAAM,CAACC,IAAI;MACvC,CAAC,CAAC,OAAOC,KAAK,EAAE;QACd;QACAC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;QAClB,OAAOL,WAAW,CAACE,MAAM,CAACC,MAAM,CAACC,IAAI;MACvC;IACF,CAAC,CAAC;IAAA;IARKI,UAAU;IAAEC,aAAa;;EAUhC;EACA,IAAMC,QAAQ,GAAG,SAAXA,QAAQ,CAAGC,KAAK,EAAI;IACxB,IAAI;MACF;MACA,IAAMC,YAAY,GAAGD,KAAK,YAAYE,QAAQ,GAAGF,KAAK,CAACH,UAAU,CAAC,GAAGG,KAAK;;MAE1E;MACAF,aAAa,CAACG,YAAY,CAAC;IAC7B,CAAC,CAAC,OAAOP,KAAK,EAAE;MACd;MACAC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IACpB;EACF,CAAC;EAED,OAAO,CAACG,UAAU,EAAEE,QAAQ,CAAC;AAC/B,CAAC;AAAA,GA3BYT,aAAa"},"metadata":{},"sourceType":"module"}