{"ast":null,"code":"var _s = $RefreshSig$();\n\n//** React Imports\nimport { useEffect } from 'react'; // ** Store & Actions\n\nimport { handleRTL } from '@Store/actions/layout';\nimport { useDispatch, useSelector } from 'react-redux';\nexport const useRTL = () => {\n  _s();\n\n  // ** Store Vars\n  const dispatch = useDispatch();\n  const isRtl = useSelector(state => state.layout.isRTL); // ** Return a wrapped version of useState's setter function\n\n  const setValue = value => {\n    try {\n      // ** Allow value to be a function so we have same API as useState\n      const valueToStore = value instanceof Function ? value(isRtl) : value;\n      dispatch(handleRTL(valueToStore));\n    } catch (error) {\n      // ** A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    // ** Get HTML Tag\n    const element = document.getElementsByTagName('html')[0]; // ** If isRTL then add attr dir='rtl' with HTML else attr dir='ltr'\n\n    if (isRtl) {\n      element.setAttribute('dir', 'rtl');\n    } else {\n      element.setAttribute('dir', 'ltr');\n    }\n  }, [isRtl]);\n  return [isRtl, setValue];\n};\n\n_s(useRTL, \"bvotjOIwjvE2W8snyOVlqQxqT4s=\", false, function () {\n  return [useDispatch, useSelector];\n});","map":{"version":3,"sources":["/Users/abc/Downloads/Workspace/projectFPT/cms-fusamate/cms-fusamate/cms-fusamte/src/utility/hooks/useRTL.tsx"],"names":["useEffect","handleRTL","useDispatch","useSelector","useRTL","dispatch","isRtl","state","layout","isRTL","setValue","value","valueToStore","Function","error","console","log","element","document","getElementsByTagName","setAttribute"],"mappings":";;AAAA;AACA,SAASA,SAAT,QAA0B,OAA1B,C,CAEA;;AACA,SAASC,SAAT,QAA0B,uBAA1B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,OAAO,MAAMC,MAAM,GAAG,MAAM;AAAA;;AAC1B;AACA,QAAMC,QAAQ,GAAGH,WAAW,EAA5B;AACA,QAAMI,KAAK,GAAGH,WAAW,CAACI,KAAK,IAAIA,KAAK,CAACC,MAAN,CAAaC,KAAvB,CAAzB,CAH0B,CAK1B;;AACA,QAAMC,QAAQ,GAAGC,KAAK,IAAI;AACxB,QAAI;AACF;AACA,YAAMC,YAAY,GAAGD,KAAK,YAAYE,QAAjB,GAA4BF,KAAK,CAACL,KAAD,CAAjC,GAA2CK,KAAhE;AACAN,MAAAA,QAAQ,CAACJ,SAAS,CAACW,YAAD,CAAV,CAAR;AACD,KAJD,CAIE,OAAOE,KAAP,EAAc;AACd;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,GATD;;AAWAd,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,UAAMiB,OAAO,GAAGC,QAAQ,CAACC,oBAAT,CAA8B,MAA9B,EAAsC,CAAtC,CAAhB,CAFc,CAId;;AACA,QAAIb,KAAJ,EAAW;AACTW,MAAAA,OAAO,CAACG,YAAR,CAAqB,KAArB,EAA4B,KAA5B;AACD,KAFD,MAEO;AACLH,MAAAA,OAAO,CAACG,YAAR,CAAqB,KAArB,EAA4B,KAA5B;AACD;AACF,GAVQ,EAUN,CAACd,KAAD,CAVM,CAAT;AAYA,SAAO,CAACA,KAAD,EAAQI,QAAR,CAAP;AACD,CA9BM;;GAAMN,M;UAEMF,W,EACHC,W","sourcesContent":["//** React Imports\nimport { useEffect } from 'react'\n\n// ** Store & Actions\nimport { handleRTL } from '@Store/actions/layout'\nimport { useDispatch, useSelector } from 'react-redux'\n\nexport const useRTL = () => {\n  // ** Store Vars\n  const dispatch = useDispatch()\n  const isRtl = useSelector(state => state.layout.isRTL)\n\n  // ** Return a wrapped version of useState's setter function\n  const setValue = value => {\n    try {\n      // ** Allow value to be a function so we have same API as useState\n      const valueToStore = value instanceof Function ? value(isRtl) : value\n      dispatch(handleRTL(valueToStore))\n    } catch (error) {\n      // ** A more advanced implementation would handle the error case\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    // ** Get HTML Tag\n    const element = document.getElementsByTagName('html')[0]\n\n    // ** If isRTL then add attr dir='rtl' with HTML else attr dir='ltr'\n    if (isRtl) {\n      element.setAttribute('dir', 'rtl')\n    } else {\n      element.setAttribute('dir', 'ltr')\n    }\n  }, [isRtl])\n\n  return [isRtl, setValue]\n}\n"]},"metadata":{},"sourceType":"module"}