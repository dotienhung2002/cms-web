{"ast":null,"code":"import has from 'lodash/has'; // @ts-expect-error\n\nimport toposort from 'toposort';\nimport { split } from 'property-expr';\nimport Ref from '../Reference';\nimport isSchema from './isSchema';\nexport default function sortFields(fields) {\n  var excludes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var edges = [];\n  var nodes = [];\n  function addNode(depPath, key) {\n    var node = split(depPath)[0];\n    if (!~nodes.indexOf(node)) nodes.push(node);\n    if (!~excludes.indexOf(\"\".concat(key, \"-\").concat(node))) edges.push([key, node]);\n  }\n  var _loop = function _loop(key) {\n    if (has(fields, key)) {\n      var value = fields[key];\n      if (!~nodes.indexOf(key)) nodes.push(key);\n      if (Ref.isRef(value) && value.isSibling) addNode(value.path, key);else if (isSchema(value) && 'deps' in value) value.deps.forEach(function (path) {\n        return addNode(path, key);\n      });\n    }\n  };\n  for (var key in fields) {\n    _loop(key);\n  }\n  return toposort.array(nodes, edges).reverse();\n}","map":{"version":3,"names":["has","toposort","split","Ref","isSchema","sortFields","fields","excludes","edges","nodes","addNode","depPath","key","node","indexOf","push","value","isRef","isSibling","path","deps","forEach","array","reverse"],"sources":["/Users/abc/Downloads/Workspace/projectFPT/cms-fusamate/cms-fusamate/cms-fusamte/node_modules/yup/es/util/sortFields.js"],"sourcesContent":["import has from 'lodash/has'; // @ts-expect-error\n\nimport toposort from 'toposort';\nimport { split } from 'property-expr';\nimport Ref from '../Reference';\nimport isSchema from './isSchema';\nexport default function sortFields(fields, excludes = []) {\n  let edges = [];\n  let nodes = [];\n\n  function addNode(depPath, key) {\n    var node = split(depPath)[0];\n    if (!~nodes.indexOf(node)) nodes.push(node);\n    if (!~excludes.indexOf(`${key}-${node}`)) edges.push([key, node]);\n  }\n\n  for (const key in fields) if (has(fields, key)) {\n    let value = fields[key];\n    if (!~nodes.indexOf(key)) nodes.push(key);\n    if (Ref.isRef(value) && value.isSibling) addNode(value.path, key);else if (isSchema(value) && 'deps' in value) value.deps.forEach(path => addNode(path, key));\n  }\n\n  return toposort.array(nodes, edges).reverse();\n}"],"mappings":"AAAA,OAAOA,GAAG,MAAM,YAAY,CAAC,CAAC;;AAE9B,OAAOC,QAAQ,MAAM,UAAU;AAC/B,SAASC,KAAK,QAAQ,eAAe;AACrC,OAAOC,GAAG,MAAM,cAAc;AAC9B,OAAOC,QAAQ,MAAM,YAAY;AACjC,eAAe,SAASC,UAAU,CAACC,MAAM,EAAiB;EAAA,IAAfC,QAAQ,uEAAG,EAAE;EACtD,IAAIC,KAAK,GAAG,EAAE;EACd,IAAIC,KAAK,GAAG,EAAE;EAEd,SAASC,OAAO,CAACC,OAAO,EAAEC,GAAG,EAAE;IAC7B,IAAIC,IAAI,GAAGX,KAAK,CAACS,OAAO,CAAC,CAAC,CAAC,CAAC;IAC5B,IAAI,CAAC,CAACF,KAAK,CAACK,OAAO,CAACD,IAAI,CAAC,EAAEJ,KAAK,CAACM,IAAI,CAACF,IAAI,CAAC;IAC3C,IAAI,CAAC,CAACN,QAAQ,CAACO,OAAO,WAAIF,GAAG,cAAIC,IAAI,EAAG,EAAEL,KAAK,CAACO,IAAI,CAAC,CAACH,GAAG,EAAEC,IAAI,CAAC,CAAC;EACnE;EAAC,2BAEUD,GAAG;IAAY,IAAIZ,GAAG,CAACM,MAAM,EAAEM,GAAG,CAAC,EAAE;MAC9C,IAAII,KAAK,GAAGV,MAAM,CAACM,GAAG,CAAC;MACvB,IAAI,CAAC,CAACH,KAAK,CAACK,OAAO,CAACF,GAAG,CAAC,EAAEH,KAAK,CAACM,IAAI,CAACH,GAAG,CAAC;MACzC,IAAIT,GAAG,CAACc,KAAK,CAACD,KAAK,CAAC,IAAIA,KAAK,CAACE,SAAS,EAAER,OAAO,CAACM,KAAK,CAACG,IAAI,EAAEP,GAAG,CAAC,CAAC,KAAK,IAAIR,QAAQ,CAACY,KAAK,CAAC,IAAI,MAAM,IAAIA,KAAK,EAAEA,KAAK,CAACI,IAAI,CAACC,OAAO,CAAC,UAAAF,IAAI;QAAA,OAAIT,OAAO,CAACS,IAAI,EAAEP,GAAG,CAAC;MAAA,EAAC;IAC/J;EAAC;EAJD,KAAK,IAAMA,GAAG,IAAIN,MAAM;IAAA,MAAbM,GAAG;EAAA;EAMd,OAAOX,QAAQ,CAACqB,KAAK,CAACb,KAAK,EAAED,KAAK,CAAC,CAACe,OAAO,EAAE;AAC/C"},"metadata":{},"sourceType":"module"}